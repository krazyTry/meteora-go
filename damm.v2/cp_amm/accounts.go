// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package cp_amm

import (
	"fmt"

	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_ClaimFeeOperator:
		value := new(ClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ClaimFeeOperator: %w", err)
		}
		return value, nil
	case Account_Config:
		value := new(Config)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Config: %w", err)
		}
		return value, nil
	case Account_Pool:
		value := new(Pool)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Pool: %w", err)
		}
		return value, nil
	case Account_Position:
		value := new(Position)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Position: %w", err)
		}
		return value, nil
	case Account_TokenBadge:
		value := new(TokenBadge)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as TokenBadge: %w", err)
		}
		return value, nil
	case Account_Vesting:
		value := new(Vesting)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Vesting: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_ClaimFeeOperator(accountData []byte) (*ClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ClaimFeeOperator)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ClaimFeeOperator: %w", err)
	}
	return acc, nil
}

func ParseAccount_Config(accountData []byte) (*Config, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Config {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Config, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Config)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Config: %w", err)
	}
	return acc, nil
}

func ParseAccount_Pool(accountData []byte) (*Pool, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Pool {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Pool, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Pool)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Pool: %w", err)
	}
	return acc, nil
}

func ParseAccount_Position(accountData []byte) (*Position, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Position {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Position, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Position)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Position: %w", err)
	}
	return acc, nil
}

func ParseAccount_TokenBadge(accountData []byte) (*TokenBadge, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_TokenBadge {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_TokenBadge, binary.FormatDiscriminator(discriminator))
	}
	acc := new(TokenBadge)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type TokenBadge: %w", err)
	}
	return acc, nil
}

func ParseAccount_Vesting(accountData []byte) (*Vesting, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Vesting {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Vesting, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Vesting)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Vesting: %w", err)
	}
	return acc, nil
}
