// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package cp_amm

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_EvtAddLiquidity:
		value := new(EvtAddLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtAddLiquidity: %w", err)
		}
		return value, nil
	case Event_EvtClaimPartnerFee:
		value := new(EvtClaimPartnerFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimPartnerFee: %w", err)
		}
		return value, nil
	case Event_EvtClaimPositionFee:
		value := new(EvtClaimPositionFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimPositionFee: %w", err)
		}
		return value, nil
	case Event_EvtClaimProtocolFee:
		value := new(EvtClaimProtocolFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimProtocolFee: %w", err)
		}
		return value, nil
	case Event_EvtClaimReward:
		value := new(EvtClaimReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimReward: %w", err)
		}
		return value, nil
	case Event_EvtCloseClaimFeeOperator:
		value := new(EvtCloseClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCloseClaimFeeOperator: %w", err)
		}
		return value, nil
	case Event_EvtCloseConfig:
		value := new(EvtCloseConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCloseConfig: %w", err)
		}
		return value, nil
	case Event_EvtClosePosition:
		value := new(EvtClosePosition)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClosePosition: %w", err)
		}
		return value, nil
	case Event_EvtCreateClaimFeeOperator:
		value := new(EvtCreateClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateClaimFeeOperator: %w", err)
		}
		return value, nil
	case Event_EvtCreateConfig:
		value := new(EvtCreateConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateConfig: %w", err)
		}
		return value, nil
	case Event_EvtCreateDynamicConfig:
		value := new(EvtCreateDynamicConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateDynamicConfig: %w", err)
		}
		return value, nil
	case Event_EvtCreatePosition:
		value := new(EvtCreatePosition)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreatePosition: %w", err)
		}
		return value, nil
	case Event_EvtCreateTokenBadge:
		value := new(EvtCreateTokenBadge)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateTokenBadge: %w", err)
		}
		return value, nil
	case Event_EvtFundReward:
		value := new(EvtFundReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtFundReward: %w", err)
		}
		return value, nil
	case Event_EvtInitializePool:
		value := new(EvtInitializePool)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtInitializePool: %w", err)
		}
		return value, nil
	case Event_EvtInitializeReward:
		value := new(EvtInitializeReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtInitializeReward: %w", err)
		}
		return value, nil
	case Event_EvtLockPosition:
		value := new(EvtLockPosition)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtLockPosition: %w", err)
		}
		return value, nil
	case Event_EvtPermanentLockPosition:
		value := new(EvtPermanentLockPosition)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtPermanentLockPosition: %w", err)
		}
		return value, nil
	case Event_EvtRemoveLiquidity:
		value := new(EvtRemoveLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtRemoveLiquidity: %w", err)
		}
		return value, nil
	case Event_EvtSetPoolStatus:
		value := new(EvtSetPoolStatus)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtSetPoolStatus: %w", err)
		}
		return value, nil
	case Event_EvtSplitPosition:
		value := new(EvtSplitPosition)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtSplitPosition: %w", err)
		}
		return value, nil
	case Event_EvtSwap:
		value := new(EvtSwap)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtSwap: %w", err)
		}
		return value, nil
	case Event_EvtUpdateRewardDuration:
		value := new(EvtUpdateRewardDuration)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtUpdateRewardDuration: %w", err)
		}
		return value, nil
	case Event_EvtUpdateRewardFunder:
		value := new(EvtUpdateRewardFunder)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtUpdateRewardFunder: %w", err)
		}
		return value, nil
	case Event_EvtWithdrawIneligibleReward:
		value := new(EvtWithdrawIneligibleReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtWithdrawIneligibleReward: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_EvtAddLiquidity(eventData []byte) (*EvtAddLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtAddLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtAddLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtAddLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtAddLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClaimPartnerFee(eventData []byte) (*EvtClaimPartnerFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimPartnerFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimPartnerFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimPartnerFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimPartnerFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClaimPositionFee(eventData []byte) (*EvtClaimPositionFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimPositionFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimPositionFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimPositionFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimPositionFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClaimProtocolFee(eventData []byte) (*EvtClaimProtocolFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimProtocolFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimProtocolFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimProtocolFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimProtocolFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClaimReward(eventData []byte) (*EvtClaimReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimReward: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCloseClaimFeeOperator(eventData []byte) (*EvtCloseClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCloseClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCloseClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCloseClaimFeeOperator)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCloseClaimFeeOperator: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCloseConfig(eventData []byte) (*EvtCloseConfig, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCloseConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCloseConfig, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCloseConfig)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCloseConfig: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClosePosition(eventData []byte) (*EvtClosePosition, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClosePosition {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClosePosition, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClosePosition)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClosePosition: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateClaimFeeOperator(eventData []byte) (*EvtCreateClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateClaimFeeOperator)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateClaimFeeOperator: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateConfig(eventData []byte) (*EvtCreateConfig, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateConfig, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateConfig)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateConfig: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateDynamicConfig(eventData []byte) (*EvtCreateDynamicConfig, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateDynamicConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateDynamicConfig, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateDynamicConfig)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateDynamicConfig: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreatePosition(eventData []byte) (*EvtCreatePosition, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreatePosition {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreatePosition, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreatePosition)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreatePosition: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateTokenBadge(eventData []byte) (*EvtCreateTokenBadge, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateTokenBadge {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateTokenBadge, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateTokenBadge)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateTokenBadge: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtFundReward(eventData []byte) (*EvtFundReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtFundReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtFundReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtFundReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtFundReward: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtInitializePool(eventData []byte) (*EvtInitializePool, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtInitializePool {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtInitializePool, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtInitializePool)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtInitializePool: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtInitializeReward(eventData []byte) (*EvtInitializeReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtInitializeReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtInitializeReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtInitializeReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtInitializeReward: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtLockPosition(eventData []byte) (*EvtLockPosition, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtLockPosition {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtLockPosition, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtLockPosition)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtLockPosition: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtPermanentLockPosition(eventData []byte) (*EvtPermanentLockPosition, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtPermanentLockPosition {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtPermanentLockPosition, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtPermanentLockPosition)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtPermanentLockPosition: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtRemoveLiquidity(eventData []byte) (*EvtRemoveLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtRemoveLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtRemoveLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtRemoveLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtRemoveLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtSetPoolStatus(eventData []byte) (*EvtSetPoolStatus, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtSetPoolStatus {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtSetPoolStatus, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtSetPoolStatus)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtSetPoolStatus: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtSplitPosition(eventData []byte) (*EvtSplitPosition, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtSplitPosition {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtSplitPosition, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtSplitPosition)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtSplitPosition: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtSwap(eventData []byte) (*EvtSwap, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtSwap {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtSwap, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtSwap)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtSwap: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtUpdateRewardDuration(eventData []byte) (*EvtUpdateRewardDuration, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtUpdateRewardDuration {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtUpdateRewardDuration, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtUpdateRewardDuration)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtUpdateRewardDuration: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtUpdateRewardFunder(eventData []byte) (*EvtUpdateRewardFunder, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtUpdateRewardFunder {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtUpdateRewardFunder, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtUpdateRewardFunder)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtUpdateRewardFunder: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtWithdrawIneligibleReward(eventData []byte) (*EvtWithdrawIneligibleReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtWithdrawIneligibleReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtWithdrawIneligibleReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtWithdrawIneligibleReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtWithdrawIneligibleReward: %w", err)
	}
	return event, nil
}
