// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package cp_amm

import (
	"bytes"
	"fmt"

	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type AddLiquidityParameters struct {
	// delta liquidity
	LiquidityDelta binary.Uint128 `json:"liquidityDelta"`

	// maximum token a amount
	TokenAAmountThreshold uint64 `json:"tokenAAmountThreshold"`

	// maximum token b amount
	TokenBAmountThreshold uint64 `json:"tokenBAmountThreshold"`
}

func (obj AddLiquidityParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LiquidityDelta`:
	err = encoder.Encode(obj.LiquidityDelta)
	if err != nil {
		return errors.NewField("LiquidityDelta", err)
	}
	// Serialize `TokenAAmountThreshold`:
	err = encoder.Encode(obj.TokenAAmountThreshold)
	if err != nil {
		return errors.NewField("TokenAAmountThreshold", err)
	}
	// Serialize `TokenBAmountThreshold`:
	err = encoder.Encode(obj.TokenBAmountThreshold)
	if err != nil {
		return errors.NewField("TokenBAmountThreshold", err)
	}
	return nil
}

func (obj AddLiquidityParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidityParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidityParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityDelta`:
	err = decoder.Decode(&obj.LiquidityDelta)
	if err != nil {
		return errors.NewField("LiquidityDelta", err)
	}
	// Deserialize `TokenAAmountThreshold`:
	err = decoder.Decode(&obj.TokenAAmountThreshold)
	if err != nil {
		return errors.NewField("TokenAAmountThreshold", err)
	}
	// Deserialize `TokenBAmountThreshold`:
	err = decoder.Decode(&obj.TokenBAmountThreshold)
	if err != nil {
		return errors.NewField("TokenBAmountThreshold", err)
	}
	return nil
}

func (obj *AddLiquidityParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidityParameters: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidityParameters(buf []byte) (*AddLiquidityParameters, error) {
	obj := new(AddLiquidityParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeConfig struct {
	CliffFeeNumerator uint64           `json:"cliffFeeNumerator"`
	FeeSchedulerMode  FeeSchedulerMode `json:"feeSchedulerMode"`
	Padding           [5]uint8         `json:"padding"`
	NumberOfPeriod    uint16           `json:"numberOfPeriod"`
	PeriodFrequency   uint64           `json:"periodFrequency"`
	ReductionFactor   uint64           `json:"reductionFactor"`
}

func (obj BaseFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Serialize `FeeSchedulerMode`:
	err = encoder.Encode(obj.FeeSchedulerMode)
	if err != nil {
		return errors.NewField("FeeSchedulerMode", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `PeriodFrequency`:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	return nil
}

func (obj BaseFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Deserialize `FeeSchedulerMode`:
	err = decoder.Decode(&obj.FeeSchedulerMode)
	if err != nil {
		return errors.NewField("FeeSchedulerMode", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	return nil
}

func (obj *BaseFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeConfig(buf []byte) (*BaseFeeConfig, error) {
	obj := new(BaseFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeParameters struct {
	CliffFeeNumerator uint64           `json:"cliffFeeNumerator"`
	NumberOfPeriod    uint16           `json:"numberOfPeriod"`
	PeriodFrequency   uint64           `json:"periodFrequency"`
	ReductionFactor   uint64           `json:"reductionFactor"`
	FeeSchedulerMode  FeeSchedulerMode `json:"feeSchedulerMode"`
}

func (obj BaseFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `PeriodFrequency`:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `FeeSchedulerMode`:
	err = encoder.Encode(obj.FeeSchedulerMode)
	if err != nil {
		return errors.NewField("FeeSchedulerMode", err)
	}
	return nil
}

func (obj BaseFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `FeeSchedulerMode`:
	err = decoder.Decode(&obj.FeeSchedulerMode)
	if err != nil {
		return errors.NewField("FeeSchedulerMode", err)
	}
	return nil
}

func (obj *BaseFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeParameters(buf []byte) (*BaseFeeParameters, error) {
	obj := new(BaseFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeStruct struct {
	CliffFeeNumerator uint64           `json:"cliffFeeNumerator"`
	FeeSchedulerMode  FeeSchedulerMode `json:"feeSchedulerMode"`
	Padding0          [5]uint8         `json:"padding0"`
	NumberOfPeriod    uint16           `json:"numberOfPeriod"`
	PeriodFrequency   uint64           `json:"periodFrequency"`
	ReductionFactor   uint64           `json:"reductionFactor"`
	Padding1          uint64           `json:"padding1"`
}

func (obj BaseFeeStruct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Serialize `FeeSchedulerMode`:
	err = encoder.Encode(obj.FeeSchedulerMode)
	if err != nil {
		return errors.NewField("FeeSchedulerMode", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `PeriodFrequency`:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj BaseFeeStruct) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeStruct: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeStruct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Deserialize `FeeSchedulerMode`:
	err = decoder.Decode(&obj.FeeSchedulerMode)
	if err != nil {
		return errors.NewField("FeeSchedulerMode", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *BaseFeeStruct) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeStruct: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeStruct(buf []byte) (*BaseFeeStruct, error) {
	obj := new(BaseFeeStruct)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Parameter that set by the protocol
type ClaimFeeOperator struct {
	// operator
	Operator solanago.PublicKey `json:"operator"`

	// Reserve
	Padding [128]uint8 `json:"padding"`
}

func (obj ClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalClaimFeeOperator(buf []byte) (*ClaimFeeOperator, error) {
	obj := new(ClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Config struct {
	// Vault config key
	VaultConfigKey solanago.PublicKey `json:"vaultConfigKey"`

	// Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config.
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`

	// Pool fee
	PoolFees PoolFeesConfig `json:"poolFees"`

	// Activation type
	ActivationType ActivationType `json:"activationType"`

	// Collect fee mode
	CollectFeeMode CollectFeeMode `json:"collectFeeMode"`

	// Config type mode, 0 for static, 1 for dynamic
	ConfigType uint8 `json:"configType"`

	// padding 0
	Padding0 [5]uint8 `json:"padding0"`

	// config index
	Index uint64 `json:"index"`

	// sqrt min price
	SqrtMinPrice binary.Uint128 `json:"sqrtMinPrice"`

	// sqrt max price
	SqrtMaxPrice binary.Uint128 `json:"sqrtMaxPrice"`

	// Fee curve point
	// Padding for further use
	Padding1 [10]uint64 `json:"padding1"`
}

func (obj Config) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VaultConfigKey`:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `ConfigType`:
	err = encoder.Encode(obj.ConfigType)
	if err != nil {
		return errors.NewField("ConfigType", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `SqrtMinPrice`:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Serialize `SqrtMaxPrice`:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj Config) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Config: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `ConfigType`:
	err = decoder.Decode(&obj.ConfigType)
	if err != nil {
		return errors.NewField("ConfigType", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *Config) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Config: %w", err)
	}
	return nil
}

func UnmarshalConfig(buf []byte) (*Config, error) {
	obj := new(Config)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicConfigParameters struct {
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`
}

func (obj DynamicConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	return nil
}

func (obj DynamicConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	return nil
}

func (obj *DynamicConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalDynamicConfigParameters(buf []byte) (*DynamicConfigParameters, error) {
	obj := new(DynamicConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeConfig struct {
	Initialized              uint8          `json:"initialized"`
	Padding                  [7]uint8       `json:"padding"`
	MaxVolatilityAccumulator uint32         `json:"maxVolatilityAccumulator"`
	VariableFeeControl       uint32         `json:"variableFeeControl"`
	BinStep                  uint16         `json:"binStep"`
	FilterPeriod             uint16         `json:"filterPeriod"`
	DecayPeriod              uint16         `json:"decayPeriod"`
	ReductionFactor          uint16         `json:"reductionFactor"`
	Padding1                 [8]uint8       `json:"padding1"`
	BinStepU128              binary.Uint128 `json:"binStepU128"`
}

func (obj DynamicFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `BinStepU128`:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	return nil
}

func (obj DynamicFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	return nil
}

func (obj *DynamicFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeConfig(buf []byte) (*DynamicFeeConfig, error) {
	obj := new(DynamicFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeParameters struct {
	BinStep                  uint16         `json:"binStep"`
	BinStepU128              binary.Uint128 `json:"binStepU128"`
	FilterPeriod             uint16         `json:"filterPeriod"`
	DecayPeriod              uint16         `json:"decayPeriod"`
	ReductionFactor          uint16         `json:"reductionFactor"`
	MaxVolatilityAccumulator uint32         `json:"maxVolatilityAccumulator"`
	VariableFeeControl       uint32         `json:"variableFeeControl"`
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BinStepU128`:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	return nil
}

func (obj DynamicFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	return nil
}

func (obj *DynamicFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeParameters(buf []byte) (*DynamicFeeParameters, error) {
	obj := new(DynamicFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeStruct struct {
	Initialized              bool           `json:"initialized"`
	Padding                  [7]uint8       `json:"padding"`
	MaxVolatilityAccumulator uint32         `json:"maxVolatilityAccumulator"`
	VariableFeeControl       uint32         `json:"variableFeeControl"`
	BinStep                  uint16         `json:"binStep"`
	FilterPeriod             uint16         `json:"filterPeriod"`
	DecayPeriod              uint16         `json:"decayPeriod"`
	ReductionFactor          uint16         `json:"reductionFactor"`
	LastUpdateTimestamp      uint64         `json:"lastUpdateTimestamp"`
	BinStepU128              binary.Uint128 `json:"binStepU128"`
	SqrtPriceReference       binary.Uint128 `json:"sqrtPriceReference"`
	VolatilityAccumulator    binary.Uint128 `json:"volatilityAccumulator"`
	VolatilityReference      binary.Uint128 `json:"volatilityReference"`
}

func (obj DynamicFeeStruct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `LastUpdateTimestamp`:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return errors.NewField("LastUpdateTimestamp", err)
	}
	// Serialize `BinStepU128`:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	// Serialize `SqrtPriceReference`:
	err = encoder.Encode(obj.SqrtPriceReference)
	if err != nil {
		return errors.NewField("SqrtPriceReference", err)
	}
	// Serialize `VolatilityAccumulator`:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return errors.NewField("VolatilityAccumulator", err)
	}
	// Serialize `VolatilityReference`:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return errors.NewField("VolatilityReference", err)
	}
	return nil
}

func (obj DynamicFeeStruct) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeStruct: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeStruct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return errors.NewField("LastUpdateTimestamp", err)
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	// Deserialize `SqrtPriceReference`:
	err = decoder.Decode(&obj.SqrtPriceReference)
	if err != nil {
		return errors.NewField("SqrtPriceReference", err)
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return errors.NewField("VolatilityAccumulator", err)
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return errors.NewField("VolatilityReference", err)
	}
	return nil
}

func (obj *DynamicFeeStruct) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeStruct: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeStruct(buf []byte) (*DynamicFeeStruct, error) {
	obj := new(DynamicFeeStruct)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtAddLiquidity struct {
	Pool         solanago.PublicKey     `json:"pool"`
	Position     solanago.PublicKey     `json:"position"`
	Owner        solanago.PublicKey     `json:"owner"`
	Params       AddLiquidityParameters `json:"params"`
	TokenAAmount uint64                 `json:"tokenAAmount"`
	TokenBAmount uint64                 `json:"tokenBAmount"`
	TotalAmountA uint64                 `json:"totalAmountA"`
	TotalAmountB uint64                 `json:"totalAmountB"`
}

func (obj EvtAddLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Params`:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Serialize `TotalAmountA`:
	err = encoder.Encode(obj.TotalAmountA)
	if err != nil {
		return errors.NewField("TotalAmountA", err)
	}
	// Serialize `TotalAmountB`:
	err = encoder.Encode(obj.TotalAmountB)
	if err != nil {
		return errors.NewField("TotalAmountB", err)
	}
	return nil
}

func (obj EvtAddLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtAddLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtAddLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Deserialize `TotalAmountA`:
	err = decoder.Decode(&obj.TotalAmountA)
	if err != nil {
		return errors.NewField("TotalAmountA", err)
	}
	// Deserialize `TotalAmountB`:
	err = decoder.Decode(&obj.TotalAmountB)
	if err != nil {
		return errors.NewField("TotalAmountB", err)
	}
	return nil
}

func (obj *EvtAddLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtAddLiquidity: %w", err)
	}
	return nil
}

func UnmarshalEvtAddLiquidity(buf []byte) (*EvtAddLiquidity, error) {
	obj := new(EvtAddLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimPartnerFee struct {
	Pool         solanago.PublicKey `json:"pool"`
	TokenAAmount uint64             `json:"tokenAAmount"`
	TokenBAmount uint64             `json:"tokenBAmount"`
}

func (obj EvtClaimPartnerFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj EvtClaimPartnerFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimPartnerFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimPartnerFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj *EvtClaimPartnerFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimPartnerFee: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimPartnerFee(buf []byte) (*EvtClaimPartnerFee, error) {
	obj := new(EvtClaimPartnerFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimPositionFee struct {
	Pool        solanago.PublicKey `json:"pool"`
	Position    solanago.PublicKey `json:"position"`
	Owner       solanago.PublicKey `json:"owner"`
	FeeAClaimed uint64             `json:"feeAClaimed"`
	FeeBClaimed uint64             `json:"feeBClaimed"`
}

func (obj EvtClaimPositionFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `FeeAClaimed`:
	err = encoder.Encode(obj.FeeAClaimed)
	if err != nil {
		return errors.NewField("FeeAClaimed", err)
	}
	// Serialize `FeeBClaimed`:
	err = encoder.Encode(obj.FeeBClaimed)
	if err != nil {
		return errors.NewField("FeeBClaimed", err)
	}
	return nil
}

func (obj EvtClaimPositionFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimPositionFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimPositionFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `FeeAClaimed`:
	err = decoder.Decode(&obj.FeeAClaimed)
	if err != nil {
		return errors.NewField("FeeAClaimed", err)
	}
	// Deserialize `FeeBClaimed`:
	err = decoder.Decode(&obj.FeeBClaimed)
	if err != nil {
		return errors.NewField("FeeBClaimed", err)
	}
	return nil
}

func (obj *EvtClaimPositionFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimPositionFee: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimPositionFee(buf []byte) (*EvtClaimPositionFee, error) {
	obj := new(EvtClaimPositionFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimProtocolFee struct {
	Pool         solanago.PublicKey `json:"pool"`
	TokenAAmount uint64             `json:"tokenAAmount"`
	TokenBAmount uint64             `json:"tokenBAmount"`
}

func (obj EvtClaimProtocolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj EvtClaimProtocolFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimProtocolFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimProtocolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj *EvtClaimProtocolFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimProtocolFee: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimProtocolFee(buf []byte) (*EvtClaimProtocolFee, error) {
	obj := new(EvtClaimProtocolFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimReward struct {
	Pool        solanago.PublicKey `json:"pool"`
	Position    solanago.PublicKey `json:"position"`
	Owner       solanago.PublicKey `json:"owner"`
	MintReward  solanago.PublicKey `json:"mintReward"`
	RewardIndex uint8              `json:"rewardIndex"`
	TotalReward uint64             `json:"totalReward"`
}

func (obj EvtClaimReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `MintReward`:
	err = encoder.Encode(obj.MintReward)
	if err != nil {
		return errors.NewField("MintReward", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `TotalReward`:
	err = encoder.Encode(obj.TotalReward)
	if err != nil {
		return errors.NewField("TotalReward", err)
	}
	return nil
}

func (obj EvtClaimReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `MintReward`:
	err = decoder.Decode(&obj.MintReward)
	if err != nil {
		return errors.NewField("MintReward", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `TotalReward`:
	err = decoder.Decode(&obj.TotalReward)
	if err != nil {
		return errors.NewField("TotalReward", err)
	}
	return nil
}

func (obj *EvtClaimReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimReward: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimReward(buf []byte) (*EvtClaimReward, error) {
	obj := new(EvtClaimReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Close claim fee operator
type EvtCloseClaimFeeOperator struct {
	ClaimFeeOperator solanago.PublicKey `json:"claimFeeOperator"`
	Operator         solanago.PublicKey `json:"operator"`
}

func (obj EvtCloseClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClaimFeeOperator`:
	err = encoder.Encode(obj.ClaimFeeOperator)
	if err != nil {
		return errors.NewField("ClaimFeeOperator", err)
	}
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj EvtCloseClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCloseClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCloseClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClaimFeeOperator`:
	err = decoder.Decode(&obj.ClaimFeeOperator)
	if err != nil {
		return errors.NewField("ClaimFeeOperator", err)
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj *EvtCloseClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCloseClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalEvtCloseClaimFeeOperator(buf []byte) (*EvtCloseClaimFeeOperator, error) {
	obj := new(EvtCloseClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Close config
type EvtCloseConfig struct {
	// Config pubkey
	Config solanago.PublicKey `json:"config"`

	// admin pk
	Admin solanago.PublicKey `json:"admin"`
}

func (obj EvtCloseConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `Admin`:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	return nil
}

func (obj EvtCloseConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCloseConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCloseConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	return nil
}

func (obj *EvtCloseConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCloseConfig: %w", err)
	}
	return nil
}

func UnmarshalEvtCloseConfig(buf []byte) (*EvtCloseConfig, error) {
	obj := new(EvtCloseConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClosePosition struct {
	Pool            solanago.PublicKey `json:"pool"`
	Owner           solanago.PublicKey `json:"owner"`
	Position        solanago.PublicKey `json:"position"`
	PositionNftMint solanago.PublicKey `json:"positionNftMint"`
}

func (obj EvtClosePosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `PositionNftMint`:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return errors.NewField("PositionNftMint", err)
	}
	return nil
}

func (obj EvtClosePosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClosePosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClosePosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return errors.NewField("PositionNftMint", err)
	}
	return nil
}

func (obj *EvtClosePosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClosePosition: %w", err)
	}
	return nil
}

func UnmarshalEvtClosePosition(buf []byte) (*EvtClosePosition, error) {
	obj := new(EvtClosePosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create claim fee operator
type EvtCreateClaimFeeOperator struct {
	Operator solanago.PublicKey `json:"operator"`
}

func (obj EvtCreateClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj EvtCreateClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj *EvtCreateClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateClaimFeeOperator(buf []byte) (*EvtCreateClaimFeeOperator, error) {
	obj := new(EvtCreateClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create static config
type EvtCreateConfig struct {
	PoolFees             PoolFeeParameters  `json:"poolFees"`
	VaultConfigKey       solanago.PublicKey `json:"vaultConfigKey"`
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`
	ActivationType       uint8              `json:"activationType"`
	SqrtMinPrice         binary.Uint128     `json:"sqrtMinPrice"`
	SqrtMaxPrice         binary.Uint128     `json:"sqrtMaxPrice"`
	CollectFeeMode       uint8              `json:"collectFeeMode"`
	Index                uint64             `json:"index"`
	Config               solanago.PublicKey `json:"config"`
}

func (obj EvtCreateConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `VaultConfigKey`:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `SqrtMinPrice`:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Serialize `SqrtMaxPrice`:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	return nil
}

func (obj EvtCreateConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	return nil
}

func (obj *EvtCreateConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateConfig: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateConfig(buf []byte) (*EvtCreateConfig, error) {
	obj := new(EvtCreateConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create dynamic config
type EvtCreateDynamicConfig struct {
	Config               solanago.PublicKey `json:"config"`
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`
	Index                uint64             `json:"index"`
}

func (obj EvtCreateDynamicConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	return nil
}

func (obj EvtCreateDynamicConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateDynamicConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateDynamicConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	return nil
}

func (obj *EvtCreateDynamicConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateDynamicConfig: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateDynamicConfig(buf []byte) (*EvtCreateDynamicConfig, error) {
	obj := new(EvtCreateDynamicConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtCreatePosition struct {
	Pool            solanago.PublicKey `json:"pool"`
	Owner           solanago.PublicKey `json:"owner"`
	Position        solanago.PublicKey `json:"position"`
	PositionNftMint solanago.PublicKey `json:"positionNftMint"`
}

func (obj EvtCreatePosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `PositionNftMint`:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return errors.NewField("PositionNftMint", err)
	}
	return nil
}

func (obj EvtCreatePosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreatePosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreatePosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return errors.NewField("PositionNftMint", err)
	}
	return nil
}

func (obj *EvtCreatePosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreatePosition: %w", err)
	}
	return nil
}

func UnmarshalEvtCreatePosition(buf []byte) (*EvtCreatePosition, error) {
	obj := new(EvtCreatePosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create token badge
type EvtCreateTokenBadge struct {
	TokenMint solanago.PublicKey `json:"tokenMint"`
}

func (obj EvtCreateTokenBadge) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenMint`:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	return nil
}

func (obj EvtCreateTokenBadge) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateTokenBadge: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateTokenBadge) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	return nil
}

func (obj *EvtCreateTokenBadge) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateTokenBadge: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateTokenBadge(buf []byte) (*EvtCreateTokenBadge, error) {
	obj := new(EvtCreateTokenBadge)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtFundReward struct {
	Pool                        solanago.PublicKey `json:"pool"`
	Funder                      solanago.PublicKey `json:"funder"`
	MintReward                  solanago.PublicKey `json:"mintReward"`
	RewardIndex                 uint8              `json:"rewardIndex"`
	Amount                      uint64             `json:"amount"`
	TransferFeeExcludedAmountIn uint64             `json:"transferFeeExcludedAmountIn"`
	RewardDurationEnd           uint64             `json:"rewardDurationEnd"`
	PreRewardRate               binary.Uint128     `json:"preRewardRate"`
	PostRewardRate              binary.Uint128     `json:"postRewardRate"`
}

func (obj EvtFundReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Funder`:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Serialize `MintReward`:
	err = encoder.Encode(obj.MintReward)
	if err != nil {
		return errors.NewField("MintReward", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `TransferFeeExcludedAmountIn`:
	err = encoder.Encode(obj.TransferFeeExcludedAmountIn)
	if err != nil {
		return errors.NewField("TransferFeeExcludedAmountIn", err)
	}
	// Serialize `RewardDurationEnd`:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return errors.NewField("RewardDurationEnd", err)
	}
	// Serialize `PreRewardRate`:
	err = encoder.Encode(obj.PreRewardRate)
	if err != nil {
		return errors.NewField("PreRewardRate", err)
	}
	// Serialize `PostRewardRate`:
	err = encoder.Encode(obj.PostRewardRate)
	if err != nil {
		return errors.NewField("PostRewardRate", err)
	}
	return nil
}

func (obj EvtFundReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtFundReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtFundReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Deserialize `MintReward`:
	err = decoder.Decode(&obj.MintReward)
	if err != nil {
		return errors.NewField("MintReward", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `TransferFeeExcludedAmountIn`:
	err = decoder.Decode(&obj.TransferFeeExcludedAmountIn)
	if err != nil {
		return errors.NewField("TransferFeeExcludedAmountIn", err)
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return errors.NewField("RewardDurationEnd", err)
	}
	// Deserialize `PreRewardRate`:
	err = decoder.Decode(&obj.PreRewardRate)
	if err != nil {
		return errors.NewField("PreRewardRate", err)
	}
	// Deserialize `PostRewardRate`:
	err = decoder.Decode(&obj.PostRewardRate)
	if err != nil {
		return errors.NewField("PostRewardRate", err)
	}
	return nil
}

func (obj *EvtFundReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtFundReward: %w", err)
	}
	return nil
}

func UnmarshalEvtFundReward(buf []byte) (*EvtFundReward, error) {
	obj := new(EvtFundReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtInitializePool struct {
	Pool            solanago.PublicKey `json:"pool"`
	TokenAMint      solanago.PublicKey `json:"tokenAMint"`
	TokenBMint      solanago.PublicKey `json:"tokenBMint"`
	Creator         solanago.PublicKey `json:"creator"`
	Payer           solanago.PublicKey `json:"payer"`
	AlphaVault      solanago.PublicKey `json:"alphaVault"`
	PoolFees        PoolFeeParameters  `json:"poolFees"`
	SqrtMinPrice    binary.Uint128     `json:"sqrtMinPrice"`
	SqrtMaxPrice    binary.Uint128     `json:"sqrtMaxPrice"`
	ActivationType  uint8              `json:"activationType"`
	CollectFeeMode  uint8              `json:"collectFeeMode"`
	Liquidity       binary.Uint128     `json:"liquidity"`
	SqrtPrice       binary.Uint128     `json:"sqrtPrice"`
	ActivationPoint uint64             `json:"activationPoint"`
	TokenAFlag      uint8              `json:"tokenAFlag"`
	TokenBFlag      uint8              `json:"tokenBFlag"`
	TokenAAmount    uint64             `json:"tokenAAmount"`
	TokenBAmount    uint64             `json:"tokenBAmount"`
	TotalAmountA    uint64             `json:"totalAmountA"`
	TotalAmountB    uint64             `json:"totalAmountB"`
	PoolType        uint8              `json:"poolType"`
}

func (obj EvtInitializePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TokenAMint`:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Serialize `TokenBMint`:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `Payer`:
	err = encoder.Encode(obj.Payer)
	if err != nil {
		return errors.NewField("Payer", err)
	}
	// Serialize `AlphaVault`:
	err = encoder.Encode(obj.AlphaVault)
	if err != nil {
		return errors.NewField("AlphaVault", err)
	}
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `SqrtMinPrice`:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Serialize `SqrtMaxPrice`:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `ActivationPoint`:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Serialize `TokenAFlag`:
	err = encoder.Encode(obj.TokenAFlag)
	if err != nil {
		return errors.NewField("TokenAFlag", err)
	}
	// Serialize `TokenBFlag`:
	err = encoder.Encode(obj.TokenBFlag)
	if err != nil {
		return errors.NewField("TokenBFlag", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Serialize `TotalAmountA`:
	err = encoder.Encode(obj.TotalAmountA)
	if err != nil {
		return errors.NewField("TotalAmountA", err)
	}
	// Serialize `TotalAmountB`:
	err = encoder.Encode(obj.TotalAmountB)
	if err != nil {
		return errors.NewField("TotalAmountB", err)
	}
	// Serialize `PoolType`:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	return nil
}

func (obj EvtInitializePool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtInitializePool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtInitializePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `Payer`:
	err = decoder.Decode(&obj.Payer)
	if err != nil {
		return errors.NewField("Payer", err)
	}
	// Deserialize `AlphaVault`:
	err = decoder.Decode(&obj.AlphaVault)
	if err != nil {
		return errors.NewField("AlphaVault", err)
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Deserialize `TokenAFlag`:
	err = decoder.Decode(&obj.TokenAFlag)
	if err != nil {
		return errors.NewField("TokenAFlag", err)
	}
	// Deserialize `TokenBFlag`:
	err = decoder.Decode(&obj.TokenBFlag)
	if err != nil {
		return errors.NewField("TokenBFlag", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Deserialize `TotalAmountA`:
	err = decoder.Decode(&obj.TotalAmountA)
	if err != nil {
		return errors.NewField("TotalAmountA", err)
	}
	// Deserialize `TotalAmountB`:
	err = decoder.Decode(&obj.TotalAmountB)
	if err != nil {
		return errors.NewField("TotalAmountB", err)
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	return nil
}

func (obj *EvtInitializePool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtInitializePool: %w", err)
	}
	return nil
}

func UnmarshalEvtInitializePool(buf []byte) (*EvtInitializePool, error) {
	obj := new(EvtInitializePool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtInitializeReward struct {
	Pool           solanago.PublicKey `json:"pool"`
	RewardMint     solanago.PublicKey `json:"rewardMint"`
	Funder         solanago.PublicKey `json:"funder"`
	Creator        solanago.PublicKey `json:"creator"`
	RewardIndex    uint8              `json:"rewardIndex"`
	RewardDuration uint64             `json:"rewardDuration"`
}

func (obj EvtInitializeReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `RewardMint`:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Serialize `Funder`:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `RewardDuration`:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	return nil
}

func (obj EvtInitializeReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtInitializeReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtInitializeReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	return nil
}

func (obj *EvtInitializeReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtInitializeReward: %w", err)
	}
	return nil
}

func UnmarshalEvtInitializeReward(buf []byte) (*EvtInitializeReward, error) {
	obj := new(EvtInitializeReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtLockPosition struct {
	Pool                 solanago.PublicKey `json:"pool"`
	Position             solanago.PublicKey `json:"position"`
	Owner                solanago.PublicKey `json:"owner"`
	Vesting              solanago.PublicKey `json:"vesting"`
	CliffPoint           uint64             `json:"cliffPoint"`
	PeriodFrequency      uint64             `json:"periodFrequency"`
	CliffUnlockLiquidity binary.Uint128     `json:"cliffUnlockLiquidity"`
	LiquidityPerPeriod   binary.Uint128     `json:"liquidityPerPeriod"`
	NumberOfPeriod       uint16             `json:"numberOfPeriod"`
}

func (obj EvtLockPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Vesting`:
	err = encoder.Encode(obj.Vesting)
	if err != nil {
		return errors.NewField("Vesting", err)
	}
	// Serialize `CliffPoint`:
	err = encoder.Encode(obj.CliffPoint)
	if err != nil {
		return errors.NewField("CliffPoint", err)
	}
	// Serialize `PeriodFrequency`:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Serialize `CliffUnlockLiquidity`:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return errors.NewField("CliffUnlockLiquidity", err)
	}
	// Serialize `LiquidityPerPeriod`:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return errors.NewField("LiquidityPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	return nil
}

func (obj EvtLockPosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtLockPosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtLockPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Vesting`:
	err = decoder.Decode(&obj.Vesting)
	if err != nil {
		return errors.NewField("Vesting", err)
	}
	// Deserialize `CliffPoint`:
	err = decoder.Decode(&obj.CliffPoint)
	if err != nil {
		return errors.NewField("CliffPoint", err)
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return errors.NewField("CliffUnlockLiquidity", err)
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return errors.NewField("LiquidityPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	return nil
}

func (obj *EvtLockPosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtLockPosition: %w", err)
	}
	return nil
}

func UnmarshalEvtLockPosition(buf []byte) (*EvtLockPosition, error) {
	obj := new(EvtLockPosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtPermanentLockPosition struct {
	Pool                          solanago.PublicKey `json:"pool"`
	Position                      solanago.PublicKey `json:"position"`
	LockLiquidityAmount           binary.Uint128     `json:"lockLiquidityAmount"`
	TotalPermanentLockedLiquidity binary.Uint128     `json:"totalPermanentLockedLiquidity"`
}

func (obj EvtPermanentLockPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `LockLiquidityAmount`:
	err = encoder.Encode(obj.LockLiquidityAmount)
	if err != nil {
		return errors.NewField("LockLiquidityAmount", err)
	}
	// Serialize `TotalPermanentLockedLiquidity`:
	err = encoder.Encode(obj.TotalPermanentLockedLiquidity)
	if err != nil {
		return errors.NewField("TotalPermanentLockedLiquidity", err)
	}
	return nil
}

func (obj EvtPermanentLockPosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtPermanentLockPosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtPermanentLockPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `LockLiquidityAmount`:
	err = decoder.Decode(&obj.LockLiquidityAmount)
	if err != nil {
		return errors.NewField("LockLiquidityAmount", err)
	}
	// Deserialize `TotalPermanentLockedLiquidity`:
	err = decoder.Decode(&obj.TotalPermanentLockedLiquidity)
	if err != nil {
		return errors.NewField("TotalPermanentLockedLiquidity", err)
	}
	return nil
}

func (obj *EvtPermanentLockPosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtPermanentLockPosition: %w", err)
	}
	return nil
}

func UnmarshalEvtPermanentLockPosition(buf []byte) (*EvtPermanentLockPosition, error) {
	obj := new(EvtPermanentLockPosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtRemoveLiquidity struct {
	Pool         solanago.PublicKey        `json:"pool"`
	Position     solanago.PublicKey        `json:"position"`
	Owner        solanago.PublicKey        `json:"owner"`
	Params       RemoveLiquidityParameters `json:"params"`
	TokenAAmount uint64                    `json:"tokenAAmount"`
	TokenBAmount uint64                    `json:"tokenBAmount"`
}

func (obj EvtRemoveLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Params`:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj EvtRemoveLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtRemoveLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtRemoveLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj *EvtRemoveLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtRemoveLiquidity: %w", err)
	}
	return nil
}

func UnmarshalEvtRemoveLiquidity(buf []byte) (*EvtRemoveLiquidity, error) {
	obj := new(EvtRemoveLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtSetPoolStatus struct {
	Pool   solanago.PublicKey `json:"pool"`
	Status uint8              `json:"status"`
}

func (obj EvtSetPoolStatus) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	return nil
}

func (obj EvtSetPoolStatus) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtSetPoolStatus: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtSetPoolStatus) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	return nil
}

func (obj *EvtSetPoolStatus) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtSetPoolStatus: %w", err)
	}
	return nil
}

func UnmarshalEvtSetPoolStatus(buf []byte) (*EvtSetPoolStatus, error) {
	obj := new(EvtSetPoolStatus)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtSplitPosition struct {
	Pool                    solanago.PublicKey      `json:"pool"`
	FirstOwner              solanago.PublicKey      `json:"firstOwner"`
	SecondOwner             solanago.PublicKey      `json:"secondOwner"`
	FirstPosition           solanago.PublicKey      `json:"firstPosition"`
	SecondPosition          solanago.PublicKey      `json:"secondPosition"`
	CurrentSqrtPrice        binary.Uint128          `json:"currentSqrtPrice"`
	AmountSplits            SplitAmountInfo         `json:"amountSplits"`
	FirstPositionInfo       SplitPositionInfo       `json:"firstPositionInfo"`
	SecondPositionInfo      SplitPositionInfo       `json:"secondPositionInfo"`
	SplitPositionParameters SplitPositionParameters `json:"splitPositionParameters"`
}

func (obj EvtSplitPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `FirstOwner`:
	err = encoder.Encode(obj.FirstOwner)
	if err != nil {
		return errors.NewField("FirstOwner", err)
	}
	// Serialize `SecondOwner`:
	err = encoder.Encode(obj.SecondOwner)
	if err != nil {
		return errors.NewField("SecondOwner", err)
	}
	// Serialize `FirstPosition`:
	err = encoder.Encode(obj.FirstPosition)
	if err != nil {
		return errors.NewField("FirstPosition", err)
	}
	// Serialize `SecondPosition`:
	err = encoder.Encode(obj.SecondPosition)
	if err != nil {
		return errors.NewField("SecondPosition", err)
	}
	// Serialize `CurrentSqrtPrice`:
	err = encoder.Encode(obj.CurrentSqrtPrice)
	if err != nil {
		return errors.NewField("CurrentSqrtPrice", err)
	}
	// Serialize `AmountSplits`:
	err = encoder.Encode(obj.AmountSplits)
	if err != nil {
		return errors.NewField("AmountSplits", err)
	}
	// Serialize `FirstPositionInfo`:
	err = encoder.Encode(obj.FirstPositionInfo)
	if err != nil {
		return errors.NewField("FirstPositionInfo", err)
	}
	// Serialize `SecondPositionInfo`:
	err = encoder.Encode(obj.SecondPositionInfo)
	if err != nil {
		return errors.NewField("SecondPositionInfo", err)
	}
	// Serialize `SplitPositionParameters`:
	err = encoder.Encode(obj.SplitPositionParameters)
	if err != nil {
		return errors.NewField("SplitPositionParameters", err)
	}
	return nil
}

func (obj EvtSplitPosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtSplitPosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtSplitPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `FirstOwner`:
	err = decoder.Decode(&obj.FirstOwner)
	if err != nil {
		return errors.NewField("FirstOwner", err)
	}
	// Deserialize `SecondOwner`:
	err = decoder.Decode(&obj.SecondOwner)
	if err != nil {
		return errors.NewField("SecondOwner", err)
	}
	// Deserialize `FirstPosition`:
	err = decoder.Decode(&obj.FirstPosition)
	if err != nil {
		return errors.NewField("FirstPosition", err)
	}
	// Deserialize `SecondPosition`:
	err = decoder.Decode(&obj.SecondPosition)
	if err != nil {
		return errors.NewField("SecondPosition", err)
	}
	// Deserialize `CurrentSqrtPrice`:
	err = decoder.Decode(&obj.CurrentSqrtPrice)
	if err != nil {
		return errors.NewField("CurrentSqrtPrice", err)
	}
	// Deserialize `AmountSplits`:
	err = decoder.Decode(&obj.AmountSplits)
	if err != nil {
		return errors.NewField("AmountSplits", err)
	}
	// Deserialize `FirstPositionInfo`:
	err = decoder.Decode(&obj.FirstPositionInfo)
	if err != nil {
		return errors.NewField("FirstPositionInfo", err)
	}
	// Deserialize `SecondPositionInfo`:
	err = decoder.Decode(&obj.SecondPositionInfo)
	if err != nil {
		return errors.NewField("SecondPositionInfo", err)
	}
	// Deserialize `SplitPositionParameters`:
	err = decoder.Decode(&obj.SplitPositionParameters)
	if err != nil {
		return errors.NewField("SplitPositionParameters", err)
	}
	return nil
}

func (obj *EvtSplitPosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtSplitPosition: %w", err)
	}
	return nil
}

func UnmarshalEvtSplitPosition(buf []byte) (*EvtSplitPosition, error) {
	obj := new(EvtSplitPosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtSwap struct {
	Pool             solanago.PublicKey `json:"pool"`
	TradeDirection   uint8              `json:"tradeDirection"`
	HasReferral      bool               `json:"hasReferral"`
	Params           SwapParameters     `json:"params"`
	SwapResult       SwapResult         `json:"swapResult"`
	ActualAmountIn   uint64             `json:"actualAmountIn"`
	CurrentTimestamp uint64             `json:"currentTimestamp"`
}

func (obj EvtSwap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TradeDirection`:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return errors.NewField("TradeDirection", err)
	}
	// Serialize `HasReferral`:
	err = encoder.Encode(obj.HasReferral)
	if err != nil {
		return errors.NewField("HasReferral", err)
	}
	// Serialize `Params`:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Serialize `SwapResult`:
	err = encoder.Encode(obj.SwapResult)
	if err != nil {
		return errors.NewField("SwapResult", err)
	}
	// Serialize `ActualAmountIn`:
	err = encoder.Encode(obj.ActualAmountIn)
	if err != nil {
		return errors.NewField("ActualAmountIn", err)
	}
	// Serialize `CurrentTimestamp`:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return errors.NewField("CurrentTimestamp", err)
	}
	return nil
}

func (obj EvtSwap) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtSwap: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtSwap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return errors.NewField("TradeDirection", err)
	}
	// Deserialize `HasReferral`:
	err = decoder.Decode(&obj.HasReferral)
	if err != nil {
		return errors.NewField("HasReferral", err)
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Deserialize `SwapResult`:
	err = decoder.Decode(&obj.SwapResult)
	if err != nil {
		return errors.NewField("SwapResult", err)
	}
	// Deserialize `ActualAmountIn`:
	err = decoder.Decode(&obj.ActualAmountIn)
	if err != nil {
		return errors.NewField("ActualAmountIn", err)
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return errors.NewField("CurrentTimestamp", err)
	}
	return nil
}

func (obj *EvtSwap) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtSwap: %w", err)
	}
	return nil
}

func UnmarshalEvtSwap(buf []byte) (*EvtSwap, error) {
	obj := new(EvtSwap)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtUpdateRewardDuration struct {
	Pool              solanago.PublicKey `json:"pool"`
	RewardIndex       uint8              `json:"rewardIndex"`
	OldRewardDuration uint64             `json:"oldRewardDuration"`
	NewRewardDuration uint64             `json:"newRewardDuration"`
}

func (obj EvtUpdateRewardDuration) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `OldRewardDuration`:
	err = encoder.Encode(obj.OldRewardDuration)
	if err != nil {
		return errors.NewField("OldRewardDuration", err)
	}
	// Serialize `NewRewardDuration`:
	err = encoder.Encode(obj.NewRewardDuration)
	if err != nil {
		return errors.NewField("NewRewardDuration", err)
	}
	return nil
}

func (obj EvtUpdateRewardDuration) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtUpdateRewardDuration: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtUpdateRewardDuration) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `OldRewardDuration`:
	err = decoder.Decode(&obj.OldRewardDuration)
	if err != nil {
		return errors.NewField("OldRewardDuration", err)
	}
	// Deserialize `NewRewardDuration`:
	err = decoder.Decode(&obj.NewRewardDuration)
	if err != nil {
		return errors.NewField("NewRewardDuration", err)
	}
	return nil
}

func (obj *EvtUpdateRewardDuration) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtUpdateRewardDuration: %w", err)
	}
	return nil
}

func UnmarshalEvtUpdateRewardDuration(buf []byte) (*EvtUpdateRewardDuration, error) {
	obj := new(EvtUpdateRewardDuration)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtUpdateRewardFunder struct {
	Pool        solanago.PublicKey `json:"pool"`
	RewardIndex uint8              `json:"rewardIndex"`
	OldFunder   solanago.PublicKey `json:"oldFunder"`
	NewFunder   solanago.PublicKey `json:"newFunder"`
}

func (obj EvtUpdateRewardFunder) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `OldFunder`:
	err = encoder.Encode(obj.OldFunder)
	if err != nil {
		return errors.NewField("OldFunder", err)
	}
	// Serialize `NewFunder`:
	err = encoder.Encode(obj.NewFunder)
	if err != nil {
		return errors.NewField("NewFunder", err)
	}
	return nil
}

func (obj EvtUpdateRewardFunder) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtUpdateRewardFunder: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtUpdateRewardFunder) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `OldFunder`:
	err = decoder.Decode(&obj.OldFunder)
	if err != nil {
		return errors.NewField("OldFunder", err)
	}
	// Deserialize `NewFunder`:
	err = decoder.Decode(&obj.NewFunder)
	if err != nil {
		return errors.NewField("NewFunder", err)
	}
	return nil
}

func (obj *EvtUpdateRewardFunder) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtUpdateRewardFunder: %w", err)
	}
	return nil
}

func UnmarshalEvtUpdateRewardFunder(buf []byte) (*EvtUpdateRewardFunder, error) {
	obj := new(EvtUpdateRewardFunder)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtWithdrawIneligibleReward struct {
	Pool       solanago.PublicKey `json:"pool"`
	RewardMint solanago.PublicKey `json:"rewardMint"`
	Amount     uint64             `json:"amount"`
}

func (obj EvtWithdrawIneligibleReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `RewardMint`:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj EvtWithdrawIneligibleReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtWithdrawIneligibleReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtWithdrawIneligibleReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *EvtWithdrawIneligibleReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtWithdrawIneligibleReward: %w", err)
	}
	return nil
}

func UnmarshalEvtWithdrawIneligibleReward(buf []byte) (*EvtWithdrawIneligibleReward, error) {
	obj := new(EvtWithdrawIneligibleReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializeCustomizablePoolParameters struct {
	// pool fees
	PoolFees PoolFeeParameters `json:"poolFees"`

	// sqrt min price
	SqrtMinPrice binary.Uint128 `json:"sqrtMinPrice"`

	// sqrt max price
	SqrtMaxPrice binary.Uint128 `json:"sqrtMaxPrice"`

	// has alpha vault
	HasAlphaVault bool `json:"hasAlphaVault"`

	// initialize liquidity
	Liquidity binary.Uint128 `json:"liquidity"`

	// The init price of the pool as a sqrt(token_b/token_a) Q64.64 value
	SqrtPrice binary.Uint128 `json:"sqrtPrice"`

	// activation type
	ActivationType ActivationType `json:"activationType"`

	// collect fee mode
	CollectFeeMode CollectFeeMode `json:"collectFeeMode"`

	// activation point
	ActivationPoint *uint64 `bin:"optional" json:"activationPoint,omitempty"`
}

func (obj InitializeCustomizablePoolParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `SqrtMinPrice`:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Serialize `SqrtMaxPrice`:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Serialize `HasAlphaVault`:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return errors.NewField("HasAlphaVault", err)
	}
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `ActivationPoint` (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	return nil
}

func (obj InitializeCustomizablePoolParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializeCustomizablePoolParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializeCustomizablePoolParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return errors.NewField("HasAlphaVault", err)
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ActivationPoint", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	return nil
}

func (obj *InitializeCustomizablePoolParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializeCustomizablePoolParameters: %w", err)
	}
	return nil
}

func UnmarshalInitializeCustomizablePoolParameters(buf []byte) (*InitializeCustomizablePoolParameters, error) {
	obj := new(InitializeCustomizablePoolParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializePoolParameters struct {
	// initialize liquidity
	Liquidity binary.Uint128 `json:"liquidity"`

	// The init price of the pool as a sqrt(token_b/token_a) Q64.64 value
	SqrtPrice binary.Uint128 `json:"sqrtPrice"`

	// activation point
	ActivationPoint *uint64 `bin:"optional" json:"activationPoint,omitempty"`
}

func (obj InitializePoolParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `ActivationPoint` (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	return nil
}

func (obj InitializePoolParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializePoolParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializePoolParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ActivationPoint", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	return nil
}

func (obj *InitializePoolParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializePoolParameters: %w", err)
	}
	return nil
}

func UnmarshalInitializePoolParameters(buf []byte) (*InitializePoolParameters, error) {
	obj := new(InitializePoolParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Pool struct {
	// Pool fee
	PoolFees PoolFeesStruct `json:"poolFees"`

	// token a mint
	TokenAMint solanago.PublicKey `json:"tokenAMint"`

	// token b mint
	TokenBMint solanago.PublicKey `json:"tokenBMint"`

	// token a vault
	TokenAVault solanago.PublicKey `json:"tokenAVault"`

	// token b vault
	TokenBVault solanago.PublicKey `json:"tokenBVault"`

	// Whitelisted vault to be able to buy pool before activation_point
	WhitelistedVault solanago.PublicKey `json:"whitelistedVault"`

	// partner
	Partner solanago.PublicKey `json:"partner"`

	// liquidity share
	Liquidity binary.Uint128 `json:"liquidity"`

	// padding, previous reserve amount, be careful to use that field
	Padding binary.Uint128 `json:"padding"`

	// protocol a fee
	ProtocolAFee uint64 `json:"protocolAFee"`

	// protocol b fee
	ProtocolBFee uint64 `json:"protocolBFee"`

	// partner a fee
	PartnerAFee uint64 `json:"partnerAFee"`

	// partner b fee
	PartnerBFee uint64 `json:"partnerBFee"`

	// min price
	SqrtMinPrice binary.Uint128 `json:"sqrtMinPrice"`

	// max price
	SqrtMaxPrice binary.Uint128 `json:"sqrtMaxPrice"`

	// current price
	SqrtPrice binary.Uint128 `json:"sqrtPrice"`

	// Activation point, can be slot or timestamp
	ActivationPoint uint64 `json:"activationPoint"`

	// Activation type, 0 means by slot, 1 means by timestamp
	ActivationType ActivationType `json:"activationType"`

	// pool status, 0: enable, 1 disable
	PoolStatus uint8 `json:"poolStatus"`

	// token a flag
	TokenAFlag TokenType `json:"tokenAFlag"`

	// token b flag
	TokenBFlag TokenType `json:"tokenBFlag"`

	// 0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b
	CollectFeeMode CollectFeeMode `json:"collectFeeMode"`

	// pool type
	PoolType TokenType `json:"poolType"`

	// padding
	Padding0 [2]uint8 `json:"padding0"`

	// cumulative
	FeeAPerLiquidity [32]uint8 `json:"feeAPerLiquidity"`

	// cumulative
	FeeBPerLiquidity       [32]uint8      `json:"feeBPerLiquidity"`
	PermanentLockLiquidity binary.Uint128 `json:"permanentLockLiquidity"`

	// metrics
	Metrics PoolMetrics `json:"metrics"`

	// pool creator
	Creator solanago.PublicKey `json:"creator"`

	// Padding for further use
	Padding1 [6]uint64 `json:"padding1"`

	// Farming reward information
	RewardInfos [2]RewardInfo `json:"rewardInfos"`
}

func (obj Pool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `TokenAMint`:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Serialize `TokenBMint`:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Serialize `TokenAVault`:
	err = encoder.Encode(obj.TokenAVault)
	if err != nil {
		return errors.NewField("TokenAVault", err)
	}
	// Serialize `TokenBVault`:
	err = encoder.Encode(obj.TokenBVault)
	if err != nil {
		return errors.NewField("TokenBVault", err)
	}
	// Serialize `WhitelistedVault`:
	err = encoder.Encode(obj.WhitelistedVault)
	if err != nil {
		return errors.NewField("WhitelistedVault", err)
	}
	// Serialize `Partner`:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `ProtocolAFee`:
	err = encoder.Encode(obj.ProtocolAFee)
	if err != nil {
		return errors.NewField("ProtocolAFee", err)
	}
	// Serialize `ProtocolBFee`:
	err = encoder.Encode(obj.ProtocolBFee)
	if err != nil {
		return errors.NewField("ProtocolBFee", err)
	}
	// Serialize `PartnerAFee`:
	err = encoder.Encode(obj.PartnerAFee)
	if err != nil {
		return errors.NewField("PartnerAFee", err)
	}
	// Serialize `PartnerBFee`:
	err = encoder.Encode(obj.PartnerBFee)
	if err != nil {
		return errors.NewField("PartnerBFee", err)
	}
	// Serialize `SqrtMinPrice`:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Serialize `SqrtMaxPrice`:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `ActivationPoint`:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `PoolStatus`:
	err = encoder.Encode(obj.PoolStatus)
	if err != nil {
		return errors.NewField("PoolStatus", err)
	}
	// Serialize `TokenAFlag`:
	err = encoder.Encode(obj.TokenAFlag)
	if err != nil {
		return errors.NewField("TokenAFlag", err)
	}
	// Serialize `TokenBFlag`:
	err = encoder.Encode(obj.TokenBFlag)
	if err != nil {
		return errors.NewField("TokenBFlag", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `PoolType`:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `FeeAPerLiquidity`:
	err = encoder.Encode(obj.FeeAPerLiquidity)
	if err != nil {
		return errors.NewField("FeeAPerLiquidity", err)
	}
	// Serialize `FeeBPerLiquidity`:
	err = encoder.Encode(obj.FeeBPerLiquidity)
	if err != nil {
		return errors.NewField("FeeBPerLiquidity", err)
	}
	// Serialize `PermanentLockLiquidity`:
	err = encoder.Encode(obj.PermanentLockLiquidity)
	if err != nil {
		return errors.NewField("PermanentLockLiquidity", err)
	}
	// Serialize `Metrics`:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return errors.NewField("Metrics", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `RewardInfos`:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	return nil
}

func (obj Pool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Pool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Deserialize `TokenAVault`:
	err = decoder.Decode(&obj.TokenAVault)
	if err != nil {
		return errors.NewField("TokenAVault", err)
	}
	// Deserialize `TokenBVault`:
	err = decoder.Decode(&obj.TokenBVault)
	if err != nil {
		return errors.NewField("TokenBVault", err)
	}
	// Deserialize `WhitelistedVault`:
	err = decoder.Decode(&obj.WhitelistedVault)
	if err != nil {
		return errors.NewField("WhitelistedVault", err)
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `ProtocolAFee`:
	err = decoder.Decode(&obj.ProtocolAFee)
	if err != nil {
		return errors.NewField("ProtocolAFee", err)
	}
	// Deserialize `ProtocolBFee`:
	err = decoder.Decode(&obj.ProtocolBFee)
	if err != nil {
		return errors.NewField("ProtocolBFee", err)
	}
	// Deserialize `PartnerAFee`:
	err = decoder.Decode(&obj.PartnerAFee)
	if err != nil {
		return errors.NewField("PartnerAFee", err)
	}
	// Deserialize `PartnerBFee`:
	err = decoder.Decode(&obj.PartnerBFee)
	if err != nil {
		return errors.NewField("PartnerBFee", err)
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `PoolStatus`:
	err = decoder.Decode(&obj.PoolStatus)
	if err != nil {
		return errors.NewField("PoolStatus", err)
	}
	// Deserialize `TokenAFlag`:
	err = decoder.Decode(&obj.TokenAFlag)
	if err != nil {
		return errors.NewField("TokenAFlag", err)
	}
	// Deserialize `TokenBFlag`:
	err = decoder.Decode(&obj.TokenBFlag)
	if err != nil {
		return errors.NewField("TokenBFlag", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `FeeAPerLiquidity`:
	err = decoder.Decode(&obj.FeeAPerLiquidity)
	if err != nil {
		return errors.NewField("FeeAPerLiquidity", err)
	}
	// Deserialize `FeeBPerLiquidity`:
	err = decoder.Decode(&obj.FeeBPerLiquidity)
	if err != nil {
		return errors.NewField("FeeBPerLiquidity", err)
	}
	// Deserialize `PermanentLockLiquidity`:
	err = decoder.Decode(&obj.PermanentLockLiquidity)
	if err != nil {
		return errors.NewField("PermanentLockLiquidity", err)
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return errors.NewField("Metrics", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	return nil
}

func (obj *Pool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Pool: %w", err)
	}
	return nil
}

func UnmarshalPool(buf []byte) (*Pool, error) {
	obj := new(Pool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFeeParameters struct {
	// Base fee
	BaseFee BaseFeeParameters `json:"baseFee"`

	// padding
	Padding [3]uint8 `json:"padding"`

	// dynamic fee
	DynamicFee *DynamicFeeParameters `bin:"optional" json:"dynamicFee,omitempty"`
}

func (obj PoolFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `DynamicFee` (optional):
	{
		if obj.DynamicFee == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("DynamicFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("DynamicFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.DynamicFee)
			if err != nil {
				return errors.NewField("DynamicFee", err)
			}
		}
	}
	return nil
}

func (obj PoolFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `DynamicFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("DynamicFee", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.DynamicFee)
			if err != nil {
				return errors.NewField("DynamicFee", err)
			}
		}
	}
	return nil
}

func (obj *PoolFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalPoolFeeParameters(buf []byte) (*PoolFeeParameters, error) {
	obj := new(PoolFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolFeesConfig struct {
	BaseFee            *BaseFeeConfig    `json:"baseFee"`
	DynamicFee         *DynamicFeeConfig `json:"dynamicFee"`
	ProtocolFeePercent uint8             `json:"protocolFeePercent"`
	PartnerFeePercent  uint8             `json:"partnerFeePercent"`
	ReferralFeePercent uint8             `json:"referralFeePercent"`
	Padding0           [5]uint8          `json:"padding0"`
	Padding1           [5]uint64         `json:"padding1"`
}

func (obj PoolFeesConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Serialize `DynamicFee`:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Serialize `ProtocolFeePercent`:
	err = encoder.Encode(obj.ProtocolFeePercent)
	if err != nil {
		return errors.NewField("ProtocolFeePercent", err)
	}
	// Serialize `PartnerFeePercent`:
	err = encoder.Encode(obj.PartnerFeePercent)
	if err != nil {
		return errors.NewField("PartnerFeePercent", err)
	}
	// Serialize `ReferralFeePercent`:
	err = encoder.Encode(obj.ReferralFeePercent)
	if err != nil {
		return errors.NewField("ReferralFeePercent", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj PoolFeesConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeesConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeesConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Deserialize `ProtocolFeePercent`:
	err = decoder.Decode(&obj.ProtocolFeePercent)
	if err != nil {
		return errors.NewField("ProtocolFeePercent", err)
	}
	// Deserialize `PartnerFeePercent`:
	err = decoder.Decode(&obj.PartnerFeePercent)
	if err != nil {
		return errors.NewField("PartnerFeePercent", err)
	}
	// Deserialize `ReferralFeePercent`:
	err = decoder.Decode(&obj.ReferralFeePercent)
	if err != nil {
		return errors.NewField("ReferralFeePercent", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *PoolFeesConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeesConfig: %w", err)
	}
	return nil
}

func UnmarshalPoolFeesConfig(buf []byte) (*PoolFeesConfig, error) {
	obj := new(PoolFeesConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
// trading_fee = amount * trade_fee_numerator / denominator
// protocol_fee = trading_fee * protocol_fee_percentage / 100
// referral_fee = protocol_fee * referral_percentage / 100
// partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator
type PoolFeesStruct struct {
	// Trade fees are extra token amounts that are held inside the token
	// accounts during a trade, making the value of liquidity tokens rise.
	// Trade fee numerator
	BaseFee BaseFeeStruct `json:"baseFee"`

	// Protocol trading fees are extra token amounts that are held inside the token
	// accounts during a trade, with the equivalent in pool tokens minted to
	// the protocol of the program.
	// Protocol trade fee numerator
	ProtocolFeePercent uint8 `json:"protocolFeePercent"`

	// partner fee
	PartnerFeePercent uint8 `json:"partnerFeePercent"`

	// referral fee
	ReferralFeePercent uint8 `json:"referralFeePercent"`

	// padding
	Padding0 [5]uint8 `json:"padding0"`

	// dynamic fee
	DynamicFee DynamicFeeStruct `json:"dynamicFee"`

	// padding
	Padding1 [2]uint64 `json:"padding1"`
}

func (obj PoolFeesStruct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Serialize `ProtocolFeePercent`:
	err = encoder.Encode(obj.ProtocolFeePercent)
	if err != nil {
		return errors.NewField("ProtocolFeePercent", err)
	}
	// Serialize `PartnerFeePercent`:
	err = encoder.Encode(obj.PartnerFeePercent)
	if err != nil {
		return errors.NewField("PartnerFeePercent", err)
	}
	// Serialize `ReferralFeePercent`:
	err = encoder.Encode(obj.ReferralFeePercent)
	if err != nil {
		return errors.NewField("ReferralFeePercent", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `DynamicFee`:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj PoolFeesStruct) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeesStruct: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeesStruct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Deserialize `ProtocolFeePercent`:
	err = decoder.Decode(&obj.ProtocolFeePercent)
	if err != nil {
		return errors.NewField("ProtocolFeePercent", err)
	}
	// Deserialize `PartnerFeePercent`:
	err = decoder.Decode(&obj.PartnerFeePercent)
	if err != nil {
		return errors.NewField("PartnerFeePercent", err)
	}
	// Deserialize `ReferralFeePercent`:
	err = decoder.Decode(&obj.ReferralFeePercent)
	if err != nil {
		return errors.NewField("ReferralFeePercent", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *PoolFeesStruct) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeesStruct: %w", err)
	}
	return nil
}

func UnmarshalPoolFeesStruct(buf []byte) (*PoolFeesStruct, error) {
	obj := new(PoolFeesStruct)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolMetrics struct {
	TotalLpAFee       binary.Uint128 `json:"totalLpAFee"`
	TotalLpBFee       binary.Uint128 `json:"totalLpBFee"`
	TotalProtocolAFee uint64         `json:"totalProtocolAFee"`
	TotalProtocolBFee uint64         `json:"totalProtocolBFee"`
	TotalPartnerAFee  uint64         `json:"totalPartnerAFee"`
	TotalPartnerBFee  uint64         `json:"totalPartnerBFee"`
	TotalPosition     uint64         `json:"totalPosition"`
	Padding           uint64         `json:"padding"`
}

func (obj PoolMetrics) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalLpAFee`:
	err = encoder.Encode(obj.TotalLpAFee)
	if err != nil {
		return errors.NewField("TotalLpAFee", err)
	}
	// Serialize `TotalLpBFee`:
	err = encoder.Encode(obj.TotalLpBFee)
	if err != nil {
		return errors.NewField("TotalLpBFee", err)
	}
	// Serialize `TotalProtocolAFee`:
	err = encoder.Encode(obj.TotalProtocolAFee)
	if err != nil {
		return errors.NewField("TotalProtocolAFee", err)
	}
	// Serialize `TotalProtocolBFee`:
	err = encoder.Encode(obj.TotalProtocolBFee)
	if err != nil {
		return errors.NewField("TotalProtocolBFee", err)
	}
	// Serialize `TotalPartnerAFee`:
	err = encoder.Encode(obj.TotalPartnerAFee)
	if err != nil {
		return errors.NewField("TotalPartnerAFee", err)
	}
	// Serialize `TotalPartnerBFee`:
	err = encoder.Encode(obj.TotalPartnerBFee)
	if err != nil {
		return errors.NewField("TotalPartnerBFee", err)
	}
	// Serialize `TotalPosition`:
	err = encoder.Encode(obj.TotalPosition)
	if err != nil {
		return errors.NewField("TotalPosition", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PoolMetrics) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolMetrics: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolMetrics) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalLpAFee`:
	err = decoder.Decode(&obj.TotalLpAFee)
	if err != nil {
		return errors.NewField("TotalLpAFee", err)
	}
	// Deserialize `TotalLpBFee`:
	err = decoder.Decode(&obj.TotalLpBFee)
	if err != nil {
		return errors.NewField("TotalLpBFee", err)
	}
	// Deserialize `TotalProtocolAFee`:
	err = decoder.Decode(&obj.TotalProtocolAFee)
	if err != nil {
		return errors.NewField("TotalProtocolAFee", err)
	}
	// Deserialize `TotalProtocolBFee`:
	err = decoder.Decode(&obj.TotalProtocolBFee)
	if err != nil {
		return errors.NewField("TotalProtocolBFee", err)
	}
	// Deserialize `TotalPartnerAFee`:
	err = decoder.Decode(&obj.TotalPartnerAFee)
	if err != nil {
		return errors.NewField("TotalPartnerAFee", err)
	}
	// Deserialize `TotalPartnerBFee`:
	err = decoder.Decode(&obj.TotalPartnerBFee)
	if err != nil {
		return errors.NewField("TotalPartnerBFee", err)
	}
	// Deserialize `TotalPosition`:
	err = decoder.Decode(&obj.TotalPosition)
	if err != nil {
		return errors.NewField("TotalPosition", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PoolMetrics) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolMetrics: %w", err)
	}
	return nil
}

func UnmarshalPoolMetrics(buf []byte) (*PoolMetrics, error) {
	obj := new(PoolMetrics)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Position struct {
	Pool solanago.PublicKey `json:"pool"`

	// nft mint
	NftMint solanago.PublicKey `json:"nftMint"`

	// fee a checkpoint
	FeeAPerTokenCheckpoint [32]uint8 `json:"feeAPerTokenCheckpoint"`

	// fee b checkpoint
	FeeBPerTokenCheckpoint [32]uint8 `json:"feeBPerTokenCheckpoint"`

	// fee a pending
	FeeAPending uint64 `json:"feeAPending"`

	// fee b pending
	FeeBPending uint64 `json:"feeBPending"`

	// unlock liquidity
	UnlockedLiquidity binary.Uint128 `json:"unlockedLiquidity"`

	// vesting liquidity
	VestedLiquidity binary.Uint128 `json:"vestedLiquidity"`

	// permanent locked liquidity
	PermanentLockedLiquidity binary.Uint128 `json:"permanentLockedLiquidity"`

	// metrics
	Metrics PositionMetrics `json:"metrics"`

	// Farming reward information
	RewardInfos [2]UserRewardInfo `json:"rewardInfos"`

	// padding for future usage
	Padding [6]binary.Uint128 `json:"padding"`
}

func (obj Position) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `NftMint`:
	err = encoder.Encode(obj.NftMint)
	if err != nil {
		return errors.NewField("NftMint", err)
	}
	// Serialize `FeeAPerTokenCheckpoint`:
	err = encoder.Encode(obj.FeeAPerTokenCheckpoint)
	if err != nil {
		return errors.NewField("FeeAPerTokenCheckpoint", err)
	}
	// Serialize `FeeBPerTokenCheckpoint`:
	err = encoder.Encode(obj.FeeBPerTokenCheckpoint)
	if err != nil {
		return errors.NewField("FeeBPerTokenCheckpoint", err)
	}
	// Serialize `FeeAPending`:
	err = encoder.Encode(obj.FeeAPending)
	if err != nil {
		return errors.NewField("FeeAPending", err)
	}
	// Serialize `FeeBPending`:
	err = encoder.Encode(obj.FeeBPending)
	if err != nil {
		return errors.NewField("FeeBPending", err)
	}
	// Serialize `UnlockedLiquidity`:
	err = encoder.Encode(obj.UnlockedLiquidity)
	if err != nil {
		return errors.NewField("UnlockedLiquidity", err)
	}
	// Serialize `VestedLiquidity`:
	err = encoder.Encode(obj.VestedLiquidity)
	if err != nil {
		return errors.NewField("VestedLiquidity", err)
	}
	// Serialize `PermanentLockedLiquidity`:
	err = encoder.Encode(obj.PermanentLockedLiquidity)
	if err != nil {
		return errors.NewField("PermanentLockedLiquidity", err)
	}
	// Serialize `Metrics`:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return errors.NewField("Metrics", err)
	}
	// Serialize `RewardInfos`:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj Position) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Position: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `NftMint`:
	err = decoder.Decode(&obj.NftMint)
	if err != nil {
		return errors.NewField("NftMint", err)
	}
	// Deserialize `FeeAPerTokenCheckpoint`:
	err = decoder.Decode(&obj.FeeAPerTokenCheckpoint)
	if err != nil {
		return errors.NewField("FeeAPerTokenCheckpoint", err)
	}
	// Deserialize `FeeBPerTokenCheckpoint`:
	err = decoder.Decode(&obj.FeeBPerTokenCheckpoint)
	if err != nil {
		return errors.NewField("FeeBPerTokenCheckpoint", err)
	}
	// Deserialize `FeeAPending`:
	err = decoder.Decode(&obj.FeeAPending)
	if err != nil {
		return errors.NewField("FeeAPending", err)
	}
	// Deserialize `FeeBPending`:
	err = decoder.Decode(&obj.FeeBPending)
	if err != nil {
		return errors.NewField("FeeBPending", err)
	}
	// Deserialize `UnlockedLiquidity`:
	err = decoder.Decode(&obj.UnlockedLiquidity)
	if err != nil {
		return errors.NewField("UnlockedLiquidity", err)
	}
	// Deserialize `VestedLiquidity`:
	err = decoder.Decode(&obj.VestedLiquidity)
	if err != nil {
		return errors.NewField("VestedLiquidity", err)
	}
	// Deserialize `PermanentLockedLiquidity`:
	err = decoder.Decode(&obj.PermanentLockedLiquidity)
	if err != nil {
		return errors.NewField("PermanentLockedLiquidity", err)
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return errors.NewField("Metrics", err)
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *Position) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Position: %w", err)
	}
	return nil
}

func UnmarshalPosition(buf []byte) (*Position, error) {
	obj := new(Position)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionMetrics struct {
	TotalClaimedAFee uint64 `json:"totalClaimedAFee"`
	TotalClaimedBFee uint64 `json:"totalClaimedBFee"`
}

func (obj PositionMetrics) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalClaimedAFee`:
	err = encoder.Encode(obj.TotalClaimedAFee)
	if err != nil {
		return errors.NewField("TotalClaimedAFee", err)
	}
	// Serialize `TotalClaimedBFee`:
	err = encoder.Encode(obj.TotalClaimedBFee)
	if err != nil {
		return errors.NewField("TotalClaimedBFee", err)
	}
	return nil
}

func (obj PositionMetrics) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionMetrics: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionMetrics) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalClaimedAFee`:
	err = decoder.Decode(&obj.TotalClaimedAFee)
	if err != nil {
		return errors.NewField("TotalClaimedAFee", err)
	}
	// Deserialize `TotalClaimedBFee`:
	err = decoder.Decode(&obj.TotalClaimedBFee)
	if err != nil {
		return errors.NewField("TotalClaimedBFee", err)
	}
	return nil
}

func (obj *PositionMetrics) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionMetrics: %w", err)
	}
	return nil
}

func UnmarshalPositionMetrics(buf []byte) (*PositionMetrics, error) {
	obj := new(PositionMetrics)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidityParameters struct {
	// delta liquidity
	LiquidityDelta binary.Uint128 `json:"liquidityDelta"`

	// minimum token a amount
	TokenAAmountThreshold uint64 `json:"tokenAAmountThreshold"`

	// minimum token b amount
	TokenBAmountThreshold uint64 `json:"tokenBAmountThreshold"`
}

func (obj RemoveLiquidityParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LiquidityDelta`:
	err = encoder.Encode(obj.LiquidityDelta)
	if err != nil {
		return errors.NewField("LiquidityDelta", err)
	}
	// Serialize `TokenAAmountThreshold`:
	err = encoder.Encode(obj.TokenAAmountThreshold)
	if err != nil {
		return errors.NewField("TokenAAmountThreshold", err)
	}
	// Serialize `TokenBAmountThreshold`:
	err = encoder.Encode(obj.TokenBAmountThreshold)
	if err != nil {
		return errors.NewField("TokenBAmountThreshold", err)
	}
	return nil
}

func (obj RemoveLiquidityParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidityParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidityParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityDelta`:
	err = decoder.Decode(&obj.LiquidityDelta)
	if err != nil {
		return errors.NewField("LiquidityDelta", err)
	}
	// Deserialize `TokenAAmountThreshold`:
	err = decoder.Decode(&obj.TokenAAmountThreshold)
	if err != nil {
		return errors.NewField("TokenAAmountThreshold", err)
	}
	// Deserialize `TokenBAmountThreshold`:
	err = decoder.Decode(&obj.TokenBAmountThreshold)
	if err != nil {
		return errors.NewField("TokenBAmountThreshold", err)
	}
	return nil
}

func (obj *RemoveLiquidityParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidityParameters: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidityParameters(buf []byte) (*RemoveLiquidityParameters, error) {
	obj := new(RemoveLiquidityParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Stores the state relevant for tracking liquidity mining rewards
type RewardInfo struct {
	// Indicates if the reward has been initialized
	Initialized uint8 `json:"initialized"`

	// reward token flag
	RewardTokenFlag TokenType `json:"rewardTokenFlag"`

	// padding
	Padding0 [6]uint8 `json:"padding0"`

	// Padding to ensure `reward_rate: u128` is 16-byte aligned
	Padding1 [8]uint8 `json:"padding1"`

	// Reward token mint.
	Mint solanago.PublicKey `json:"mint"`

	// Reward vault token account.
	Vault solanago.PublicKey `json:"vault"`

	// Authority account that allows to fund rewards
	Funder solanago.PublicKey `json:"funder"`

	// reward duration
	RewardDuration uint64 `json:"rewardDuration"`

	// reward duration end
	RewardDurationEnd uint64 `json:"rewardDurationEnd"`

	// reward rate
	RewardRate binary.Uint128 `json:"rewardRate"`

	// Reward per token stored
	RewardPerTokenStored [32]uint8 `json:"rewardPerTokenStored"`

	// The last time reward states were updated.
	LastUpdateTime uint64 `json:"lastUpdateTime"`

	// Accumulated seconds when the farm distributed rewards but the bin was empty.
	// These rewards will be carried over to the next reward time window.
	CumulativeSecondsWithEmptyLiquidityReward uint64 `json:"cumulativeSecondsWithEmptyLiquidityReward"`
}

func (obj RewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Serialize `RewardTokenFlag`:
	err = encoder.Encode(obj.RewardTokenFlag)
	if err != nil {
		return errors.NewField("RewardTokenFlag", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `Vault`:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Serialize `Funder`:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Serialize `RewardDuration`:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	// Serialize `RewardDurationEnd`:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return errors.NewField("RewardDurationEnd", err)
	}
	// Serialize `RewardRate`:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return errors.NewField("RewardRate", err)
	}
	// Serialize `RewardPerTokenStored`:
	err = encoder.Encode(obj.RewardPerTokenStored)
	if err != nil {
		return errors.NewField("RewardPerTokenStored", err)
	}
	// Serialize `LastUpdateTime`:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return errors.NewField("LastUpdateTime", err)
	}
	// Serialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = encoder.Encode(obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return errors.NewField("CumulativeSecondsWithEmptyLiquidityReward", err)
	}
	return nil
}

func (obj RewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Deserialize `RewardTokenFlag`:
	err = decoder.Decode(&obj.RewardTokenFlag)
	if err != nil {
		return errors.NewField("RewardTokenFlag", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return errors.NewField("RewardDurationEnd", err)
	}
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return errors.NewField("RewardRate", err)
	}
	// Deserialize `RewardPerTokenStored`:
	err = decoder.Decode(&obj.RewardPerTokenStored)
	if err != nil {
		return errors.NewField("RewardPerTokenStored", err)
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return errors.NewField("LastUpdateTime", err)
	}
	// Deserialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = decoder.Decode(&obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return errors.NewField("CumulativeSecondsWithEmptyLiquidityReward", err)
	}
	return nil
}

func (obj *RewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RewardInfo: %w", err)
	}
	return nil
}

func UnmarshalRewardInfo(buf []byte) (*RewardInfo, error) {
	obj := new(RewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SplitAmountInfo struct {
	PermanentLockedLiquidity binary.Uint128 `json:"permanentLockedLiquidity"`
	UnlockedLiquidity        binary.Uint128 `json:"unlockedLiquidity"`
	FeeA                     uint64         `json:"feeA"`
	FeeB                     uint64         `json:"feeB"`
	Reward0                  uint64         `json:"reward0"`
	Reward1                  uint64         `json:"reward1"`
}

func (obj SplitAmountInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PermanentLockedLiquidity`:
	err = encoder.Encode(obj.PermanentLockedLiquidity)
	if err != nil {
		return errors.NewField("PermanentLockedLiquidity", err)
	}
	// Serialize `UnlockedLiquidity`:
	err = encoder.Encode(obj.UnlockedLiquidity)
	if err != nil {
		return errors.NewField("UnlockedLiquidity", err)
	}
	// Serialize `FeeA`:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return errors.NewField("FeeA", err)
	}
	// Serialize `FeeB`:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return errors.NewField("FeeB", err)
	}
	// Serialize `Reward0`:
	err = encoder.Encode(obj.Reward0)
	if err != nil {
		return errors.NewField("Reward0", err)
	}
	// Serialize `Reward1`:
	err = encoder.Encode(obj.Reward1)
	if err != nil {
		return errors.NewField("Reward1", err)
	}
	return nil
}

func (obj SplitAmountInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SplitAmountInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SplitAmountInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PermanentLockedLiquidity`:
	err = decoder.Decode(&obj.PermanentLockedLiquidity)
	if err != nil {
		return errors.NewField("PermanentLockedLiquidity", err)
	}
	// Deserialize `UnlockedLiquidity`:
	err = decoder.Decode(&obj.UnlockedLiquidity)
	if err != nil {
		return errors.NewField("UnlockedLiquidity", err)
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return errors.NewField("FeeA", err)
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return errors.NewField("FeeB", err)
	}
	// Deserialize `Reward0`:
	err = decoder.Decode(&obj.Reward0)
	if err != nil {
		return errors.NewField("Reward0", err)
	}
	// Deserialize `Reward1`:
	err = decoder.Decode(&obj.Reward1)
	if err != nil {
		return errors.NewField("Reward1", err)
	}
	return nil
}

func (obj *SplitAmountInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SplitAmountInfo: %w", err)
	}
	return nil
}

func UnmarshalSplitAmountInfo(buf []byte) (*SplitAmountInfo, error) {
	obj := new(SplitAmountInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SplitPositionInfo struct {
	Liquidity binary.Uint128 `json:"liquidity"`
	FeeA      uint64         `json:"feeA"`
	FeeB      uint64         `json:"feeB"`
	Reward0   uint64         `json:"reward0"`
	Reward1   uint64         `json:"reward1"`
}

func (obj SplitPositionInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Serialize `FeeA`:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return errors.NewField("FeeA", err)
	}
	// Serialize `FeeB`:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return errors.NewField("FeeB", err)
	}
	// Serialize `Reward0`:
	err = encoder.Encode(obj.Reward0)
	if err != nil {
		return errors.NewField("Reward0", err)
	}
	// Serialize `Reward1`:
	err = encoder.Encode(obj.Reward1)
	if err != nil {
		return errors.NewField("Reward1", err)
	}
	return nil
}

func (obj SplitPositionInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SplitPositionInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SplitPositionInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return errors.NewField("FeeA", err)
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return errors.NewField("FeeB", err)
	}
	// Deserialize `Reward0`:
	err = decoder.Decode(&obj.Reward0)
	if err != nil {
		return errors.NewField("Reward0", err)
	}
	// Deserialize `Reward1`:
	err = decoder.Decode(&obj.Reward1)
	if err != nil {
		return errors.NewField("Reward1", err)
	}
	return nil
}

func (obj *SplitPositionInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SplitPositionInfo: %w", err)
	}
	return nil
}

func UnmarshalSplitPositionInfo(buf []byte) (*SplitPositionInfo, error) {
	obj := new(SplitPositionInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SplitPositionParameters struct {
	// Percentage of unlocked liquidity to split to the second position
	UnlockedLiquidityPercentage uint8 `json:"unlockedLiquidityPercentage"`

	// Percentage of permanent locked liquidity to split to the second position
	PermanentLockedLiquidityPercentage uint8 `json:"permanentLockedLiquidityPercentage"`

	// Percentage of fee A pending to split to the second position
	FeeAPercentage uint8 `json:"feeAPercentage"`

	// Percentage of fee B pending to split to the second position
	FeeBPercentage uint8 `json:"feeBPercentage"`

	// Percentage of reward 0 pending to split to the second position
	Reward0Percentage uint8 `json:"reward0Percentage"`

	// Percentage of reward 1 pending to split to the second position
	Reward1Percentage uint8 `json:"reward1Percentage"`

	// padding for future
	Padding [16]uint8 `json:"padding"`
}

func (obj SplitPositionParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UnlockedLiquidityPercentage`:
	err = encoder.Encode(obj.UnlockedLiquidityPercentage)
	if err != nil {
		return errors.NewField("UnlockedLiquidityPercentage", err)
	}
	// Serialize `PermanentLockedLiquidityPercentage`:
	err = encoder.Encode(obj.PermanentLockedLiquidityPercentage)
	if err != nil {
		return errors.NewField("PermanentLockedLiquidityPercentage", err)
	}
	// Serialize `FeeAPercentage`:
	err = encoder.Encode(obj.FeeAPercentage)
	if err != nil {
		return errors.NewField("FeeAPercentage", err)
	}
	// Serialize `FeeBPercentage`:
	err = encoder.Encode(obj.FeeBPercentage)
	if err != nil {
		return errors.NewField("FeeBPercentage", err)
	}
	// Serialize `Reward0Percentage`:
	err = encoder.Encode(obj.Reward0Percentage)
	if err != nil {
		return errors.NewField("Reward0Percentage", err)
	}
	// Serialize `Reward1Percentage`:
	err = encoder.Encode(obj.Reward1Percentage)
	if err != nil {
		return errors.NewField("Reward1Percentage", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj SplitPositionParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SplitPositionParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SplitPositionParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UnlockedLiquidityPercentage`:
	err = decoder.Decode(&obj.UnlockedLiquidityPercentage)
	if err != nil {
		return errors.NewField("UnlockedLiquidityPercentage", err)
	}
	// Deserialize `PermanentLockedLiquidityPercentage`:
	err = decoder.Decode(&obj.PermanentLockedLiquidityPercentage)
	if err != nil {
		return errors.NewField("PermanentLockedLiquidityPercentage", err)
	}
	// Deserialize `FeeAPercentage`:
	err = decoder.Decode(&obj.FeeAPercentage)
	if err != nil {
		return errors.NewField("FeeAPercentage", err)
	}
	// Deserialize `FeeBPercentage`:
	err = decoder.Decode(&obj.FeeBPercentage)
	if err != nil {
		return errors.NewField("FeeBPercentage", err)
	}
	// Deserialize `Reward0Percentage`:
	err = decoder.Decode(&obj.Reward0Percentage)
	if err != nil {
		return errors.NewField("Reward0Percentage", err)
	}
	// Deserialize `Reward1Percentage`:
	err = decoder.Decode(&obj.Reward1Percentage)
	if err != nil {
		return errors.NewField("Reward1Percentage", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *SplitPositionParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SplitPositionParameters: %w", err)
	}
	return nil
}

func UnmarshalSplitPositionParameters(buf []byte) (*SplitPositionParameters, error) {
	obj := new(SplitPositionParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type StaticConfigParameters struct {
	PoolFees             PoolFeeParameters  `json:"poolFees"`
	SqrtMinPrice         binary.Uint128     `json:"sqrtMinPrice"`
	SqrtMaxPrice         binary.Uint128     `json:"sqrtMaxPrice"`
	VaultConfigKey       solanago.PublicKey `json:"vaultConfigKey"`
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`
	ActivationType       ActivationType     `json:"activationType"`
	CollectFeeMode       CollectFeeMode     `json:"collectFeeMode"`
}

func (obj StaticConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `SqrtMinPrice`:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Serialize `SqrtMaxPrice`:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Serialize `VaultConfigKey`:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	return nil
}

func (obj StaticConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding StaticConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *StaticConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return errors.NewField("SqrtMinPrice", err)
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return errors.NewField("SqrtMaxPrice", err)
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	return nil
}

func (obj *StaticConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling StaticConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalStaticConfigParameters(buf []byte) (*StaticConfigParameters, error) {
	obj := new(StaticConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapParameters struct {
	AmountIn         uint64 `json:"amountIn"`
	MinimumAmountOut uint64 `json:"minimumAmountOut"`
}

func (obj SwapParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `MinimumAmountOut`:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return errors.NewField("MinimumAmountOut", err)
	}
	return nil
}

func (obj SwapParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return errors.NewField("MinimumAmountOut", err)
	}
	return nil
}

func (obj *SwapParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapParameters: %w", err)
	}
	return nil
}

func UnmarshalSwapParameters(buf []byte) (*SwapParameters, error) {
	obj := new(SwapParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Encodes all results of swapping
type SwapResult struct {
	OutputAmount  uint64         `json:"outputAmount"`
	NextSqrtPrice binary.Uint128 `json:"nextSqrtPrice"`
	LpFee         uint64         `json:"lpFee"`
	ProtocolFee   uint64         `json:"protocolFee"`
	PartnerFee    uint64         `json:"partnerFee"`
	ReferralFee   uint64         `json:"referralFee"`
}

func (obj SwapResult) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `OutputAmount`:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return errors.NewField("OutputAmount", err)
	}
	// Serialize `NextSqrtPrice`:
	err = encoder.Encode(obj.NextSqrtPrice)
	if err != nil {
		return errors.NewField("NextSqrtPrice", err)
	}
	// Serialize `LpFee`:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return errors.NewField("LpFee", err)
	}
	// Serialize `ProtocolFee`:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Serialize `PartnerFee`:
	err = encoder.Encode(obj.PartnerFee)
	if err != nil {
		return errors.NewField("PartnerFee", err)
	}
	// Serialize `ReferralFee`:
	err = encoder.Encode(obj.ReferralFee)
	if err != nil {
		return errors.NewField("ReferralFee", err)
	}
	return nil
}

func (obj SwapResult) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapResult: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return errors.NewField("OutputAmount", err)
	}
	// Deserialize `NextSqrtPrice`:
	err = decoder.Decode(&obj.NextSqrtPrice)
	if err != nil {
		return errors.NewField("NextSqrtPrice", err)
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return errors.NewField("LpFee", err)
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Deserialize `PartnerFee`:
	err = decoder.Decode(&obj.PartnerFee)
	if err != nil {
		return errors.NewField("PartnerFee", err)
	}
	// Deserialize `ReferralFee`:
	err = decoder.Decode(&obj.ReferralFee)
	if err != nil {
		return errors.NewField("ReferralFee", err)
	}
	return nil
}

func (obj *SwapResult) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapResult: %w", err)
	}
	return nil
}

func UnmarshalSwapResult(buf []byte) (*SwapResult, error) {
	obj := new(SwapResult)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Parameter that set by the protocol
type TokenBadge struct {
	// token mint
	TokenMint solanago.PublicKey `json:"tokenMint"`

	// Reserve
	Padding [128]uint8 `json:"padding"`
}

func (obj TokenBadge) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenMint`:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj TokenBadge) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenBadge: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenBadge) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *TokenBadge) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenBadge: %w", err)
	}
	return nil
}

func UnmarshalTokenBadge(buf []byte) (*TokenBadge, error) {
	obj := new(TokenBadge)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UserRewardInfo struct {
	// The latest update reward checkpoint
	RewardPerTokenCheckpoint [32]uint8 `json:"rewardPerTokenCheckpoint"`

	// Current pending rewards
	RewardPendings uint64 `json:"rewardPendings"`

	// Total claimed rewards
	TotalClaimedRewards uint64 `json:"totalClaimedRewards"`
}

func (obj UserRewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RewardPerTokenCheckpoint`:
	err = encoder.Encode(obj.RewardPerTokenCheckpoint)
	if err != nil {
		return errors.NewField("RewardPerTokenCheckpoint", err)
	}
	// Serialize `RewardPendings`:
	err = encoder.Encode(obj.RewardPendings)
	if err != nil {
		return errors.NewField("RewardPendings", err)
	}
	// Serialize `TotalClaimedRewards`:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return errors.NewField("TotalClaimedRewards", err)
	}
	return nil
}

func (obj UserRewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserRewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserRewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardPerTokenCheckpoint`:
	err = decoder.Decode(&obj.RewardPerTokenCheckpoint)
	if err != nil {
		return errors.NewField("RewardPerTokenCheckpoint", err)
	}
	// Deserialize `RewardPendings`:
	err = decoder.Decode(&obj.RewardPendings)
	if err != nil {
		return errors.NewField("RewardPendings", err)
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return errors.NewField("TotalClaimedRewards", err)
	}
	return nil
}

func (obj *UserRewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserRewardInfo: %w", err)
	}
	return nil
}

func UnmarshalUserRewardInfo(buf []byte) (*UserRewardInfo, error) {
	obj := new(UserRewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Vesting struct {
	Position               solanago.PublicKey `json:"position"`
	CliffPoint             uint64             `json:"cliffPoint"`
	PeriodFrequency        uint64             `json:"periodFrequency"`
	CliffUnlockLiquidity   binary.Uint128     `json:"cliffUnlockLiquidity"`
	LiquidityPerPeriod     binary.Uint128     `json:"liquidityPerPeriod"`
	TotalReleasedLiquidity binary.Uint128     `json:"totalReleasedLiquidity"`
	NumberOfPeriod         uint16             `json:"numberOfPeriod"`
	Padding                [14]uint8          `json:"padding"`
	Padding2               [4]binary.Uint128  `json:"padding2"`
}

func (obj Vesting) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `CliffPoint`:
	err = encoder.Encode(obj.CliffPoint)
	if err != nil {
		return errors.NewField("CliffPoint", err)
	}
	// Serialize `PeriodFrequency`:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Serialize `CliffUnlockLiquidity`:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return errors.NewField("CliffUnlockLiquidity", err)
	}
	// Serialize `LiquidityPerPeriod`:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return errors.NewField("LiquidityPerPeriod", err)
	}
	// Serialize `TotalReleasedLiquidity`:
	err = encoder.Encode(obj.TotalReleasedLiquidity)
	if err != nil {
		return errors.NewField("TotalReleasedLiquidity", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj Vesting) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Vesting: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Vesting) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `CliffPoint`:
	err = decoder.Decode(&obj.CliffPoint)
	if err != nil {
		return errors.NewField("CliffPoint", err)
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return errors.NewField("CliffUnlockLiquidity", err)
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return errors.NewField("LiquidityPerPeriod", err)
	}
	// Deserialize `TotalReleasedLiquidity`:
	err = decoder.Decode(&obj.TotalReleasedLiquidity)
	if err != nil {
		return errors.NewField("TotalReleasedLiquidity", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *Vesting) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Vesting: %w", err)
	}
	return nil
}

func UnmarshalVesting(buf []byte) (*Vesting, error) {
	obj := new(Vesting)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VestingParameters struct {
	CliffPoint           *uint64        `bin:"optional" json:"cliffPoint,omitempty"`
	PeriodFrequency      uint64         `json:"periodFrequency"`
	CliffUnlockLiquidity binary.Uint128 `json:"cliffUnlockLiquidity"`
	LiquidityPerPeriod   binary.Uint128 `json:"liquidityPerPeriod"`
	NumberOfPeriod       uint16         `json:"numberOfPeriod"`
}

func (obj VestingParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffPoint` (optional):
	{
		if obj.CliffPoint == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("CliffPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("CliffPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.CliffPoint)
			if err != nil {
				return errors.NewField("CliffPoint", err)
			}
		}
	}
	// Serialize `PeriodFrequency`:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Serialize `CliffUnlockLiquidity`:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return errors.NewField("CliffUnlockLiquidity", err)
	}
	// Serialize `LiquidityPerPeriod`:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return errors.NewField("LiquidityPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	return nil
}

func (obj VestingParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffPoint` (optional):
	{
		var ok bool
		if ok, err = decoder.ReadOption(); err != nil {
			return errors.NewOption("CliffPoint", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.CliffPoint)
			if err != nil {
				return errors.NewField("CliffPoint", err)
			}
		}
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return errors.NewField("PeriodFrequency", err)
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return errors.NewField("CliffUnlockLiquidity", err)
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return errors.NewField("LiquidityPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	return nil
}

func (obj *VestingParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingParameters: %w", err)
	}
	return nil
}

func UnmarshalVestingParameters(buf []byte) (*VestingParameters, error) {
	obj := new(VestingParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
