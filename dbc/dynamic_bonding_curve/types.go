// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package dynamic_bonding_curve

import (
	"bytes"
	"fmt"

	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type BaseFeeConfig struct {
	CliffFeeNumerator uint64      `json:"cliffFeeNumerator"`
	SecondFactor      uint64      `json:"secondFactor"`
	ThirdFactor       uint64      `json:"thirdFactor"`
	FirstFactor       uint16      `json:"firstFactor"`
	BaseFeeMode       BaseFeeMode `json:"baseFeeMode"`
	Padding0          [5]uint8    `json:"padding0"`
}

func (obj BaseFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Serialize `SecondFactor`:
	err = encoder.Encode(obj.SecondFactor)
	if err != nil {
		return errors.NewField("SecondFactor", err)
	}
	// Serialize `ThirdFactor`:
	err = encoder.Encode(obj.ThirdFactor)
	if err != nil {
		return errors.NewField("ThirdFactor", err)
	}
	// Serialize `FirstFactor`:
	err = encoder.Encode(obj.FirstFactor)
	if err != nil {
		return errors.NewField("FirstFactor", err)
	}
	// Serialize `BaseFeeMode`:
	err = encoder.Encode(obj.BaseFeeMode)
	if err != nil {
		return errors.NewField("BaseFeeMode", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	return nil
}

func (obj BaseFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Deserialize `SecondFactor`:
	err = decoder.Decode(&obj.SecondFactor)
	if err != nil {
		return errors.NewField("SecondFactor", err)
	}
	// Deserialize `ThirdFactor`:
	err = decoder.Decode(&obj.ThirdFactor)
	if err != nil {
		return errors.NewField("ThirdFactor", err)
	}
	// Deserialize `FirstFactor`:
	err = decoder.Decode(&obj.FirstFactor)
	if err != nil {
		return errors.NewField("FirstFactor", err)
	}
	// Deserialize `BaseFeeMode`:
	err = decoder.Decode(&obj.BaseFeeMode)
	if err != nil {
		return errors.NewField("BaseFeeMode", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	return nil
}

func (obj *BaseFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeConfig(buf []byte) (*BaseFeeConfig, error) {
	obj := new(BaseFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeParameters struct {
	CliffFeeNumerator uint64      `json:"cliffFeeNumerator"`
	FirstFactor       uint16      `json:"firstFactor"`
	SecondFactor      uint64      `json:"secondFactor"`
	ThirdFactor       uint64      `json:"thirdFactor"`
	BaseFeeMode       BaseFeeMode `json:"baseFeeMode"`
}

func (obj BaseFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Serialize `FirstFactor`:
	err = encoder.Encode(obj.FirstFactor)
	if err != nil {
		return errors.NewField("FirstFactor", err)
	}
	// Serialize `SecondFactor`:
	err = encoder.Encode(obj.SecondFactor)
	if err != nil {
		return errors.NewField("SecondFactor", err)
	}
	// Serialize `ThirdFactor`:
	err = encoder.Encode(obj.ThirdFactor)
	if err != nil {
		return errors.NewField("ThirdFactor", err)
	}
	// Serialize `BaseFeeMode`:
	err = encoder.Encode(obj.BaseFeeMode)
	if err != nil {
		return errors.NewField("BaseFeeMode", err)
	}
	return nil
}

func (obj BaseFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return errors.NewField("CliffFeeNumerator", err)
	}
	// Deserialize `FirstFactor`:
	err = decoder.Decode(&obj.FirstFactor)
	if err != nil {
		return errors.NewField("FirstFactor", err)
	}
	// Deserialize `SecondFactor`:
	err = decoder.Decode(&obj.SecondFactor)
	if err != nil {
		return errors.NewField("SecondFactor", err)
	}
	// Deserialize `ThirdFactor`:
	err = decoder.Decode(&obj.ThirdFactor)
	if err != nil {
		return errors.NewField("ThirdFactor", err)
	}
	// Deserialize `BaseFeeMode`:
	err = decoder.Decode(&obj.BaseFeeMode)
	if err != nil {
		return errors.NewField("BaseFeeMode", err)
	}
	return nil
}

func (obj *BaseFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeParameters(buf []byte) (*BaseFeeParameters, error) {
	obj := new(BaseFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Parameter that set by the protocol
type ClaimFeeOperator struct {
	// operator
	Operator solanago.PublicKey `json:"operator"`

	// Reserve
	Padding0 [128]uint8 `json:"padding0"`
}

func (obj ClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	return nil
}

func (obj ClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	return nil
}

func (obj *ClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalClaimFeeOperator(buf []byte) (*ClaimFeeOperator, error) {
	obj := new(ClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Config struct {
	PoolFees             PoolFees           `json:"poolFees"`
	ActivationDuration   uint64             `json:"activationDuration"`
	VaultConfigKey       solanago.PublicKey `json:"vaultConfigKey"`
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`
	ActivationType       uint8              `json:"activationType"`
	PartnerFeeNumerator  uint64             `json:"partnerFeeNumerator"`
	Padding              [219]uint8         `json:"padding"`
}

func (obj Config) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `ActivationDuration`:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return errors.NewField("ActivationDuration", err)
	}
	// Serialize `VaultConfigKey`:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `PartnerFeeNumerator`:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return errors.NewField("PartnerFeeNumerator", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj Config) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Config: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return errors.NewField("ActivationDuration", err)
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return errors.NewField("PartnerFeeNumerator", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *Config) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Config: %w", err)
	}
	return nil
}

func UnmarshalConfig(buf []byte) (*Config, error) {
	obj := new(Config)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ConfigParameters struct {
	PoolFees                    PoolFeeParameters          `json:"poolFees"`
	CollectFeeMode              CollectFeeMode             `json:"collectFeeMode"`
	MigrationOption             MigrationOption            `json:"migrationOption"`
	ActivationType              ActivationType             `json:"activationType"`
	TokenType                   TokenType                  `json:"tokenType"`
	TokenDecimal                TokenDecimal               `json:"tokenDecimal"`
	PartnerLpPercentage         uint8                      `json:"partnerLpPercentage"`
	PartnerLockedLpPercentage   uint8                      `json:"partnerLockedLpPercentage"`
	CreatorLpPercentage         uint8                      `json:"creatorLpPercentage"`
	CreatorLockedLpPercentage   uint8                      `json:"creatorLockedLpPercentage"`
	MigrationQuoteThreshold     uint64                     `json:"migrationQuoteThreshold"`
	SqrtStartPrice              binary.Uint128             `json:"sqrtStartPrice"`
	LockedVesting               LockedVesting              `json:"lockedVesting"`
	MigrationFeeOption          MigrationFeeOption         `json:"migrationFeeOption"`
	TokenSupply                 *TokenSupplyParams         `bin:"optional" json:"tokenSupply,omitempty"`
	CreatorTradingFeePercentage uint8                      `json:"creatorTradingFeePercentage"` // withdrawCreatorSurplus, withdrawPartnerSurplus
	TokenUpdateAuthority        TokenUpdateAuthorityOption `json:"tokenUpdateAuthority"`
	MigrationFee                MigrationFee               `json:"migrationFee"`
	MigratedPoolFee             MigratedPoolFee            `json:"migratedPoolFee"`

	// padding for future use
	Padding [7]uint64                         `json:"padding"`
	Curve   []LiquidityDistributionParameters `json:"curve"`
}

func (obj ConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `MigrationOption`:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return errors.NewField("MigrationOption", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `TokenType`:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return errors.NewField("TokenType", err)
	}
	// Serialize `TokenDecimal`:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return errors.NewField("TokenDecimal", err)
	}
	// Serialize `PartnerLpPercentage`:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLpPercentage", err)
	}
	// Serialize `PartnerLockedLpPercentage`:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLockedLpPercentage", err)
	}
	// Serialize `CreatorLpPercentage`:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLpPercentage", err)
	}
	// Serialize `CreatorLockedLpPercentage`:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLockedLpPercentage", err)
	}
	// Serialize `MigrationQuoteThreshold`:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return errors.NewField("MigrationQuoteThreshold", err)
	}
	// Serialize `SqrtStartPrice`:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return errors.NewField("SqrtStartPrice", err)
	}
	// Serialize `LockedVesting`:
	err = encoder.Encode(obj.LockedVesting)
	if err != nil {
		return errors.NewField("LockedVesting", err)
	}
	// Serialize `MigrationFeeOption`:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return errors.NewField("MigrationFeeOption", err)
	}
	// Serialize `TokenSupply` (optional):
	{
		if obj.TokenSupply == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TokenSupply", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TokenSupply", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TokenSupply)
			if err != nil {
				return errors.NewField("TokenSupply", err)
			}
		}
	}
	// Serialize `CreatorTradingFeePercentage`:
	err = encoder.Encode(obj.CreatorTradingFeePercentage)
	if err != nil {
		return errors.NewField("CreatorTradingFeePercentage", err)
	}
	// Serialize `TokenUpdateAuthority`:
	err = encoder.Encode(obj.TokenUpdateAuthority)
	if err != nil {
		return errors.NewField("TokenUpdateAuthority", err)
	}
	// Serialize `MigrationFee`:
	err = encoder.Encode(obj.MigrationFee)
	if err != nil {
		return errors.NewField("MigrationFee", err)
	}
	// Serialize `MigratedPoolFee`:
	err = encoder.Encode(obj.MigratedPoolFee)
	if err != nil {
		return errors.NewField("MigratedPoolFee", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Curve`:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return errors.NewField("Curve", err)
	}
	return nil
}

func (obj ConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return errors.NewField("MigrationOption", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return errors.NewField("TokenType", err)
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return errors.NewField("TokenDecimal", err)
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLpPercentage", err)
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLockedLpPercentage", err)
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLpPercentage", err)
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLockedLpPercentage", err)
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return errors.NewField("MigrationQuoteThreshold", err)
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return errors.NewField("SqrtStartPrice", err)
	}
	// Deserialize `LockedVesting`:
	err = decoder.Decode(&obj.LockedVesting)
	if err != nil {
		return errors.NewField("LockedVesting", err)
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return errors.NewField("MigrationFeeOption", err)
	}
	// Deserialize `TokenSupply` (optional):
	{
		var ok bool
		if ok, err = decoder.ReadOption(); err != nil {
			return errors.NewOption("TokenSupply", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TokenSupply)
			if err != nil {
				return errors.NewField("TokenSupply", err)
			}
		}
	}
	// Deserialize `CreatorTradingFeePercentage`:
	err = decoder.Decode(&obj.CreatorTradingFeePercentage)
	if err != nil {
		return errors.NewField("CreatorTradingFeePercentage", err)
	}
	// Deserialize `TokenUpdateAuthority`:
	err = decoder.Decode(&obj.TokenUpdateAuthority)
	if err != nil {
		return errors.NewField("TokenUpdateAuthority", err)
	}
	// Deserialize `MigrationFee`:
	err = decoder.Decode(&obj.MigrationFee)
	if err != nil {
		return errors.NewField("MigrationFee", err)
	}
	// Deserialize `MigratedPoolFee`:
	err = decoder.Decode(&obj.MigratedPoolFee)
	if err != nil {
		return errors.NewField("MigratedPoolFee", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return errors.NewField("Curve", err)
	}
	return nil
}

func (obj *ConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalConfigParameters(buf []byte) (*ConfigParameters, error) {
	obj := new(ConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreatePartnerMetadataParameters struct {
	Padding [96]uint8 `json:"padding"`
	Name    string    `json:"name"`
	Website string    `json:"website"`
	Logo    string    `json:"logo"`
}

func (obj CreatePartnerMetadataParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Website`:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Serialize `Logo`:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj CreatePartnerMetadataParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreatePartnerMetadataParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreatePartnerMetadataParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj *CreatePartnerMetadataParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreatePartnerMetadataParameters: %w", err)
	}
	return nil
}

func UnmarshalCreatePartnerMetadataParameters(buf []byte) (*CreatePartnerMetadataParameters, error) {
	obj := new(CreatePartnerMetadataParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateVirtualPoolMetadataParameters struct {
	Padding [96]uint8 `json:"padding"`
	Name    string    `json:"name"`
	Website string    `json:"website"`
	Logo    string    `json:"logo"`
}

func (obj CreateVirtualPoolMetadataParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Website`:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Serialize `Logo`:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj CreateVirtualPoolMetadataParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateVirtualPoolMetadataParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateVirtualPoolMetadataParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj *CreateVirtualPoolMetadataParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateVirtualPoolMetadataParameters: %w", err)
	}
	return nil
}

func UnmarshalCreateVirtualPoolMetadataParameters(buf []byte) (*CreateVirtualPoolMetadataParameters, error) {
	obj := new(CreateVirtualPoolMetadataParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeConfig struct {
	Initialized              uint8          `json:"initialized"`
	Padding                  [7]uint8       `json:"padding"`
	MaxVolatilityAccumulator uint32         `json:"maxVolatilityAccumulator"`
	VariableFeeControl       uint32         `json:"variableFeeControl"`
	BinStep                  uint16         `json:"binStep"`
	FilterPeriod             uint16         `json:"filterPeriod"`
	DecayPeriod              uint16         `json:"decayPeriod"`
	ReductionFactor          uint16         `json:"reductionFactor"`
	Padding2                 [8]uint8       `json:"padding2"`
	BinStepU128              binary.Uint128 `json:"binStepU128"`
}

func (obj DynamicFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Serialize `BinStepU128`:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	return nil
}

func (obj DynamicFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return errors.NewField("Initialized", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	return nil
}

func (obj *DynamicFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeConfig(buf []byte) (*DynamicFeeConfig, error) {
	obj := new(DynamicFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeParameters struct {
	BinStep                  uint16         `json:"binStep"`
	BinStepU128              binary.Uint128 `json:"binStepU128"`
	FilterPeriod             uint16         `json:"filterPeriod"`
	DecayPeriod              uint16         `json:"decayPeriod"`
	ReductionFactor          uint16         `json:"reductionFactor"`
	MaxVolatilityAccumulator uint32         `json:"maxVolatilityAccumulator"`
	VariableFeeControl       uint32         `json:"variableFeeControl"`
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BinStepU128`:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	return nil
}

func (obj DynamicFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return errors.NewField("BinStepU128", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	return nil
}

func (obj *DynamicFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeParameters(buf []byte) (*DynamicFeeParameters, error) {
	obj := new(DynamicFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimCreatorTradingFee struct {
	Pool             solanago.PublicKey `json:"pool"`
	TokenBaseAmount  uint64             `json:"tokenBaseAmount"`
	TokenQuoteAmount uint64             `json:"tokenQuoteAmount"`
}

func (obj EvtClaimCreatorTradingFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TokenBaseAmount`:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return errors.NewField("TokenBaseAmount", err)
	}
	// Serialize `TokenQuoteAmount`:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return errors.NewField("TokenQuoteAmount", err)
	}
	return nil
}

func (obj EvtClaimCreatorTradingFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimCreatorTradingFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimCreatorTradingFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return errors.NewField("TokenBaseAmount", err)
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return errors.NewField("TokenQuoteAmount", err)
	}
	return nil
}

func (obj *EvtClaimCreatorTradingFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimCreatorTradingFee: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimCreatorTradingFee(buf []byte) (*EvtClaimCreatorTradingFee, error) {
	obj := new(EvtClaimCreatorTradingFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimProtocolFee struct {
	Pool             solanago.PublicKey `json:"pool"`
	TokenBaseAmount  uint64             `json:"tokenBaseAmount"`
	TokenQuoteAmount uint64             `json:"tokenQuoteAmount"`
}

func (obj EvtClaimProtocolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TokenBaseAmount`:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return errors.NewField("TokenBaseAmount", err)
	}
	// Serialize `TokenQuoteAmount`:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return errors.NewField("TokenQuoteAmount", err)
	}
	return nil
}

func (obj EvtClaimProtocolFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimProtocolFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimProtocolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return errors.NewField("TokenBaseAmount", err)
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return errors.NewField("TokenQuoteAmount", err)
	}
	return nil
}

func (obj *EvtClaimProtocolFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimProtocolFee: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimProtocolFee(buf []byte) (*EvtClaimProtocolFee, error) {
	obj := new(EvtClaimProtocolFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtClaimTradingFee struct {
	Pool             solanago.PublicKey `json:"pool"`
	TokenBaseAmount  uint64             `json:"tokenBaseAmount"`
	TokenQuoteAmount uint64             `json:"tokenQuoteAmount"`
}

func (obj EvtClaimTradingFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TokenBaseAmount`:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return errors.NewField("TokenBaseAmount", err)
	}
	// Serialize `TokenQuoteAmount`:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return errors.NewField("TokenQuoteAmount", err)
	}
	return nil
}

func (obj EvtClaimTradingFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtClaimTradingFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtClaimTradingFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return errors.NewField("TokenBaseAmount", err)
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return errors.NewField("TokenQuoteAmount", err)
	}
	return nil
}

func (obj *EvtClaimTradingFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtClaimTradingFee: %w", err)
	}
	return nil
}

func UnmarshalEvtClaimTradingFee(buf []byte) (*EvtClaimTradingFee, error) {
	obj := new(EvtClaimTradingFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Close claim fee operator
type EvtCloseClaimFeeOperator struct {
	ClaimFeeOperator solanago.PublicKey `json:"claimFeeOperator"`
	Operator         solanago.PublicKey `json:"operator"`
}

func (obj EvtCloseClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClaimFeeOperator`:
	err = encoder.Encode(obj.ClaimFeeOperator)
	if err != nil {
		return errors.NewField("ClaimFeeOperator", err)
	}
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj EvtCloseClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCloseClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCloseClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClaimFeeOperator`:
	err = decoder.Decode(&obj.ClaimFeeOperator)
	if err != nil {
		return errors.NewField("ClaimFeeOperator", err)
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj *EvtCloseClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCloseClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalEvtCloseClaimFeeOperator(buf []byte) (*EvtCloseClaimFeeOperator, error) {
	obj := new(EvtCloseClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create claim fee operator
type EvtCreateClaimFeeOperator struct {
	Operator solanago.PublicKey `json:"operator"`
}

func (obj EvtCreateClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj EvtCreateClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	return nil
}

func (obj *EvtCreateClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateClaimFeeOperator(buf []byte) (*EvtCreateClaimFeeOperator, error) {
	obj := new(EvtCreateClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create config
type EvtCreateConfig struct {
	Config                    solanago.PublicKey                `json:"config"`
	QuoteMint                 solanago.PublicKey                `json:"quoteMint"`
	FeeClaimer                solanago.PublicKey                `json:"feeClaimer"`
	Owner                     solanago.PublicKey                `json:"owner"`
	PoolFees                  PoolFeeParameters                 `json:"poolFees"`
	CollectFeeMode            uint8                             `json:"collectFeeMode"`
	MigrationOption           uint8                             `json:"migrationOption"`
	ActivationType            uint8                             `json:"activationType"`
	TokenDecimal              uint8                             `json:"tokenDecimal"`
	TokenType                 uint8                             `json:"tokenType"`
	PartnerLockedLpPercentage uint8                             `json:"partnerLockedLpPercentage"`
	PartnerLpPercentage       uint8                             `json:"partnerLpPercentage"`
	CreatorLockedLpPercentage uint8                             `json:"creatorLockedLpPercentage"`
	CreatorLpPercentage       uint8                             `json:"creatorLpPercentage"`
	SwapBaseAmount            uint64                            `json:"swapBaseAmount"`
	MigrationQuoteThreshold   uint64                            `json:"migrationQuoteThreshold"`
	MigrationBaseAmount       uint64                            `json:"migrationBaseAmount"`
	SqrtStartPrice            binary.Uint128                    `json:"sqrtStartPrice"`
	LockedVesting             LockedVesting                     `json:"lockedVesting"`
	MigrationFeeOption        uint8                             `json:"migrationFeeOption"`
	FixedTokenSupplyFlag      uint8                             `json:"fixedTokenSupplyFlag"`
	PreMigrationTokenSupply   uint64                            `json:"preMigrationTokenSupply"`
	PostMigrationTokenSupply  uint64                            `json:"postMigrationTokenSupply"`
	Curve                     []LiquidityDistributionParameters `json:"curve"`
}

func (obj EvtCreateConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `QuoteMint`:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Serialize `FeeClaimer`:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `MigrationOption`:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return errors.NewField("MigrationOption", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `TokenDecimal`:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return errors.NewField("TokenDecimal", err)
	}
	// Serialize `TokenType`:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return errors.NewField("TokenType", err)
	}
	// Serialize `PartnerLockedLpPercentage`:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLockedLpPercentage", err)
	}
	// Serialize `PartnerLpPercentage`:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLpPercentage", err)
	}
	// Serialize `CreatorLockedLpPercentage`:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLockedLpPercentage", err)
	}
	// Serialize `CreatorLpPercentage`:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLpPercentage", err)
	}
	// Serialize `SwapBaseAmount`:
	err = encoder.Encode(obj.SwapBaseAmount)
	if err != nil {
		return errors.NewField("SwapBaseAmount", err)
	}
	// Serialize `MigrationQuoteThreshold`:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return errors.NewField("MigrationQuoteThreshold", err)
	}
	// Serialize `MigrationBaseAmount`:
	err = encoder.Encode(obj.MigrationBaseAmount)
	if err != nil {
		return errors.NewField("MigrationBaseAmount", err)
	}
	// Serialize `SqrtStartPrice`:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return errors.NewField("SqrtStartPrice", err)
	}
	// Serialize `LockedVesting`:
	err = encoder.Encode(obj.LockedVesting)
	if err != nil {
		return errors.NewField("LockedVesting", err)
	}
	// Serialize `MigrationFeeOption`:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return errors.NewField("MigrationFeeOption", err)
	}
	// Serialize `FixedTokenSupplyFlag`:
	err = encoder.Encode(obj.FixedTokenSupplyFlag)
	if err != nil {
		return errors.NewField("FixedTokenSupplyFlag", err)
	}
	// Serialize `PreMigrationTokenSupply`:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PreMigrationTokenSupply", err)
	}
	// Serialize `PostMigrationTokenSupply`:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PostMigrationTokenSupply", err)
	}
	// Serialize `Curve`:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return errors.NewField("Curve", err)
	}
	return nil
}

func (obj EvtCreateConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return errors.NewField("MigrationOption", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return errors.NewField("TokenDecimal", err)
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return errors.NewField("TokenType", err)
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLockedLpPercentage", err)
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLpPercentage", err)
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLockedLpPercentage", err)
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLpPercentage", err)
	}
	// Deserialize `SwapBaseAmount`:
	err = decoder.Decode(&obj.SwapBaseAmount)
	if err != nil {
		return errors.NewField("SwapBaseAmount", err)
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return errors.NewField("MigrationQuoteThreshold", err)
	}
	// Deserialize `MigrationBaseAmount`:
	err = decoder.Decode(&obj.MigrationBaseAmount)
	if err != nil {
		return errors.NewField("MigrationBaseAmount", err)
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return errors.NewField("SqrtStartPrice", err)
	}
	// Deserialize `LockedVesting`:
	err = decoder.Decode(&obj.LockedVesting)
	if err != nil {
		return errors.NewField("LockedVesting", err)
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return errors.NewField("MigrationFeeOption", err)
	}
	// Deserialize `FixedTokenSupplyFlag`:
	err = decoder.Decode(&obj.FixedTokenSupplyFlag)
	if err != nil {
		return errors.NewField("FixedTokenSupplyFlag", err)
	}
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PreMigrationTokenSupply", err)
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PostMigrationTokenSupply", err)
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return errors.NewField("Curve", err)
	}
	return nil
}

func (obj *EvtCreateConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateConfig: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateConfig(buf []byte) (*EvtCreateConfig, error) {
	obj := new(EvtCreateConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtCreateConfigV2 struct {
	Config           solanago.PublicKey `json:"config"`
	QuoteMint        solanago.PublicKey `json:"quoteMint"`
	FeeClaimer       solanago.PublicKey `json:"feeClaimer"`
	LeftoverReceiver solanago.PublicKey `json:"leftoverReceiver"`
	ConfigParameters ConfigParameters   `json:"configParameters"`
}

func (obj EvtCreateConfigV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `QuoteMint`:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Serialize `FeeClaimer`:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Serialize `LeftoverReceiver`:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return errors.NewField("LeftoverReceiver", err)
	}
	// Serialize `ConfigParameters`:
	err = encoder.Encode(obj.ConfigParameters)
	if err != nil {
		return errors.NewField("ConfigParameters", err)
	}
	return nil
}

func (obj EvtCreateConfigV2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateConfigV2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateConfigV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return errors.NewField("LeftoverReceiver", err)
	}
	// Deserialize `ConfigParameters`:
	err = decoder.Decode(&obj.ConfigParameters)
	if err != nil {
		return errors.NewField("ConfigParameters", err)
	}
	return nil
}

func (obj *EvtCreateConfigV2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateConfigV2: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateConfigV2(buf []byte) (*EvtCreateConfigV2, error) {
	obj := new(EvtCreateConfigV2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtCreateDammV2MigrationMetadata struct {
	VirtualPool solanago.PublicKey `json:"virtualPool"`
}

func (obj EvtCreateDammV2MigrationMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VirtualPool`:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	return nil
}

func (obj EvtCreateDammV2MigrationMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateDammV2MigrationMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateDammV2MigrationMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	return nil
}

func (obj *EvtCreateDammV2MigrationMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateDammV2MigrationMetadata: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateDammV2MigrationMetadata(buf []byte) (*EvtCreateDammV2MigrationMetadata, error) {
	obj := new(EvtCreateDammV2MigrationMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtCreateMeteoraMigrationMetadata struct {
	VirtualPool solanago.PublicKey `json:"virtualPool"`
}

func (obj EvtCreateMeteoraMigrationMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VirtualPool`:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	return nil
}

func (obj EvtCreateMeteoraMigrationMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreateMeteoraMigrationMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreateMeteoraMigrationMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	return nil
}

func (obj *EvtCreateMeteoraMigrationMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreateMeteoraMigrationMetadata: %w", err)
	}
	return nil
}

func UnmarshalEvtCreateMeteoraMigrationMetadata(buf []byte) (*EvtCreateMeteoraMigrationMetadata, error) {
	obj := new(EvtCreateMeteoraMigrationMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtCreatorWithdrawSurplus struct {
	Pool          solanago.PublicKey `json:"pool"`
	SurplusAmount uint64             `json:"surplusAmount"`
}

func (obj EvtCreatorWithdrawSurplus) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SurplusAmount`:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return errors.NewField("SurplusAmount", err)
	}
	return nil
}

func (obj EvtCreatorWithdrawSurplus) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCreatorWithdrawSurplus: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCreatorWithdrawSurplus) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return errors.NewField("SurplusAmount", err)
	}
	return nil
}

func (obj *EvtCreatorWithdrawSurplus) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCreatorWithdrawSurplus: %w", err)
	}
	return nil
}

func UnmarshalEvtCreatorWithdrawSurplus(buf []byte) (*EvtCreatorWithdrawSurplus, error) {
	obj := new(EvtCreatorWithdrawSurplus)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtCurveComplete struct {
	Pool         solanago.PublicKey `json:"pool"`
	Config       solanago.PublicKey `json:"config"`
	BaseReserve  uint64             `json:"baseReserve"`
	QuoteReserve uint64             `json:"quoteReserve"`
}

func (obj EvtCurveComplete) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `BaseReserve`:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return errors.NewField("BaseReserve", err)
	}
	// Serialize `QuoteReserve`:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return errors.NewField("QuoteReserve", err)
	}
	return nil
}

func (obj EvtCurveComplete) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtCurveComplete: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtCurveComplete) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return errors.NewField("BaseReserve", err)
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return errors.NewField("QuoteReserve", err)
	}
	return nil
}

func (obj *EvtCurveComplete) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtCurveComplete: %w", err)
	}
	return nil
}

func UnmarshalEvtCurveComplete(buf []byte) (*EvtCurveComplete, error) {
	obj := new(EvtCurveComplete)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtInitializePool struct {
	Pool            solanago.PublicKey `json:"pool"`
	Config          solanago.PublicKey `json:"config"`
	Creator         solanago.PublicKey `json:"creator"`
	BaseMint        solanago.PublicKey `json:"baseMint"`
	PoolType        uint8              `json:"poolType"`
	ActivationPoint uint64             `json:"activationPoint"`
}

func (obj EvtInitializePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `BaseMint`:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return errors.NewField("BaseMint", err)
	}
	// Serialize `PoolType`:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Serialize `ActivationPoint`:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	return nil
}

func (obj EvtInitializePool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtInitializePool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtInitializePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return errors.NewField("BaseMint", err)
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	return nil
}

func (obj *EvtInitializePool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtInitializePool: %w", err)
	}
	return nil
}

func UnmarshalEvtInitializePool(buf []byte) (*EvtInitializePool, error) {
	obj := new(EvtInitializePool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create partner metadata
type EvtPartnerMetadata struct {
	PartnerMetadata solanago.PublicKey `json:"partnerMetadata"`
	FeeClaimer      solanago.PublicKey `json:"feeClaimer"`
}

func (obj EvtPartnerMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PartnerMetadata`:
	err = encoder.Encode(obj.PartnerMetadata)
	if err != nil {
		return errors.NewField("PartnerMetadata", err)
	}
	// Serialize `FeeClaimer`:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	return nil
}

func (obj EvtPartnerMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtPartnerMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtPartnerMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PartnerMetadata`:
	err = decoder.Decode(&obj.PartnerMetadata)
	if err != nil {
		return errors.NewField("PartnerMetadata", err)
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	return nil
}

func (obj *EvtPartnerMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtPartnerMetadata: %w", err)
	}
	return nil
}

func UnmarshalEvtPartnerMetadata(buf []byte) (*EvtPartnerMetadata, error) {
	obj := new(EvtPartnerMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtPartnerWithdrawMigrationFee struct {
	Pool solanago.PublicKey `json:"pool"`
	Fee  uint64             `json:"fee"`
}

func (obj EvtPartnerWithdrawMigrationFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Fee`:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	return nil
}

func (obj EvtPartnerWithdrawMigrationFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtPartnerWithdrawMigrationFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtPartnerWithdrawMigrationFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	return nil
}

func (obj *EvtPartnerWithdrawMigrationFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtPartnerWithdrawMigrationFee: %w", err)
	}
	return nil
}

func UnmarshalEvtPartnerWithdrawMigrationFee(buf []byte) (*EvtPartnerWithdrawMigrationFee, error) {
	obj := new(EvtPartnerWithdrawMigrationFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtPartnerWithdrawSurplus struct {
	Pool          solanago.PublicKey `json:"pool"`
	SurplusAmount uint64             `json:"surplusAmount"`
}

func (obj EvtPartnerWithdrawSurplus) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SurplusAmount`:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return errors.NewField("SurplusAmount", err)
	}
	return nil
}

func (obj EvtPartnerWithdrawSurplus) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtPartnerWithdrawSurplus: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtPartnerWithdrawSurplus) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return errors.NewField("SurplusAmount", err)
	}
	return nil
}

func (obj *EvtPartnerWithdrawSurplus) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtPartnerWithdrawSurplus: %w", err)
	}
	return nil
}

func UnmarshalEvtPartnerWithdrawSurplus(buf []byte) (*EvtPartnerWithdrawSurplus, error) {
	obj := new(EvtPartnerWithdrawSurplus)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtProtocolWithdrawSurplus struct {
	Pool          solanago.PublicKey `json:"pool"`
	SurplusAmount uint64             `json:"surplusAmount"`
}

func (obj EvtProtocolWithdrawSurplus) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SurplusAmount`:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return errors.NewField("SurplusAmount", err)
	}
	return nil
}

func (obj EvtProtocolWithdrawSurplus) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtProtocolWithdrawSurplus: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtProtocolWithdrawSurplus) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return errors.NewField("SurplusAmount", err)
	}
	return nil
}

func (obj *EvtProtocolWithdrawSurplus) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtProtocolWithdrawSurplus: %w", err)
	}
	return nil
}

func UnmarshalEvtProtocolWithdrawSurplus(buf []byte) (*EvtProtocolWithdrawSurplus, error) {
	obj := new(EvtProtocolWithdrawSurplus)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtSwap struct {
	Pool             solanago.PublicKey `json:"pool"`
	Config           solanago.PublicKey `json:"config"`
	TradeDirection   uint8              `json:"tradeDirection"`
	HasReferral      bool               `json:"hasReferral"`
	Params           SwapParameters     `json:"params"`
	SwapResult       SwapResult         `json:"swapResult"`
	AmountIn         uint64             `json:"amountIn"`
	CurrentTimestamp uint64             `json:"currentTimestamp"`
}

func (obj EvtSwap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `TradeDirection`:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return errors.NewField("TradeDirection", err)
	}
	// Serialize `HasReferral`:
	err = encoder.Encode(obj.HasReferral)
	if err != nil {
		return errors.NewField("HasReferral", err)
	}
	// Serialize `Params`:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Serialize `SwapResult`:
	err = encoder.Encode(obj.SwapResult)
	if err != nil {
		return errors.NewField("SwapResult", err)
	}
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `CurrentTimestamp`:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return errors.NewField("CurrentTimestamp", err)
	}
	return nil
}

func (obj EvtSwap) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtSwap: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtSwap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return errors.NewField("TradeDirection", err)
	}
	// Deserialize `HasReferral`:
	err = decoder.Decode(&obj.HasReferral)
	if err != nil {
		return errors.NewField("HasReferral", err)
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return errors.NewField("Params", err)
	}
	// Deserialize `SwapResult`:
	err = decoder.Decode(&obj.SwapResult)
	if err != nil {
		return errors.NewField("SwapResult", err)
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return errors.NewField("CurrentTimestamp", err)
	}
	return nil
}

func (obj *EvtSwap) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtSwap: %w", err)
	}
	return nil
}

func UnmarshalEvtSwap(buf []byte) (*EvtSwap, error) {
	obj := new(EvtSwap)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtUpdatePoolCreator struct {
	Pool       solanago.PublicKey `json:"pool"`
	Creator    solanago.PublicKey `json:"creator"`
	NewCreator solanago.PublicKey `json:"newCreator"`
}

func (obj EvtUpdatePoolCreator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `NewCreator`:
	err = encoder.Encode(obj.NewCreator)
	if err != nil {
		return errors.NewField("NewCreator", err)
	}
	return nil
}

func (obj EvtUpdatePoolCreator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtUpdatePoolCreator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtUpdatePoolCreator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `NewCreator`:
	err = decoder.Decode(&obj.NewCreator)
	if err != nil {
		return errors.NewField("NewCreator", err)
	}
	return nil
}

func (obj *EvtUpdatePoolCreator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtUpdatePoolCreator: %w", err)
	}
	return nil
}

func UnmarshalEvtUpdatePoolCreator(buf []byte) (*EvtUpdatePoolCreator, error) {
	obj := new(EvtUpdatePoolCreator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Create virtual pool metadata
type EvtVirtualPoolMetadata struct {
	VirtualPoolMetadata solanago.PublicKey `json:"virtualPoolMetadata"`
	VirtualPool         solanago.PublicKey `json:"virtualPool"`
}

func (obj EvtVirtualPoolMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VirtualPoolMetadata`:
	err = encoder.Encode(obj.VirtualPoolMetadata)
	if err != nil {
		return errors.NewField("VirtualPoolMetadata", err)
	}
	// Serialize `VirtualPool`:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	return nil
}

func (obj EvtVirtualPoolMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtVirtualPoolMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtVirtualPoolMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VirtualPoolMetadata`:
	err = decoder.Decode(&obj.VirtualPoolMetadata)
	if err != nil {
		return errors.NewField("VirtualPoolMetadata", err)
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	return nil
}

func (obj *EvtVirtualPoolMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtVirtualPoolMetadata: %w", err)
	}
	return nil
}

func UnmarshalEvtVirtualPoolMetadata(buf []byte) (*EvtVirtualPoolMetadata, error) {
	obj := new(EvtVirtualPoolMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtWithdrawLeftover struct {
	Pool             solanago.PublicKey `json:"pool"`
	LeftoverReceiver solanago.PublicKey `json:"leftoverReceiver"`
	LeftoverAmount   uint64             `json:"leftoverAmount"`
}

func (obj EvtWithdrawLeftover) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `LeftoverReceiver`:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return errors.NewField("LeftoverReceiver", err)
	}
	// Serialize `LeftoverAmount`:
	err = encoder.Encode(obj.LeftoverAmount)
	if err != nil {
		return errors.NewField("LeftoverAmount", err)
	}
	return nil
}

func (obj EvtWithdrawLeftover) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtWithdrawLeftover: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtWithdrawLeftover) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return errors.NewField("LeftoverReceiver", err)
	}
	// Deserialize `LeftoverAmount`:
	err = decoder.Decode(&obj.LeftoverAmount)
	if err != nil {
		return errors.NewField("LeftoverAmount", err)
	}
	return nil
}

func (obj *EvtWithdrawLeftover) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtWithdrawLeftover: %w", err)
	}
	return nil
}

func UnmarshalEvtWithdrawLeftover(buf []byte) (*EvtWithdrawLeftover, error) {
	obj := new(EvtWithdrawLeftover)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EvtWithdrawMigrationFee struct {
	Pool solanago.PublicKey `json:"pool"`
	Fee  uint64             `json:"fee"`
	Flag uint8              `json:"flag"`
}

func (obj EvtWithdrawMigrationFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Fee`:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Serialize `Flag`:
	err = encoder.Encode(obj.Flag)
	if err != nil {
		return errors.NewField("Flag", err)
	}
	return nil
}

func (obj EvtWithdrawMigrationFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EvtWithdrawMigrationFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EvtWithdrawMigrationFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Deserialize `Flag`:
	err = decoder.Decode(&obj.Flag)
	if err != nil {
		return errors.NewField("Flag", err)
	}
	return nil
}

func (obj *EvtWithdrawMigrationFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EvtWithdrawMigrationFee: %w", err)
	}
	return nil
}

func UnmarshalEvtWithdrawMigrationFee(buf []byte) (*EvtWithdrawMigrationFee, error) {
	obj := new(EvtWithdrawMigrationFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializePoolParameters struct {
	Name   string `json:"name"`
	Symbol string `json:"symbol"`
	Uri    string `json:"uri"`
}

func (obj InitializePoolParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Symbol`:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return errors.NewField("Symbol", err)
	}
	// Serialize `Uri`:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return errors.NewField("Uri", err)
	}
	return nil
}

func (obj InitializePoolParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializePoolParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializePoolParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return errors.NewField("Symbol", err)
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return errors.NewField("Uri", err)
	}
	return nil
}

func (obj *InitializePoolParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializePoolParameters: %w", err)
	}
	return nil
}

func UnmarshalInitializePoolParameters(buf []byte) (*InitializePoolParameters, error) {
	obj := new(InitializePoolParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityDistributionConfig struct {
	SqrtPrice binary.Uint128 `json:"sqrtPrice"`
	Liquidity binary.Uint128 `json:"liquidity"`
}

func (obj LiquidityDistributionConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	return nil
}

func (obj LiquidityDistributionConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityDistributionConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityDistributionConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	return nil
}

func (obj *LiquidityDistributionConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityDistributionConfig: %w", err)
	}
	return nil
}

func UnmarshalLiquidityDistributionConfig(buf []byte) (*LiquidityDistributionConfig, error) {
	obj := new(LiquidityDistributionConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityDistributionParameters struct {
	SqrtPrice binary.Uint128 `json:"sqrtPrice"`
	Liquidity binary.Uint128 `json:"liquidity"`
}

func (obj LiquidityDistributionParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `Liquidity`:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	return nil
}

func (obj LiquidityDistributionParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityDistributionParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityDistributionParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return errors.NewField("Liquidity", err)
	}
	return nil
}

func (obj *LiquidityDistributionParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityDistributionParameters: %w", err)
	}
	return nil
}

func UnmarshalLiquidityDistributionParameters(buf []byte) (*LiquidityDistributionParameters, error) {
	obj := new(LiquidityDistributionParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// State of lock escrow account
type LockEscrow struct {
	Pool                solanago.PublicKey `json:"pool"`
	Owner               solanago.PublicKey `json:"owner"`
	EscrowVault         solanago.PublicKey `json:"escrowVault"`
	Bump                uint8              `json:"bump"`
	TotalLockedAmount   uint64             `json:"totalLockedAmount"`
	LpPerToken          binary.Uint128     `json:"lpPerToken"`
	UnclaimedFeePending uint64             `json:"unclaimedFeePending"`
	AFee                uint64             `json:"aFee"`
	BFee                uint64             `json:"bFee"`
}

func (obj LockEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `EscrowVault`:
	err = encoder.Encode(obj.EscrowVault)
	if err != nil {
		return errors.NewField("EscrowVault", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `TotalLockedAmount`:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Serialize `LpPerToken`:
	err = encoder.Encode(obj.LpPerToken)
	if err != nil {
		return errors.NewField("LpPerToken", err)
	}
	// Serialize `UnclaimedFeePending`:
	err = encoder.Encode(obj.UnclaimedFeePending)
	if err != nil {
		return errors.NewField("UnclaimedFeePending", err)
	}
	// Serialize `AFee`:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return errors.NewField("AFee", err)
	}
	// Serialize `BFee`:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return errors.NewField("BFee", err)
	}
	return nil
}

func (obj LockEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `EscrowVault`:
	err = decoder.Decode(&obj.EscrowVault)
	if err != nil {
		return errors.NewField("EscrowVault", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Deserialize `LpPerToken`:
	err = decoder.Decode(&obj.LpPerToken)
	if err != nil {
		return errors.NewField("LpPerToken", err)
	}
	// Deserialize `UnclaimedFeePending`:
	err = decoder.Decode(&obj.UnclaimedFeePending)
	if err != nil {
		return errors.NewField("UnclaimedFeePending", err)
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return errors.NewField("AFee", err)
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return errors.NewField("BFee", err)
	}
	return nil
}

func (obj *LockEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockEscrow: %w", err)
	}
	return nil
}

func UnmarshalLockEscrow(buf []byte) (*LockEscrow, error) {
	obj := new(LockEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LockedVestingConfig struct {
	AmountPerPeriod                uint64 `json:"amountPerPeriod"`
	CliffDurationFromMigrationTime uint64 `json:"cliffDurationFromMigrationTime"`
	Frequency                      uint64 `json:"frequency"`
	NumberOfPeriod                 uint64 `json:"numberOfPeriod"`
	CliffUnlockAmount              uint64 `json:"cliffUnlockAmount"`
	Padding0                       uint64 `json:"padding0"`
}

func (obj LockedVestingConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `CliffDurationFromMigrationTime`:
	err = encoder.Encode(obj.CliffDurationFromMigrationTime)
	if err != nil {
		return errors.NewField("CliffDurationFromMigrationTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	return nil
}

func (obj LockedVestingConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockedVestingConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockedVestingConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `CliffDurationFromMigrationTime`:
	err = decoder.Decode(&obj.CliffDurationFromMigrationTime)
	if err != nil {
		return errors.NewField("CliffDurationFromMigrationTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	return nil
}

func (obj *LockedVestingConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockedVestingConfig: %w", err)
	}
	return nil
}

func UnmarshalLockedVestingConfig(buf []byte) (*LockedVestingConfig, error) {
	obj := new(LockedVestingConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LockedVesting struct {
	AmountPerPeriod                uint64 `json:"amountPerPeriod"`
	CliffDurationFromMigrationTime uint64 `json:"cliffDurationFromMigrationTime"`
	Frequency                      uint64 `json:"frequency"`
	NumberOfPeriod                 uint64 `json:"numberOfPeriod"`
	CliffUnlockAmount              uint64 `json:"cliffUnlockAmount"`
}

func (obj LockedVesting) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `CliffDurationFromMigrationTime`:
	err = encoder.Encode(obj.CliffDurationFromMigrationTime)
	if err != nil {
		return errors.NewField("CliffDurationFromMigrationTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	return nil
}

func (obj LockedVesting) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockedVestingParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockedVesting) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `CliffDurationFromMigrationTime`:
	err = decoder.Decode(&obj.CliffDurationFromMigrationTime)
	if err != nil {
		return errors.NewField("CliffDurationFromMigrationTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	return nil
}

func (obj *LockedVesting) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockedVestingParams: %w", err)
	}
	return nil
}

func UnmarshalLockedVestingParams(buf []byte) (*LockedVesting, error) {
	obj := new(LockedVesting)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MeteoraDammMigrationMetadata struct {
	// pool
	VirtualPool solanago.PublicKey `json:"virtualPool"`

	// !!! BE CAREFUL to use tomestone field, previous is pool creator
	Padding0 [32]uint8 `json:"padding0"`

	// partner
	Partner solanago.PublicKey `json:"partner"`

	// lp mint
	LpMint solanago.PublicKey `json:"lpMint"`

	// partner locked lp
	PartnerLockedLp uint64 `json:"partnerLockedLp"`

	// partner lp
	PartnerLp uint64 `json:"partnerLp"`

	// creator locked lp
	CreatorLockedLp uint64 `json:"creatorLockedLp"`

	// creator lp
	CreatorLp uint64 `json:"creatorLp"`

	// padding
	Padding1 uint8 `json:"padding1"`

	// flag to check whether lp is locked for creator
	CreatorLockedStatus uint8 `json:"creatorLockedStatus"`

	// flag to check whether lp is locked for partner
	PartnerLockedStatus uint8 `json:"partnerLockedStatus"`

	// flag to check whether creator has claimed lp token
	CreatorClaimStatus uint8 `json:"creatorClaimStatus"`

	// flag to check whether partner has claimed lp token
	PartnerClaimStatus uint8 `json:"partnerClaimStatus"`

	// Reserve
	Padding2 [107]uint8 `json:"padding2"`
}

func (obj MeteoraDammMigrationMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VirtualPool`:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Partner`:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	// Serialize `LpMint`:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return errors.NewField("LpMint", err)
	}
	// Serialize `PartnerLockedLp`:
	err = encoder.Encode(obj.PartnerLockedLp)
	if err != nil {
		return errors.NewField("PartnerLockedLp", err)
	}
	// Serialize `PartnerLp`:
	err = encoder.Encode(obj.PartnerLp)
	if err != nil {
		return errors.NewField("PartnerLp", err)
	}
	// Serialize `CreatorLockedLp`:
	err = encoder.Encode(obj.CreatorLockedLp)
	if err != nil {
		return errors.NewField("CreatorLockedLp", err)
	}
	// Serialize `CreatorLp`:
	err = encoder.Encode(obj.CreatorLp)
	if err != nil {
		return errors.NewField("CreatorLp", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `CreatorLockedStatus`:
	err = encoder.Encode(obj.CreatorLockedStatus)
	if err != nil {
		return errors.NewField("CreatorLockedStatus", err)
	}
	// Serialize `PartnerLockedStatus`:
	err = encoder.Encode(obj.PartnerLockedStatus)
	if err != nil {
		return errors.NewField("PartnerLockedStatus", err)
	}
	// Serialize `CreatorClaimStatus`:
	err = encoder.Encode(obj.CreatorClaimStatus)
	if err != nil {
		return errors.NewField("CreatorClaimStatus", err)
	}
	// Serialize `PartnerClaimStatus`:
	err = encoder.Encode(obj.PartnerClaimStatus)
	if err != nil {
		return errors.NewField("PartnerClaimStatus", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj MeteoraDammMigrationMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MeteoraDammMigrationMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MeteoraDammMigrationMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return errors.NewField("LpMint", err)
	}
	// Deserialize `PartnerLockedLp`:
	err = decoder.Decode(&obj.PartnerLockedLp)
	if err != nil {
		return errors.NewField("PartnerLockedLp", err)
	}
	// Deserialize `PartnerLp`:
	err = decoder.Decode(&obj.PartnerLp)
	if err != nil {
		return errors.NewField("PartnerLp", err)
	}
	// Deserialize `CreatorLockedLp`:
	err = decoder.Decode(&obj.CreatorLockedLp)
	if err != nil {
		return errors.NewField("CreatorLockedLp", err)
	}
	// Deserialize `CreatorLp`:
	err = decoder.Decode(&obj.CreatorLp)
	if err != nil {
		return errors.NewField("CreatorLp", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `CreatorLockedStatus`:
	err = decoder.Decode(&obj.CreatorLockedStatus)
	if err != nil {
		return errors.NewField("CreatorLockedStatus", err)
	}
	// Deserialize `PartnerLockedStatus`:
	err = decoder.Decode(&obj.PartnerLockedStatus)
	if err != nil {
		return errors.NewField("PartnerLockedStatus", err)
	}
	// Deserialize `CreatorClaimStatus`:
	err = decoder.Decode(&obj.CreatorClaimStatus)
	if err != nil {
		return errors.NewField("CreatorClaimStatus", err)
	}
	// Deserialize `PartnerClaimStatus`:
	err = decoder.Decode(&obj.PartnerClaimStatus)
	if err != nil {
		return errors.NewField("PartnerClaimStatus", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *MeteoraDammMigrationMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MeteoraDammMigrationMetadata: %w", err)
	}
	return nil
}

func UnmarshalMeteoraDammMigrationMetadata(buf []byte) (*MeteoraDammMigrationMetadata, error) {
	obj := new(MeteoraDammMigrationMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MeteoraDammV2Metadata struct {
	// pool
	VirtualPool solanago.PublicKey `json:"virtualPool"`

	// !!! BE CAREFUL to use tomestone field, previous is pool creator
	Padding0 [32]uint8 `json:"padding0"`

	// partner
	Partner solanago.PublicKey `json:"partner"`

	// Reserve
	Padding1 [126]uint8 `json:"padding1"`
}

func (obj MeteoraDammV2Metadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VirtualPool`:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Partner`:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj MeteoraDammV2Metadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MeteoraDammV2Metadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MeteoraDammV2Metadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *MeteoraDammV2Metadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MeteoraDammV2Metadata: %w", err)
	}
	return nil
}

func UnmarshalMeteoraDammV2Metadata(buf []byte) (*MeteoraDammV2Metadata, error) {
	obj := new(MeteoraDammV2Metadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MigratedPoolFee struct {
	CollectFeeMode CollectFeeMode       `json:"collectFeeMode"`
	DynamicFee     DammV2DynamicFeeMode `json:"dynamicFee"`
	PoolFeeBps     uint16               `json:"poolFeeBps"`
}

func (obj MigratedPoolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `DynamicFee`:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Serialize `PoolFeeBps`:
	err = encoder.Encode(obj.PoolFeeBps)
	if err != nil {
		return errors.NewField("PoolFeeBps", err)
	}
	return nil
}

func (obj MigratedPoolFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MigratedPoolFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MigratedPoolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Deserialize `PoolFeeBps`:
	err = decoder.Decode(&obj.PoolFeeBps)
	if err != nil {
		return errors.NewField("PoolFeeBps", err)
	}
	return nil
}

func (obj *MigratedPoolFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MigratedPoolFee: %w", err)
	}
	return nil
}

func UnmarshalMigratedPoolFee(buf []byte) (*MigratedPoolFee, error) {
	obj := new(MigratedPoolFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MigrationFee struct {
	FeePercentage        uint8 `json:"feePercentage"`
	CreatorFeePercentage uint8 `json:"creatorFeePercentage"`
}

func (obj MigrationFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeePercentage`:
	err = encoder.Encode(obj.FeePercentage)
	if err != nil {
		return errors.NewField("FeePercentage", err)
	}
	// Serialize `CreatorFeePercentage`:
	err = encoder.Encode(obj.CreatorFeePercentage)
	if err != nil {
		return errors.NewField("CreatorFeePercentage", err)
	}
	return nil
}

func (obj MigrationFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MigrationFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MigrationFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeePercentage`:
	err = decoder.Decode(&obj.FeePercentage)
	if err != nil {
		return errors.NewField("FeePercentage", err)
	}
	// Deserialize `CreatorFeePercentage`:
	err = decoder.Decode(&obj.CreatorFeePercentage)
	if err != nil {
		return errors.NewField("CreatorFeePercentage", err)
	}
	return nil
}

func (obj *MigrationFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MigrationFee: %w", err)
	}
	return nil
}

func UnmarshalMigrationFee(buf []byte) (*MigrationFee, error) {
	obj := new(MigrationFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Metadata for a partner.
type PartnerMetadata struct {
	// fee claimer
	FeeClaimer solanago.PublicKey `json:"feeClaimer"`

	// padding for future use
	Padding [6]binary.Uint128 `json:"padding"`

	// Name of partner.
	Name string `json:"name"`

	// Website of partner.
	Website string `json:"website"`

	// Logo of partner
	Logo string `json:"logo"`
}

func (obj PartnerMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeeClaimer`:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Website`:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Serialize `Logo`:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj PartnerMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PartnerMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PartnerMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj *PartnerMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PartnerMetadata: %w", err)
	}
	return nil
}

func UnmarshalPartnerMetadata(buf []byte) (*PartnerMetadata, error) {
	obj := new(PartnerMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolConfig struct {
	// quote mint
	QuoteMint solanago.PublicKey `json:"quoteMint"`

	// Address to get the fee
	FeeClaimer solanago.PublicKey `json:"feeClaimer"`

	// Address to receive extra base token after migration, in case token is fixed supply
	LeftoverReceiver solanago.PublicKey `json:"leftoverReceiver"`

	// Pool fee
	PoolFees PoolFeesConfig `json:"poolFees"`

	// Collect fee mode
	CollectFeeMode CollectFeeMode `json:"collectFeeMode"`

	// migration option
	MigrationOption MigrationOption `json:"migrationOption"`

	// whether mode slot or timestamp
	ActivationType ActivationType `json:"activationType"`

	// token decimals
	TokenDecimal TokenDecimal `json:"tokenDecimal"`

	// version
	Version uint8 `json:"version"`

	// token type of base token
	TokenType TokenType `json:"tokenType"`

	// quote token flag
	QuoteTokenFlag TokenType `json:"quoteTokenFlag"`

	// partner locked lp percentage
	PartnerLockedLpPercentage uint8 `json:"partnerLockedLpPercentage"`

	// partner lp percentage
	PartnerLpPercentage uint8 `json:"partnerLpPercentage"`

	// creator post migration fee percentage
	CreatorLockedLpPercentage uint8 `json:"creatorLockedLpPercentage"`

	// creator lp percentage
	CreatorLpPercentage uint8 `json:"creatorLpPercentage"`

	// migration fee option
	MigrationFeeOption MigrationFeeOption `json:"migrationFeeOption"`

	// flag to indicate whether token is dynamic supply (0) or fixed supply (1)
	FixedTokenSupplyFlag uint8 `json:"fixedTokenSupplyFlag"`

	// creator trading fee percentage
	CreatorTradingFeePercentage uint8 `json:"creatorTradingFeePercentage"`

	// token update authority
	TokenUpdateAuthority TokenUpdateAuthorityOption `json:"tokenUpdateAuthority"`

	// migration fee percentage
	MigrationFeePercentage uint8 `json:"migrationFeePercentage"`

	// creator migration fee percentage
	CreatorMigrationFeePercentage uint8 `json:"creatorMigrationFeePercentage"`

	// padding 0
	Padding0 [7]uint8 `json:"padding0"`

	// swap base amount
	SwapBaseAmount uint64 `json:"swapBaseAmount"`

	// migration quote threshold (in quote token)
	MigrationQuoteThreshold uint64 `json:"migrationQuoteThreshold"`

	// migration base threshold (in base token)
	MigrationBaseThreshold uint64 `json:"migrationBaseThreshold"`

	// migration sqrt price
	MigrationSqrtPrice binary.Uint128 `json:"migrationSqrtPrice"`

	// locked vesting config
	LockedVestingConfig LockedVestingConfig `json:"lockedVestingConfig"`

	// pre migration token supply
	PreMigrationTokenSupply uint64 `json:"preMigrationTokenSupply"`

	// post migration token supply
	PostMigrationTokenSupply uint64 `json:"postMigrationTokenSupply"`

	// migrated pool collect fee mode
	MigratedCollectFeeMode uint8 `json:"migratedCollectFeeMode"`

	// migrated dynamic fee option.
	MigratedDynamicFee uint8 `json:"migratedDynamicFee"`

	// migrated pool fee in bps
	MigratedPoolFeeBps uint16 `json:"migratedPoolFeeBps"`

	// padding 1
	Padding1 [12]uint8 `json:"padding1"`

	// padding 2
	Padding2 binary.Uint128 `json:"padding2"`

	// minimum price
	SqrtStartPrice binary.Uint128 `json:"sqrtStartPrice"`

	// curve, only use 20 point firstly, we can extend that latter
	Curve [20]LiquidityDistributionConfig `json:"curve"`
}

func (obj PoolConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `QuoteMint`:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Serialize `FeeClaimer`:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Serialize `LeftoverReceiver`:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return errors.NewField("LeftoverReceiver", err)
	}
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `CollectFeeMode`:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Serialize `MigrationOption`:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return errors.NewField("MigrationOption", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `TokenDecimal`:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return errors.NewField("TokenDecimal", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `TokenType`:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return errors.NewField("TokenType", err)
	}
	// Serialize `QuoteTokenFlag`:
	err = encoder.Encode(obj.QuoteTokenFlag)
	if err != nil {
		return errors.NewField("QuoteTokenFlag", err)
	}
	// Serialize `PartnerLockedLpPercentage`:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLockedLpPercentage", err)
	}
	// Serialize `PartnerLpPercentage`:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLpPercentage", err)
	}
	// Serialize `CreatorLockedLpPercentage`:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLockedLpPercentage", err)
	}
	// Serialize `CreatorLpPercentage`:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLpPercentage", err)
	}
	// Serialize `MigrationFeeOption`:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return errors.NewField("MigrationFeeOption", err)
	}
	// Serialize `FixedTokenSupplyFlag`:
	err = encoder.Encode(obj.FixedTokenSupplyFlag)
	if err != nil {
		return errors.NewField("FixedTokenSupplyFlag", err)
	}
	// Serialize `CreatorTradingFeePercentage`:
	err = encoder.Encode(obj.CreatorTradingFeePercentage)
	if err != nil {
		return errors.NewField("CreatorTradingFeePercentage", err)
	}
	// Serialize `TokenUpdateAuthority`:
	err = encoder.Encode(obj.TokenUpdateAuthority)
	if err != nil {
		return errors.NewField("TokenUpdateAuthority", err)
	}
	// Serialize `MigrationFeePercentage`:
	err = encoder.Encode(obj.MigrationFeePercentage)
	if err != nil {
		return errors.NewField("MigrationFeePercentage", err)
	}
	// Serialize `CreatorMigrationFeePercentage`:
	err = encoder.Encode(obj.CreatorMigrationFeePercentage)
	if err != nil {
		return errors.NewField("CreatorMigrationFeePercentage", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `SwapBaseAmount`:
	err = encoder.Encode(obj.SwapBaseAmount)
	if err != nil {
		return errors.NewField("SwapBaseAmount", err)
	}
	// Serialize `MigrationQuoteThreshold`:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return errors.NewField("MigrationQuoteThreshold", err)
	}
	// Serialize `MigrationBaseThreshold`:
	err = encoder.Encode(obj.MigrationBaseThreshold)
	if err != nil {
		return errors.NewField("MigrationBaseThreshold", err)
	}
	// Serialize `MigrationSqrtPrice`:
	err = encoder.Encode(obj.MigrationSqrtPrice)
	if err != nil {
		return errors.NewField("MigrationSqrtPrice", err)
	}
	// Serialize `LockedVestingConfig`:
	err = encoder.Encode(obj.LockedVestingConfig)
	if err != nil {
		return errors.NewField("LockedVestingConfig", err)
	}
	// Serialize `PreMigrationTokenSupply`:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PreMigrationTokenSupply", err)
	}
	// Serialize `PostMigrationTokenSupply`:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PostMigrationTokenSupply", err)
	}
	// Serialize `MigratedCollectFeeMode`:
	err = encoder.Encode(obj.MigratedCollectFeeMode)
	if err != nil {
		return errors.NewField("MigratedCollectFeeMode", err)
	}
	// Serialize `MigratedDynamicFee`:
	err = encoder.Encode(obj.MigratedDynamicFee)
	if err != nil {
		return errors.NewField("MigratedDynamicFee", err)
	}
	// Serialize `MigratedPoolFeeBps`:
	err = encoder.Encode(obj.MigratedPoolFeeBps)
	if err != nil {
		return errors.NewField("MigratedPoolFeeBps", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Serialize `SqrtStartPrice`:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return errors.NewField("SqrtStartPrice", err)
	}
	// Serialize `Curve`:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return errors.NewField("Curve", err)
	}
	return nil
}

func (obj PoolConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return errors.NewField("FeeClaimer", err)
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return errors.NewField("LeftoverReceiver", err)
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return errors.NewField("CollectFeeMode", err)
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return errors.NewField("MigrationOption", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return errors.NewField("TokenDecimal", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return errors.NewField("TokenType", err)
	}
	// Deserialize `QuoteTokenFlag`:
	err = decoder.Decode(&obj.QuoteTokenFlag)
	if err != nil {
		return errors.NewField("QuoteTokenFlag", err)
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLockedLpPercentage", err)
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return errors.NewField("PartnerLpPercentage", err)
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLockedLpPercentage", err)
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return errors.NewField("CreatorLpPercentage", err)
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return errors.NewField("MigrationFeeOption", err)
	}
	// Deserialize `FixedTokenSupplyFlag`:
	err = decoder.Decode(&obj.FixedTokenSupplyFlag)
	if err != nil {
		return errors.NewField("FixedTokenSupplyFlag", err)
	}
	// Deserialize `CreatorTradingFeePercentage`:
	err = decoder.Decode(&obj.CreatorTradingFeePercentage)
	if err != nil {
		return errors.NewField("CreatorTradingFeePercentage", err)
	}
	// Deserialize `TokenUpdateAuthority`:
	err = decoder.Decode(&obj.TokenUpdateAuthority)
	if err != nil {
		return errors.NewField("TokenUpdateAuthority", err)
	}
	// Deserialize `MigrationFeePercentage`:
	err = decoder.Decode(&obj.MigrationFeePercentage)
	if err != nil {
		return errors.NewField("MigrationFeePercentage", err)
	}
	// Deserialize `CreatorMigrationFeePercentage`:
	err = decoder.Decode(&obj.CreatorMigrationFeePercentage)
	if err != nil {
		return errors.NewField("CreatorMigrationFeePercentage", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `SwapBaseAmount`:
	err = decoder.Decode(&obj.SwapBaseAmount)
	if err != nil {
		return errors.NewField("SwapBaseAmount", err)
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return errors.NewField("MigrationQuoteThreshold", err)
	}
	// Deserialize `MigrationBaseThreshold`:
	err = decoder.Decode(&obj.MigrationBaseThreshold)
	if err != nil {
		return errors.NewField("MigrationBaseThreshold", err)
	}
	// Deserialize `MigrationSqrtPrice`:
	err = decoder.Decode(&obj.MigrationSqrtPrice)
	if err != nil {
		return errors.NewField("MigrationSqrtPrice", err)
	}
	// Deserialize `LockedVestingConfig`:
	err = decoder.Decode(&obj.LockedVestingConfig)
	if err != nil {
		return errors.NewField("LockedVestingConfig", err)
	}
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PreMigrationTokenSupply", err)
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PostMigrationTokenSupply", err)
	}
	// Deserialize `MigratedCollectFeeMode`:
	err = decoder.Decode(&obj.MigratedCollectFeeMode)
	if err != nil {
		return errors.NewField("MigratedCollectFeeMode", err)
	}
	// Deserialize `MigratedDynamicFee`:
	err = decoder.Decode(&obj.MigratedDynamicFee)
	if err != nil {
		return errors.NewField("MigratedDynamicFee", err)
	}
	// Deserialize `MigratedPoolFeeBps`:
	err = decoder.Decode(&obj.MigratedPoolFeeBps)
	if err != nil {
		return errors.NewField("MigratedPoolFeeBps", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return errors.NewField("SqrtStartPrice", err)
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return errors.NewField("Curve", err)
	}
	return nil
}

func (obj *PoolConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolConfig: %w", err)
	}
	return nil
}

func UnmarshalPoolConfig(buf []byte) (*PoolConfig, error) {
	obj := new(PoolConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFeeParameters struct {
	// Base fee
	BaseFee BaseFeeParameters `json:"baseFee"`

	// dynamic fee
	DynamicFee *DynamicFeeParameters `bin:"optional" json:"dynamicFee,omitempty"`
}

func (obj PoolFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Serialize `DynamicFee` (optional):
	{
		if obj.DynamicFee == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("DynamicFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("DynamicFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.DynamicFee)
			if err != nil {
				return errors.NewField("DynamicFee", err)
			}
		}
	}
	return nil
}

func (obj PoolFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Deserialize `DynamicFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("DynamicFee", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.DynamicFee)
			if err != nil {
				return errors.NewField("DynamicFee", err)
			}
		}
	}
	return nil
}

func (obj *PoolFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalPoolFeeParameters(buf []byte) (*PoolFeeParameters, error) {
	obj := new(PoolFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFees struct {
	TradeFeeNumerator           uint64 `json:"tradeFeeNumerator"`
	TradeFeeDenominator         uint64 `json:"tradeFeeDenominator"`
	ProtocolTradeFeeNumerator   uint64 `json:"protocolTradeFeeNumerator"`
	ProtocolTradeFeeDenominator uint64 `json:"protocolTradeFeeDenominator"`
}

func (obj PoolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Serialize `TradeFeeDenominator`:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return errors.NewField("TradeFeeDenominator", err)
	}
	// Serialize `ProtocolTradeFeeNumerator`:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Serialize `ProtocolTradeFeeDenominator`:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeDenominator", err)
	}
	return nil
}

func (obj PoolFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return errors.NewField("TradeFeeDenominator", err)
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeDenominator", err)
	}
	return nil
}

func (obj *PoolFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFees: %w", err)
	}
	return nil
}

func UnmarshalPoolFees(buf []byte) (*PoolFees, error) {
	obj := new(PoolFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolFeesConfig struct {
	BaseFee            BaseFeeConfig    `json:"baseFee"`
	DynamicFee         DynamicFeeConfig `json:"dynamicFee"`
	Padding0           [5]uint64        `json:"padding0"`
	Padding1           [6]uint8         `json:"padding1"`
	ProtocolFeePercent uint8            `json:"protocolFeePercent"`
	ReferralFeePercent uint8            `json:"referralFeePercent"`
}

func (obj PoolFeesConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Serialize `DynamicFee`:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `ProtocolFeePercent`:
	err = encoder.Encode(obj.ProtocolFeePercent)
	if err != nil {
		return errors.NewField("ProtocolFeePercent", err)
	}
	// Serialize `ReferralFeePercent`:
	err = encoder.Encode(obj.ReferralFeePercent)
	if err != nil {
		return errors.NewField("ReferralFeePercent", err)
	}
	return nil
}

func (obj PoolFeesConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeesConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeesConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return errors.NewField("BaseFee", err)
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return errors.NewField("DynamicFee", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `ProtocolFeePercent`:
	err = decoder.Decode(&obj.ProtocolFeePercent)
	if err != nil {
		return errors.NewField("ProtocolFeePercent", err)
	}
	// Deserialize `ReferralFeePercent`:
	err = decoder.Decode(&obj.ReferralFeePercent)
	if err != nil {
		return errors.NewField("ReferralFeePercent", err)
	}
	return nil
}

func (obj *PoolFeesConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeesConfig: %w", err)
	}
	return nil
}

func UnmarshalPoolFeesConfig(buf []byte) (*PoolFeesConfig, error) {
	obj := new(PoolFeesConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolMetrics struct {
	TotalProtocolBaseFee  uint64 `json:"totalProtocolBaseFee"`
	TotalProtocolQuoteFee uint64 `json:"totalProtocolQuoteFee"`
	TotalTradingBaseFee   uint64 `json:"totalTradingBaseFee"`
	TotalTradingQuoteFee  uint64 `json:"totalTradingQuoteFee"`
}

func (obj PoolMetrics) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalProtocolBaseFee`:
	err = encoder.Encode(obj.TotalProtocolBaseFee)
	if err != nil {
		return errors.NewField("TotalProtocolBaseFee", err)
	}
	// Serialize `TotalProtocolQuoteFee`:
	err = encoder.Encode(obj.TotalProtocolQuoteFee)
	if err != nil {
		return errors.NewField("TotalProtocolQuoteFee", err)
	}
	// Serialize `TotalTradingBaseFee`:
	err = encoder.Encode(obj.TotalTradingBaseFee)
	if err != nil {
		return errors.NewField("TotalTradingBaseFee", err)
	}
	// Serialize `TotalTradingQuoteFee`:
	err = encoder.Encode(obj.TotalTradingQuoteFee)
	if err != nil {
		return errors.NewField("TotalTradingQuoteFee", err)
	}
	return nil
}

func (obj PoolMetrics) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolMetrics: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolMetrics) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalProtocolBaseFee`:
	err = decoder.Decode(&obj.TotalProtocolBaseFee)
	if err != nil {
		return errors.NewField("TotalProtocolBaseFee", err)
	}
	// Deserialize `TotalProtocolQuoteFee`:
	err = decoder.Decode(&obj.TotalProtocolQuoteFee)
	if err != nil {
		return errors.NewField("TotalProtocolQuoteFee", err)
	}
	// Deserialize `TotalTradingBaseFee`:
	err = decoder.Decode(&obj.TotalTradingBaseFee)
	if err != nil {
		return errors.NewField("TotalTradingBaseFee", err)
	}
	// Deserialize `TotalTradingQuoteFee`:
	err = decoder.Decode(&obj.TotalTradingQuoteFee)
	if err != nil {
		return errors.NewField("TotalTradingQuoteFee", err)
	}
	return nil
}

func (obj *PoolMetrics) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolMetrics: %w", err)
	}
	return nil
}

func UnmarshalPoolMetrics(buf []byte) (*PoolMetrics, error) {
	obj := new(PoolMetrics)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapParameters struct {
	AmountIn         uint64 `json:"amountIn"`
	MinimumAmountOut uint64 `json:"minimumAmountOut"`
}

func (obj SwapParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `MinimumAmountOut`:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return errors.NewField("MinimumAmountOut", err)
	}
	return nil
}

func (obj SwapParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return errors.NewField("MinimumAmountOut", err)
	}
	return nil
}

func (obj *SwapParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapParameters: %w", err)
	}
	return nil
}

func UnmarshalSwapParameters(buf []byte) (*SwapParameters, error) {
	obj := new(SwapParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Encodes all results of swapping
type SwapResult struct {
	ActualInputAmount uint64         `json:"actualInputAmount"`
	OutputAmount      uint64         `json:"outputAmount"`
	NextSqrtPrice     binary.Uint128 `json:"nextSqrtPrice"`
	TradingFee        uint64         `json:"tradingFee"`
	ProtocolFee       uint64         `json:"protocolFee"`
	ReferralFee       uint64         `json:"referralFee"`
}

func (obj SwapResult) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActualInputAmount`:
	err = encoder.Encode(obj.ActualInputAmount)
	if err != nil {
		return errors.NewField("ActualInputAmount", err)
	}
	// Serialize `OutputAmount`:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return errors.NewField("OutputAmount", err)
	}
	// Serialize `NextSqrtPrice`:
	err = encoder.Encode(obj.NextSqrtPrice)
	if err != nil {
		return errors.NewField("NextSqrtPrice", err)
	}
	// Serialize `TradingFee`:
	err = encoder.Encode(obj.TradingFee)
	if err != nil {
		return errors.NewField("TradingFee", err)
	}
	// Serialize `ProtocolFee`:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Serialize `ReferralFee`:
	err = encoder.Encode(obj.ReferralFee)
	if err != nil {
		return errors.NewField("ReferralFee", err)
	}
	return nil
}

func (obj SwapResult) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapResult: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActualInputAmount`:
	err = decoder.Decode(&obj.ActualInputAmount)
	if err != nil {
		return errors.NewField("ActualInputAmount", err)
	}
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return errors.NewField("OutputAmount", err)
	}
	// Deserialize `NextSqrtPrice`:
	err = decoder.Decode(&obj.NextSqrtPrice)
	if err != nil {
		return errors.NewField("NextSqrtPrice", err)
	}
	// Deserialize `TradingFee`:
	err = decoder.Decode(&obj.TradingFee)
	if err != nil {
		return errors.NewField("TradingFee", err)
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Deserialize `ReferralFee`:
	err = decoder.Decode(&obj.ReferralFee)
	if err != nil {
		return errors.NewField("ReferralFee", err)
	}
	return nil
}

func (obj *SwapResult) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapResult: %w", err)
	}
	return nil
}

func UnmarshalSwapResult(buf []byte) (*SwapResult, error) {
	obj := new(SwapResult)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TokenSupplyParams struct {
	// pre migration token supply
	PreMigrationTokenSupply uint64 `json:"preMigrationTokenSupply"`

	// post migration token supply
	// becase DBC allow user to swap over the migration quote threshold, so in extreme case user may swap more than allowed buffer on curve
	// that result the total supply in post migration may be increased a bit (between pre_migration_token_supply and post_migration_token_supply)
	PostMigrationTokenSupply uint64 `json:"postMigrationTokenSupply"`
}

func (obj TokenSupplyParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PreMigrationTokenSupply`:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PreMigrationTokenSupply", err)
	}
	// Serialize `PostMigrationTokenSupply`:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PostMigrationTokenSupply", err)
	}
	return nil
}

func (obj TokenSupplyParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenSupplyParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenSupplyParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PreMigrationTokenSupply", err)
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return errors.NewField("PostMigrationTokenSupply", err)
	}
	return nil
}

func (obj *TokenSupplyParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenSupplyParams: %w", err)
	}
	return nil
}

func UnmarshalTokenSupplyParams(buf []byte) (*TokenSupplyParams, error) {
	obj := new(TokenSupplyParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VirtualPool struct {
	// volatility tracker
	VolatilityTracker VolatilityTracker `json:"volatilityTracker"`

	// config key
	Config solanago.PublicKey `json:"config"`

	// creator
	Creator solanago.PublicKey `json:"creator"`

	// base mint
	BaseMint solanago.PublicKey `json:"baseMint"`

	// base vault
	BaseVault solanago.PublicKey `json:"baseVault"`

	// quote vault
	QuoteVault solanago.PublicKey `json:"quoteVault"`

	// base reserve
	BaseReserve uint64 `json:"baseReserve"`

	// quote reserve
	QuoteReserve uint64 `json:"quoteReserve"`

	// protocol base fee
	ProtocolBaseFee uint64 `json:"protocolBaseFee"`

	// protocol quote fee
	ProtocolQuoteFee uint64 `json:"protocolQuoteFee"`

	// partner base fee
	PartnerBaseFee uint64 `json:"partnerBaseFee"`

	// trading quote fee
	PartnerQuoteFee uint64 `json:"partnerQuoteFee"`

	// current price
	SqrtPrice binary.Uint128 `json:"sqrtPrice"`

	// Activation point
	ActivationPoint uint64 `json:"activationPoint"`

	// pool type, spl token or token2022
	PoolType TokenType `json:"poolType"`

	// is migrated
	IsMigrated IsMigrated `json:"isMigrated"`

	// is partner withdraw surplus
	IsPartnerWithdrawSurplus uint8 `json:"isPartnerWithdrawSurplus"`

	// is protocol withdraw surplus
	IsProtocolWithdrawSurplus uint8 `json:"isProtocolWithdrawSurplus"`

	// migration progress
	MigrationProgress MigrationProgress `json:"migrationProgress"`

	// is withdraw leftover
	IsWithdrawLeftover uint8 `json:"isWithdrawLeftover"`

	// is creator withdraw surplus
	IsCreatorWithdrawSurplus uint8 `json:"isCreatorWithdrawSurplus"`

	// migration fee withdraw status, first bit is for partner, second bit is for creator
	MigrationFeeWithdrawStatus uint8 `json:"migrationFeeWithdrawStatus"`

	// pool metrics
	Metrics PoolMetrics `json:"metrics"`

	// The time curve is finished
	FinishCurveTimestamp uint64 `json:"finishCurveTimestamp"`

	// creator base fee
	CreatorBaseFee uint64 `json:"creatorBaseFee"`

	// creator quote fee
	CreatorQuoteFee uint64 `json:"creatorQuoteFee"`

	// Padding for further use
	Padding1 [7]uint64 `json:"padding1"`
}

func (obj VirtualPool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VolatilityTracker`:
	err = encoder.Encode(obj.VolatilityTracker)
	if err != nil {
		return errors.NewField("VolatilityTracker", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `BaseMint`:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return errors.NewField("BaseMint", err)
	}
	// Serialize `BaseVault`:
	err = encoder.Encode(obj.BaseVault)
	if err != nil {
		return errors.NewField("BaseVault", err)
	}
	// Serialize `QuoteVault`:
	err = encoder.Encode(obj.QuoteVault)
	if err != nil {
		return errors.NewField("QuoteVault", err)
	}
	// Serialize `BaseReserve`:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return errors.NewField("BaseReserve", err)
	}
	// Serialize `QuoteReserve`:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return errors.NewField("QuoteReserve", err)
	}
	// Serialize `ProtocolBaseFee`:
	err = encoder.Encode(obj.ProtocolBaseFee)
	if err != nil {
		return errors.NewField("ProtocolBaseFee", err)
	}
	// Serialize `ProtocolQuoteFee`:
	err = encoder.Encode(obj.ProtocolQuoteFee)
	if err != nil {
		return errors.NewField("ProtocolQuoteFee", err)
	}
	// Serialize `PartnerBaseFee`:
	err = encoder.Encode(obj.PartnerBaseFee)
	if err != nil {
		return errors.NewField("PartnerBaseFee", err)
	}
	// Serialize `PartnerQuoteFee`:
	err = encoder.Encode(obj.PartnerQuoteFee)
	if err != nil {
		return errors.NewField("PartnerQuoteFee", err)
	}
	// Serialize `SqrtPrice`:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Serialize `ActivationPoint`:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Serialize `PoolType`:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Serialize `IsMigrated`:
	err = encoder.Encode(obj.IsMigrated)
	if err != nil {
		return errors.NewField("IsMigrated", err)
	}
	// Serialize `IsPartnerWithdrawSurplus`:
	err = encoder.Encode(obj.IsPartnerWithdrawSurplus)
	if err != nil {
		return errors.NewField("IsPartnerWithdrawSurplus", err)
	}
	// Serialize `IsProtocolWithdrawSurplus`:
	err = encoder.Encode(obj.IsProtocolWithdrawSurplus)
	if err != nil {
		return errors.NewField("IsProtocolWithdrawSurplus", err)
	}
	// Serialize `MigrationProgress`:
	err = encoder.Encode(obj.MigrationProgress)
	if err != nil {
		return errors.NewField("MigrationProgress", err)
	}
	// Serialize `IsWithdrawLeftover`:
	err = encoder.Encode(obj.IsWithdrawLeftover)
	if err != nil {
		return errors.NewField("IsWithdrawLeftover", err)
	}
	// Serialize `IsCreatorWithdrawSurplus`:
	err = encoder.Encode(obj.IsCreatorWithdrawSurplus)
	if err != nil {
		return errors.NewField("IsCreatorWithdrawSurplus", err)
	}
	// Serialize `MigrationFeeWithdrawStatus`:
	err = encoder.Encode(obj.MigrationFeeWithdrawStatus)
	if err != nil {
		return errors.NewField("MigrationFeeWithdrawStatus", err)
	}
	// Serialize `Metrics`:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return errors.NewField("Metrics", err)
	}
	// Serialize `FinishCurveTimestamp`:
	err = encoder.Encode(obj.FinishCurveTimestamp)
	if err != nil {
		return errors.NewField("FinishCurveTimestamp", err)
	}
	// Serialize `CreatorBaseFee`:
	err = encoder.Encode(obj.CreatorBaseFee)
	if err != nil {
		return errors.NewField("CreatorBaseFee", err)
	}
	// Serialize `CreatorQuoteFee`:
	err = encoder.Encode(obj.CreatorQuoteFee)
	if err != nil {
		return errors.NewField("CreatorQuoteFee", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj VirtualPool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VirtualPool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VirtualPool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VolatilityTracker`:
	err = decoder.Decode(&obj.VolatilityTracker)
	if err != nil {
		return errors.NewField("VolatilityTracker", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return errors.NewField("BaseMint", err)
	}
	// Deserialize `BaseVault`:
	err = decoder.Decode(&obj.BaseVault)
	if err != nil {
		return errors.NewField("BaseVault", err)
	}
	// Deserialize `QuoteVault`:
	err = decoder.Decode(&obj.QuoteVault)
	if err != nil {
		return errors.NewField("QuoteVault", err)
	}
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return errors.NewField("BaseReserve", err)
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return errors.NewField("QuoteReserve", err)
	}
	// Deserialize `ProtocolBaseFee`:
	err = decoder.Decode(&obj.ProtocolBaseFee)
	if err != nil {
		return errors.NewField("ProtocolBaseFee", err)
	}
	// Deserialize `ProtocolQuoteFee`:
	err = decoder.Decode(&obj.ProtocolQuoteFee)
	if err != nil {
		return errors.NewField("ProtocolQuoteFee", err)
	}
	// Deserialize `PartnerBaseFee`:
	err = decoder.Decode(&obj.PartnerBaseFee)
	if err != nil {
		return errors.NewField("PartnerBaseFee", err)
	}
	// Deserialize `PartnerQuoteFee`:
	err = decoder.Decode(&obj.PartnerQuoteFee)
	if err != nil {
		return errors.NewField("PartnerQuoteFee", err)
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return errors.NewField("SqrtPrice", err)
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Deserialize `IsMigrated`:
	err = decoder.Decode(&obj.IsMigrated)
	if err != nil {
		return errors.NewField("IsMigrated", err)
	}
	// Deserialize `IsPartnerWithdrawSurplus`:
	err = decoder.Decode(&obj.IsPartnerWithdrawSurplus)
	if err != nil {
		return errors.NewField("IsPartnerWithdrawSurplus", err)
	}
	// Deserialize `IsProtocolWithdrawSurplus`:
	err = decoder.Decode(&obj.IsProtocolWithdrawSurplus)
	if err != nil {
		return errors.NewField("IsProtocolWithdrawSurplus", err)
	}
	// Deserialize `MigrationProgress`:
	err = decoder.Decode(&obj.MigrationProgress)
	if err != nil {
		return errors.NewField("MigrationProgress", err)
	}
	// Deserialize `IsWithdrawLeftover`:
	err = decoder.Decode(&obj.IsWithdrawLeftover)
	if err != nil {
		return errors.NewField("IsWithdrawLeftover", err)
	}
	// Deserialize `IsCreatorWithdrawSurplus`:
	err = decoder.Decode(&obj.IsCreatorWithdrawSurplus)
	if err != nil {
		return errors.NewField("IsCreatorWithdrawSurplus", err)
	}
	// Deserialize `MigrationFeeWithdrawStatus`:
	err = decoder.Decode(&obj.MigrationFeeWithdrawStatus)
	if err != nil {
		return errors.NewField("MigrationFeeWithdrawStatus", err)
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return errors.NewField("Metrics", err)
	}
	// Deserialize `FinishCurveTimestamp`:
	err = decoder.Decode(&obj.FinishCurveTimestamp)
	if err != nil {
		return errors.NewField("FinishCurveTimestamp", err)
	}
	// Deserialize `CreatorBaseFee`:
	err = decoder.Decode(&obj.CreatorBaseFee)
	if err != nil {
		return errors.NewField("CreatorBaseFee", err)
	}
	// Deserialize `CreatorQuoteFee`:
	err = decoder.Decode(&obj.CreatorQuoteFee)
	if err != nil {
		return errors.NewField("CreatorQuoteFee", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *VirtualPool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VirtualPool: %w", err)
	}
	return nil
}

func UnmarshalVirtualPool(buf []byte) (*VirtualPool, error) {
	obj := new(VirtualPool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Metadata for a virtual pool.
type VirtualPoolMetadata struct {
	// virtual pool
	VirtualPool solanago.PublicKey `json:"virtualPool"`

	// padding for future use
	Padding [6]binary.Uint128 `json:"padding"`

	// Name of project.
	Name string `json:"name"`

	// Website of project.
	Website string `json:"website"`

	// Logo of project
	Logo string `json:"logo"`
}

func (obj VirtualPoolMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VirtualPool`:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Website`:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Serialize `Logo`:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj VirtualPoolMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VirtualPoolMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VirtualPoolMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return errors.NewField("VirtualPool", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return errors.NewField("Website", err)
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return errors.NewField("Logo", err)
	}
	return nil
}

func (obj *VirtualPoolMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VirtualPoolMetadata: %w", err)
	}
	return nil
}

func UnmarshalVirtualPoolMetadata(buf []byte) (*VirtualPoolMetadata, error) {
	obj := new(VirtualPoolMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VolatilityTracker struct {
	LastUpdateTimestamp   uint64         `json:"lastUpdateTimestamp"`
	Padding               [8]uint8       `json:"padding"`
	SqrtPriceReference    binary.Uint128 `json:"sqrtPriceReference"`
	VolatilityAccumulator binary.Uint128 `json:"volatilityAccumulator"`
	VolatilityReference   binary.Uint128 `json:"volatilityReference"`
}

func (obj VolatilityTracker) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastUpdateTimestamp`:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return errors.NewField("LastUpdateTimestamp", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `SqrtPriceReference`:
	err = encoder.Encode(obj.SqrtPriceReference)
	if err != nil {
		return errors.NewField("SqrtPriceReference", err)
	}
	// Serialize `VolatilityAccumulator`:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return errors.NewField("VolatilityAccumulator", err)
	}
	// Serialize `VolatilityReference`:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return errors.NewField("VolatilityReference", err)
	}
	return nil
}

func (obj VolatilityTracker) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VolatilityTracker: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VolatilityTracker) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return errors.NewField("LastUpdateTimestamp", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `SqrtPriceReference`:
	err = decoder.Decode(&obj.SqrtPriceReference)
	if err != nil {
		return errors.NewField("SqrtPriceReference", err)
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return errors.NewField("VolatilityAccumulator", err)
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return errors.NewField("VolatilityReference", err)
	}
	return nil
}

func (obj *VolatilityTracker) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VolatilityTracker: %w", err)
	}
	return nil
}

func UnmarshalVolatilityTracker(buf []byte) (*VolatilityTracker, error) {
	obj := new(VolatilityTracker)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
