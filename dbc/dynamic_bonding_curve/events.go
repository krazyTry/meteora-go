// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package dynamic_bonding_curve

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_EvtClaimCreatorTradingFee:
		value := new(EvtClaimCreatorTradingFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimCreatorTradingFee: %w", err)
		}
		return value, nil
	case Event_EvtClaimProtocolFee:
		value := new(EvtClaimProtocolFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimProtocolFee: %w", err)
		}
		return value, nil
	case Event_EvtClaimTradingFee:
		value := new(EvtClaimTradingFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtClaimTradingFee: %w", err)
		}
		return value, nil
	case Event_EvtCloseClaimFeeOperator:
		value := new(EvtCloseClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCloseClaimFeeOperator: %w", err)
		}
		return value, nil
	case Event_EvtCreateClaimFeeOperator:
		value := new(EvtCreateClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateClaimFeeOperator: %w", err)
		}
		return value, nil
	case Event_EvtCreateConfig:
		value := new(EvtCreateConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateConfig: %w", err)
		}
		return value, nil
	case Event_EvtCreateConfigV2:
		value := new(EvtCreateConfigV2)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateConfigV2: %w", err)
		}
		return value, nil
	case Event_EvtCreateDammV2MigrationMetadata:
		value := new(EvtCreateDammV2MigrationMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateDammV2MigrationMetadata: %w", err)
		}
		return value, nil
	case Event_EvtCreateMeteoraMigrationMetadata:
		value := new(EvtCreateMeteoraMigrationMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreateMeteoraMigrationMetadata: %w", err)
		}
		return value, nil
	case Event_EvtCreatorWithdrawSurplus:
		value := new(EvtCreatorWithdrawSurplus)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCreatorWithdrawSurplus: %w", err)
		}
		return value, nil
	case Event_EvtCurveComplete:
		value := new(EvtCurveComplete)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtCurveComplete: %w", err)
		}
		return value, nil
	case Event_EvtInitializePool:
		value := new(EvtInitializePool)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtInitializePool: %w", err)
		}
		return value, nil
	case Event_EvtPartnerMetadata:
		value := new(EvtPartnerMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtPartnerMetadata: %w", err)
		}
		return value, nil
	case Event_EvtPartnerWithdrawMigrationFee:
		value := new(EvtPartnerWithdrawMigrationFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtPartnerWithdrawMigrationFee: %w", err)
		}
		return value, nil
	case Event_EvtPartnerWithdrawSurplus:
		value := new(EvtPartnerWithdrawSurplus)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtPartnerWithdrawSurplus: %w", err)
		}
		return value, nil
	case Event_EvtProtocolWithdrawSurplus:
		value := new(EvtProtocolWithdrawSurplus)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtProtocolWithdrawSurplus: %w", err)
		}
		return value, nil
	case Event_EvtSwap:
		value := new(EvtSwap)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtSwap: %w", err)
		}
		return value, nil
	case Event_EvtUpdatePoolCreator:
		value := new(EvtUpdatePoolCreator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtUpdatePoolCreator: %w", err)
		}
		return value, nil
	case Event_EvtVirtualPoolMetadata:
		value := new(EvtVirtualPoolMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtVirtualPoolMetadata: %w", err)
		}
		return value, nil
	case Event_EvtWithdrawLeftover:
		value := new(EvtWithdrawLeftover)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtWithdrawLeftover: %w", err)
		}
		return value, nil
	case Event_EvtWithdrawMigrationFee:
		value := new(EvtWithdrawMigrationFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EvtWithdrawMigrationFee: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_EvtClaimCreatorTradingFee(eventData []byte) (*EvtClaimCreatorTradingFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimCreatorTradingFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimCreatorTradingFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimCreatorTradingFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimCreatorTradingFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClaimProtocolFee(eventData []byte) (*EvtClaimProtocolFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimProtocolFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimProtocolFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimProtocolFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimProtocolFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtClaimTradingFee(eventData []byte) (*EvtClaimTradingFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtClaimTradingFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtClaimTradingFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtClaimTradingFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtClaimTradingFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCloseClaimFeeOperator(eventData []byte) (*EvtCloseClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCloseClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCloseClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCloseClaimFeeOperator)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCloseClaimFeeOperator: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateClaimFeeOperator(eventData []byte) (*EvtCreateClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateClaimFeeOperator)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateClaimFeeOperator: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateConfig(eventData []byte) (*EvtCreateConfig, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateConfig, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateConfig)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateConfig: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateConfigV2(eventData []byte) (*EvtCreateConfigV2, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateConfigV2 {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateConfigV2, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateConfigV2)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateConfigV2: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateDammV2MigrationMetadata(eventData []byte) (*EvtCreateDammV2MigrationMetadata, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateDammV2MigrationMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateDammV2MigrationMetadata, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateDammV2MigrationMetadata)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateDammV2MigrationMetadata: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreateMeteoraMigrationMetadata(eventData []byte) (*EvtCreateMeteoraMigrationMetadata, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreateMeteoraMigrationMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreateMeteoraMigrationMetadata, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreateMeteoraMigrationMetadata)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreateMeteoraMigrationMetadata: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCreatorWithdrawSurplus(eventData []byte) (*EvtCreatorWithdrawSurplus, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCreatorWithdrawSurplus {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCreatorWithdrawSurplus, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCreatorWithdrawSurplus)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCreatorWithdrawSurplus: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtCurveComplete(eventData []byte) (*EvtCurveComplete, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtCurveComplete {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtCurveComplete, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtCurveComplete)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtCurveComplete: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtInitializePool(eventData []byte) (*EvtInitializePool, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtInitializePool {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtInitializePool, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtInitializePool)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtInitializePool: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtPartnerMetadata(eventData []byte) (*EvtPartnerMetadata, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtPartnerMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtPartnerMetadata, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtPartnerMetadata)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtPartnerMetadata: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtPartnerWithdrawMigrationFee(eventData []byte) (*EvtPartnerWithdrawMigrationFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtPartnerWithdrawMigrationFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtPartnerWithdrawMigrationFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtPartnerWithdrawMigrationFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtPartnerWithdrawMigrationFee: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtPartnerWithdrawSurplus(eventData []byte) (*EvtPartnerWithdrawSurplus, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtPartnerWithdrawSurplus {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtPartnerWithdrawSurplus, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtPartnerWithdrawSurplus)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtPartnerWithdrawSurplus: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtProtocolWithdrawSurplus(eventData []byte) (*EvtProtocolWithdrawSurplus, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtProtocolWithdrawSurplus {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtProtocolWithdrawSurplus, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtProtocolWithdrawSurplus)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtProtocolWithdrawSurplus: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtSwap(eventData []byte) (*EvtSwap, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtSwap {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtSwap, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtSwap)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtSwap: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtUpdatePoolCreator(eventData []byte) (*EvtUpdatePoolCreator, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtUpdatePoolCreator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtUpdatePoolCreator, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtUpdatePoolCreator)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtUpdatePoolCreator: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtVirtualPoolMetadata(eventData []byte) (*EvtVirtualPoolMetadata, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtVirtualPoolMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtVirtualPoolMetadata, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtVirtualPoolMetadata)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtVirtualPoolMetadata: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtWithdrawLeftover(eventData []byte) (*EvtWithdrawLeftover, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtWithdrawLeftover {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtWithdrawLeftover, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtWithdrawLeftover)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtWithdrawLeftover: %w", err)
	}
	return event, nil
}

func ParseEvent_EvtWithdrawMigrationFee(eventData []byte) (*EvtWithdrawMigrationFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EvtWithdrawMigrationFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EvtWithdrawMigrationFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(EvtWithdrawMigrationFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EvtWithdrawMigrationFee: %w", err)
	}
	return event, nil
}
