// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package dynamic_bonding_curve

import (
	"fmt"

	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_ClaimFeeOperator:
		value := new(ClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ClaimFeeOperator: %w", err)
		}
		return value, nil
	case Account_Config:
		value := new(Config)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Config: %w", err)
		}
		return value, nil
	case Account_LockEscrow:
		value := new(LockEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as LockEscrow: %w", err)
		}
		return value, nil
	case Account_MeteoraDammMigrationMetadata:
		value := new(MeteoraDammMigrationMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as MeteoraDammMigrationMetadata: %w", err)
		}
		return value, nil
	case Account_MeteoraDammV2Metadata:
		value := new(MeteoraDammV2Metadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as MeteoraDammV2Metadata: %w", err)
		}
		return value, nil
	case Account_PartnerMetadata:
		value := new(PartnerMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PartnerMetadata: %w", err)
		}
		return value, nil
	case Account_PoolConfig:
		value := new(PoolConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PoolConfig: %w", err)
		}
		return value, nil
	case Account_VirtualPool:
		value := new(VirtualPool)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as VirtualPool: %w", err)
		}
		return value, nil
	case Account_VirtualPoolMetadata:
		value := new(VirtualPoolMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as VirtualPoolMetadata: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_ClaimFeeOperator(accountData []byte) (*ClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ClaimFeeOperator)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ClaimFeeOperator: %w", err)
	}
	return acc, nil
}

func ParseAccount_Config(accountData []byte) (*Config, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Config {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Config, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Config)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Config: %w", err)
	}
	return acc, nil
}

func ParseAccount_LockEscrow(accountData []byte) (*LockEscrow, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_LockEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_LockEscrow, binary.FormatDiscriminator(discriminator))
	}
	acc := new(LockEscrow)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type LockEscrow: %w", err)
	}
	return acc, nil
}

func ParseAccount_MeteoraDammMigrationMetadata(accountData []byte) (*MeteoraDammMigrationMetadata, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_MeteoraDammMigrationMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_MeteoraDammMigrationMetadata, binary.FormatDiscriminator(discriminator))
	}
	acc := new(MeteoraDammMigrationMetadata)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type MeteoraDammMigrationMetadata: %w", err)
	}
	return acc, nil
}

func ParseAccount_MeteoraDammV2Metadata(accountData []byte) (*MeteoraDammV2Metadata, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_MeteoraDammV2Metadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_MeteoraDammV2Metadata, binary.FormatDiscriminator(discriminator))
	}
	acc := new(MeteoraDammV2Metadata)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type MeteoraDammV2Metadata: %w", err)
	}
	return acc, nil
}

func ParseAccount_PartnerMetadata(accountData []byte) (*PartnerMetadata, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PartnerMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PartnerMetadata, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PartnerMetadata)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PartnerMetadata: %w", err)
	}
	return acc, nil
}

func ParseAccount_PoolConfig(accountData []byte) (*PoolConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PoolConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PoolConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PoolConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PoolConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_VirtualPool(accountData []byte) (*VirtualPool, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_VirtualPool {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_VirtualPool, binary.FormatDiscriminator(discriminator))
	}
	acc := new(VirtualPool)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type VirtualPool: %w", err)
	}
	return acc, nil
}

func ParseAccount_VirtualPoolMetadata(accountData []byte) (*VirtualPoolMetadata, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_VirtualPoolMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_VirtualPoolMetadata, binary.FormatDiscriminator(discriminator))
	}
	acc := new(VirtualPoolMetadata)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type VirtualPoolMetadata: %w", err)
	}
	return acc, nil
}
