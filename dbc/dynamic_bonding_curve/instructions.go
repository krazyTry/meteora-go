// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains instructions.

package dynamic_bonding_curve

import (
	"bytes"
	"fmt"

	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "claim_creator_trading_fee" instruction.
func NewClaimCreatorTradingFeeInstruction(
	// Params:
	maxBaseAmountParam uint64,
	maxQuoteAmountParam uint64,

	// Accounts:
	poolAuthorityAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	tokenAAccountAccount solanago.PublicKey,
	tokenBAccountAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	tokenBaseProgramAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_ClaimCreatorTradingFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `maxBaseAmountParam`:
		err = enc__.Encode(maxBaseAmountParam)
		if err != nil {
			return nil, errors.NewField("maxBaseAmountParam", err)
		}
		// Serialize `maxQuoteAmountParam`:
		err = enc__.Encode(maxQuoteAmountParam)
		if err != nil {
			return nil, errors.NewField("maxQuoteAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 2 "token_a_account": Writable, Non-signer, Required
		// The treasury token a account
		accounts__.Append(solanago.NewAccountMeta(tokenAAccountAccount, true, false))
		// Account 3 "token_b_account": Writable, Non-signer, Required
		// The treasury token b account
		accounts__.Append(solanago.NewAccountMeta(tokenBAccountAccount, true, false))
		// Account 4 "base_vault": Writable, Non-signer, Required
		// The vault token account for input token
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 5 "quote_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 6 "base_mint": Read-only, Non-signer, Required
		// The mint of token a
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 7 "quote_mint": Read-only, Non-signer, Required
		// The mint of token b
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 8 "creator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, true))
		// Account 9 "token_base_program": Read-only, Non-signer, Required
		// Token a program
		accounts__.Append(solanago.NewAccountMeta(tokenBaseProgramAccount, false, false))
		// Account 10 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 11 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 12 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "claim_protocol_fee" instruction.
func NewClaimProtocolFeeInstruction(
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	tokenBaseAccountAccount solanago.PublicKey,
	tokenQuoteAccountAccount solanago.PublicKey,
	claimFeeOperatorAccount solanago.PublicKey,
	operatorAccount solanago.PublicKey,
	tokenBaseProgramAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_ClaimProtocolFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 3 "base_vault": Writable, Non-signer, Required
		// The vault token account for input token
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "base_mint": Read-only, Non-signer, Required
		// The mint of token a
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 6 "quote_mint": Read-only, Non-signer, Required
		// The mint of token b
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 7 "token_base_account": Writable, Non-signer, Required
		// The treasury token a account
		accounts__.Append(solanago.NewAccountMeta(tokenBaseAccountAccount, true, false))
		// Account 8 "token_quote_account": Writable, Non-signer, Required
		// The treasury token b account
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteAccountAccount, true, false))
		// Account 9 "claim_fee_operator": Read-only, Non-signer, Required
		// Claim fee operator
		accounts__.Append(solanago.NewAccountMeta(claimFeeOperatorAccount, false, false))
		// Account 10 "operator": Read-only, Signer, Required
		// Operator
		accounts__.Append(solanago.NewAccountMeta(operatorAccount, false, true))
		// Account 11 "token_base_program": Read-only, Non-signer, Required
		// Token a program
		accounts__.Append(solanago.NewAccountMeta(tokenBaseProgramAccount, false, false))
		// Account 12 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 13 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 14 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "claim_trading_fee" instruction.
func NewClaimTradingFeeInstruction(
	// Params:
	maxAmountAParam uint64,
	maxAmountBParam uint64,

	// Accounts:
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	tokenAAccountAccount solanago.PublicKey,
	tokenBAccountAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	feeClaimerAccount solanago.PublicKey,
	tokenBaseProgramAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_ClaimTradingFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `maxAmountAParam`:
		err = enc__.Encode(maxAmountAParam)
		if err != nil {
			return nil, errors.NewField("maxAmountAParam", err)
		}
		// Serialize `maxAmountBParam`:
		err = enc__.Encode(maxAmountBParam)
		if err != nil {
			return nil, errors.NewField("maxAmountBParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 3 "token_a_account": Writable, Non-signer, Required
		// The treasury token a account
		accounts__.Append(solanago.NewAccountMeta(tokenAAccountAccount, true, false))
		// Account 4 "token_b_account": Writable, Non-signer, Required
		// The treasury token b account
		accounts__.Append(solanago.NewAccountMeta(tokenBAccountAccount, true, false))
		// Account 5 "base_vault": Writable, Non-signer, Required
		// The vault token account for input token
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 6 "quote_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 7 "base_mint": Read-only, Non-signer, Required
		// The mint of token a
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 8 "quote_mint": Read-only, Non-signer, Required
		// The mint of token b
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 9 "fee_claimer": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeClaimerAccount, false, true))
		// Account 10 "token_base_program": Read-only, Non-signer, Required
		// Token a program
		accounts__.Append(solanago.NewAccountMeta(tokenBaseProgramAccount, false, false))
		// Account 11 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 12 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 13 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "close_claim_fee_operator" instruction.
func NewCloseClaimFeeOperatorInstruction(
	claimFeeOperatorAccount solanago.PublicKey,
	rentReceiverAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CloseClaimFeeOperator[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "claim_fee_operator": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(claimFeeOperatorAccount, true, false))
		// Account 1 "rent_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentReceiverAccount, true, false))
		// Account 2 "admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
		// Account 3 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 4 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_claim_fee_operator" instruction.
// ADMIN FUNCTIONS ///
func NewCreateClaimFeeOperatorInstruction(
	claimFeeOperatorAccount solanago.PublicKey,
	operatorAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateClaimFeeOperator[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "claim_fee_operator": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(claimFeeOperatorAccount, true, false))
		// Account 1 "operator": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(operatorAccount, false, false))
		// Account 2 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 3 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 4 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 5 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_config" instruction.
func NewCreateConfigInstruction(
	// Params:
	configParametersParam *ConfigParameters,

	// Accounts:
	configAccount solanago.PublicKey,
	feeClaimerAccount solanago.PublicKey,
	leftoverReceiverAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `configParametersParam`:
		err = enc__.Encode(configParametersParam)
		if err != nil {
			return nil, errors.NewField("configParametersParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "config": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, true, true))
		// Account 1 "fee_claimer": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeClaimerAccount, false, false))
		// Account 2 "leftover_receiver": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(leftoverReceiverAccount, false, false))
		// Account 3 "quote_mint": Read-only, Non-signer, Required
		// quote mint
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 4 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 5 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 6 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 7 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_locker" instruction.
// PERMISSIONLESS FUNCTIONS /// // create locker
func NewCreateLockerInstruction(
	virtualPoolAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	baseAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	escrowAccount solanago.PublicKey,
	escrowTokenAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	lockerProgramAccount solanago.PublicKey,
	lockerEventAuthorityAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {

	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateLocker[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Instruction_CreateLocker
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Writable, Non-signer, Required
		// Virtual pool
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 1 "config": Read-only, Non-signer, Required
		// Config
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "pool_authority": Writable, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, true, false))
		// Account 3 "base_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 4 "base_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, true, false))
		// Account 5 "base": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseAccount, true, false))
		// Account 6 "creator": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, false))
		// Account 7 "escrow": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(escrowAccount, true, false))
		// Account 8 "escrow_token": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(escrowTokenAccount, true, false))
		// Account 9 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 10 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 11 "locker_program": Read-only, Non-signer, Required, Address: LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn
		accounts__.Append(solanago.NewAccountMeta(lockerProgramAccount, false, false))
		// Account 12 "locker_event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lockerEventAuthorityAccount, false, false))
		// Account 13 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_partner_metadata" instruction.
// PARTNER FUNCTIONS ////
func NewCreatePartnerMetadataInstruction(
	// Params:
	metadataParam CreatePartnerMetadataParameters,

	// Accounts:
	partnerMetadataAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	feeClaimerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreatePartnerMetadata[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `metadataParam`:
		err = enc__.Encode(metadataParam)
		if err != nil {
			return nil, errors.NewField("metadataParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "partner_metadata": Writable, Non-signer, Required
		// Partner metadata
		accounts__.Append(solanago.NewAccountMeta(partnerMetadataAccount, true, false))
		// Account 1 "payer": Writable, Signer, Required
		// Payer of the partner metadata.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 2 "fee_claimer": Read-only, Signer, Required
		// Fee claimer for partner
		accounts__.Append(solanago.NewAccountMeta(feeClaimerAccount, false, true))
		// Account 3 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 4 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 5 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_virtual_pool_metadata" instruction.
func NewCreateVirtualPoolMetadataInstruction(
	// Params:
	metadataParam CreateVirtualPoolMetadataParameters,

	// Accounts:
	virtualPoolAccount solanago.PublicKey,
	virtualPoolMetadataAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateVirtualPoolMetadata[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `metadataParam`:
		err = enc__.Encode(metadataParam)
		if err != nil {
			return nil, errors.NewField("metadataParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 1 "virtual_pool_metadata": Writable, Non-signer, Required
		// Virtual pool metadata
		accounts__.Append(solanago.NewAccountMeta(virtualPoolMetadataAccount, true, false))
		// Account 2 "creator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, true))
		// Account 3 "payer": Writable, Signer, Required
		// Payer of the virtual pool metadata.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 4 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 5 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 6 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "creator_withdraw_surplus" instruction.
func NewCreatorWithdrawSurplusInstruction(
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	virtualPoolAccount solanago.PublicKey,
	tokenQuoteAccountAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreatorWithdrawSurplus[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 3 "token_quote_account": Writable, Non-signer, Required
		// The receiver token account
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteAccountAccount, true, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 6 "creator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, true))
		// Account 7 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 8 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 9 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize_virtual_pool_with_spl_token" instruction.
// POOL CREATOR FUNCTIONS ////
func NewInitializeVirtualPoolWithSplTokenInstruction(
	// Params:
	paramsParam InitializePoolParameters,

	// Accounts:
	configAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializeVirtualPoolWithSplToken[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "config": Read-only, Non-signer, Required
		// Which config the pool belongs to.
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 1 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 2 "creator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, true))
		// Account 3 "base_mint": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, true, true))
		// Account 4 "quote_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		// Initialize an account to store the pool state
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "base_vault": Writable, Non-signer, Required
		// Token a vault for the pool
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 7 "quote_vault": Writable, Non-signer, Required
		// Token b vault for the pool
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 8 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 9 "metadata_program": Read-only, Non-signer, Required, Address: metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 10 "payer": Writable, Signer, Required
		// Address paying to create the pool. Can be anyone
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 11 "token_quote_program": Read-only, Non-signer, Required
		// Program to create mint account and mint tokens
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 12 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 13 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 14 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 15 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize_virtual_pool_with_token2022" instruction.
func NewInitializeVirtualPoolWithToken2022Instruction(
	// Params:
	paramsParam InitializePoolParameters,

	// Accounts:
	configAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializeVirtualPoolWithToken2022[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "config": Read-only, Non-signer, Required
		// Which config the pool belongs to.
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 1 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 2 "creator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, true))
		// Account 3 "base_mint": Writable, Signer, Required
		// Unique token mint address, initialize in contract
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, true, true))
		// Account 4 "quote_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		// Initialize an account to store the pool state
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "base_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 7 "quote_vault": Writable, Non-signer, Required
		// Token quote vault for the pool
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 8 "payer": Writable, Signer, Required
		// Address paying to create the pool. Can be anyone
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 9 "token_quote_program": Read-only, Non-signer, Required
		// Program to create mint account and mint tokens
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 10 "token_program": Read-only, Non-signer, Required, Address: TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb
		// token program for base mint
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 11 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 12 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 13 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migrate_meteora_damm" instruction.
func NewMigrateMeteoraDammInstruction(
	virtualPoolAccount solanago.PublicKey,
	migrationMetadataAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	dammConfigAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	virtualPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	ammProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrateMeteoraDamm[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Writable, Non-signer, Required
		// virtual pool
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 1 "migration_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(migrationMetadataAccount, true, false))
		// Account 2 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 3 "pool_authority": Writable, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, true, false))
		// Account 4 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 5 "damm_config": Read-only, Non-signer, Required
		// pool config
		accounts__.Append(solanago.NewAccountMeta(dammConfigAccount, false, false))
		// Account 6 "lp_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 7 "token_a_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, true, false))
		// Account 8 "token_b_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 9 "a_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 10 "b_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 11 "a_token_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 12 "b_token_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 13 "a_vault_lp_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 14 "b_vault_lp_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 15 "a_vault_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 16 "b_vault_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 17 "base_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 18 "quote_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 19 "virtual_pool_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolLpAccount, true, false))
		// Account 20 "protocol_token_a_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 21 "protocol_token_b_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 22 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 23 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 24 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 25 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 26 "amm_program": Read-only, Non-signer, Required, Address: Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB
		accounts__.Append(solanago.NewAccountMeta(ammProgramAccount, false, false))
		// Account 27 "vault_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 28 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// token_program
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 29 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 30 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migrate_meteora_damm_claim_lp_token" instruction.
func NewMigrateMeteoraDammClaimLpTokenInstruction(
	virtualPoolAccount solanago.PublicKey,
	migrationMetadataAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	sourceTokenAccount solanago.PublicKey,
	destinationTokenAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	senderAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrateMeteoraDammClaimLpToken[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, false, false))
		// Account 1 "migration_metadata": Writable, Non-signer, Required
		// migration metadata
		accounts__.Append(solanago.NewAccountMeta(migrationMetadataAccount, true, false))
		// Account 2 "pool_authority": Writable, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, true, false))
		// Account 3 "lp_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 4 "source_token": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(sourceTokenAccount, true, false))
		// Account 5 "destination_token": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(destinationTokenAccount, true, false))
		// Account 6 "owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, false))
		// Account 7 "sender": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(senderAccount, false, true))
		// Account 8 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// token_program
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migrate_meteora_damm_lock_lp_token" instruction.
func NewMigrateMeteoraDammLockLpTokenInstruction(
	virtualPoolAccount solanago.PublicKey,
	migrationMetadataAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	lockEscrowAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	sourceTokensAccount solanago.PublicKey,
	escrowVaultAccount solanago.PublicKey,
	ammProgramAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrateMeteoraDammLockLpToken[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, false, false))
		// Account 1 "migration_metadata": Writable, Non-signer, Required
		// migration_metadata
		accounts__.Append(solanago.NewAccountMeta(migrationMetadataAccount, true, false))
		// Account 2 "pool_authority": Writable, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, true, false))
		// Account 3 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 4 "lp_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 5 "lock_escrow": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lockEscrowAccount, true, false))
		// Account 6 "owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, false))
		// Account 7 "source_tokens": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(sourceTokensAccount, true, false))
		// Account 8 "escrow_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(escrowVaultAccount, true, false))
		// Account 9 "amm_program": Read-only, Non-signer, Required, Address: Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB
		accounts__.Append(solanago.NewAccountMeta(ammProgramAccount, false, false))
		// Account 10 "a_vault": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, false, false))
		// Account 11 "b_vault": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, false, false))
		// Account 12 "a_vault_lp": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 13 "b_vault_lp": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, false, false))
		// Account 14 "a_vault_lp_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, false, false))
		// Account 15 "b_vault_lp_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, false, false))
		// Account 16 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// token_program
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migration_damm_v2" instruction.
func NewMigrationDammV2Instruction(
	virtualPoolAccount solanago.PublicKey,
	migrationMetadataAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	poolAuthorityAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	firstPositionNftMintAccount solanago.PublicKey,
	firstPositionNftAccountAccount solanago.PublicKey,
	firstPositionAccount solanago.PublicKey,
	secondPositionNftMintAccount solanago.PublicKey,
	secondPositionNftAccountAccount solanago.PublicKey,
	secondPositionAccount solanago.PublicKey,
	dammPoolAuthorityAccount solanago.PublicKey,
	ammProgramAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	tokenAVaultAccount solanago.PublicKey,
	tokenBVaultAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	tokenBaseProgramAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	token2022ProgramAccount solanago.PublicKey,
	dammEventAuthorityAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	remainingAccounts []*solanago.AccountMeta,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrationDammV2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Writable, Non-signer, Required
		// virtual pool
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 1 "migration_metadata": Read-only, Non-signer, Required
		// migration metadata
		accounts__.Append(solanago.NewAccountMeta(migrationMetadataAccount, false, false))
		// Account 2 "config": Read-only, Non-signer, Required
		// virtual pool config key
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 3 "pool_authority": Writable, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, true, false))
		// Account 4 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 5 "first_position_nft_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(firstPositionNftMintAccount, true, true))
		// Account 6 "first_position_nft_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(firstPositionNftAccountAccount, true, false))
		// Account 7 "first_position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(firstPositionAccount, true, false))
		// Account 8 "second_position_nft_mint": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(secondPositionNftMintAccount, true, true))
		// Account 9 "second_position_nft_account": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(secondPositionNftAccountAccount, true, false))
		// Account 10 "second_position": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(secondPositionAccount, true, false))
		// Account 11 "damm_pool_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dammPoolAuthorityAccount, false, false))
		// Account 12 "amm_program": Read-only, Non-signer, Required, Address: cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG
		accounts__.Append(solanago.NewAccountMeta(ammProgramAccount, false, false))
		// Account 13 "base_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, true, false))
		// Account 14 "quote_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, true, false))
		// Account 15 "token_a_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenAVaultAccount, true, false))
		// Account 16 "token_b_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenBVaultAccount, true, false))
		// Account 17 "base_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 18 "quote_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 19 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 20 "token_base_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenBaseProgramAccount, false, false))
		// Account 21 "token_quote_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 22 "token_2022_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(token2022ProgramAccount, false, false))
		// Account 23 "damm_event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dammEventAuthorityAccount, false, false))
		// Account 24 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	for _, v := range remainingAccounts {
		accounts__.Append(v)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migration_damm_v2_create_metadata" instruction.
func NewMigrationDammV2CreateMetadataInstruction(
	virtualPoolAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	migrationMetadataAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrationDammV2CreateMetadata[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "migration_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(migrationMetadataAccount, true, false))
		// Account 3 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 4 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 5 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 6 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migration_meteora_damm_create_metadata" instruction.
// migrate damm v1
func NewMigrationMeteoraDammCreateMetadataInstruction(
	virtualPoolAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	migrationMetadataAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrationMeteoraDammCreateMetadata[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "migration_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(migrationMetadataAccount, true, false))
		// Account 3 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 4 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 5 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 6 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "partner_withdraw_surplus" instruction.
func NewPartnerWithdrawSurplusInstruction(
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	virtualPoolAccount solanago.PublicKey,
	tokenQuoteAccountAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	feeClaimerAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_PartnerWithdrawSurplus[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 3 "token_quote_account": Writable, Non-signer, Required
		// The receiver token account
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteAccountAccount, true, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 6 "fee_claimer": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeClaimerAccount, false, true))
		// Account 7 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 8 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 9 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "protocol_withdraw_surplus" instruction.
func NewProtocolWithdrawSurplusInstruction(
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	virtualPoolAccount solanago.PublicKey,
	tokenQuoteAccountAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_ProtocolWithdrawSurplus[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 3 "token_quote_account": Writable, Non-signer, Required
		// The treasury quote token account
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteAccountAccount, true, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The vault token account for quote token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "quote_mint": Read-only, Non-signer, Required
		// The mint of token
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 6 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 7 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 8 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "swap" instruction.
// TRADING BOTS FUNCTIONS ////
func NewSwapInstruction(
	// Params:
	paramsParam SwapParameters,

	// Accounts:
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	inputTokenAccountAccount solanago.PublicKey,
	outputTokenAccountAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	tokenBaseProgramAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	referralTokenAccountAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
	remainingAccounts []*solanago.AccountMeta,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Swap[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		// config key
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		// Pool account
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 3 "input_token_account": Writable, Non-signer, Required
		// The user token account for input token
		accounts__.Append(solanago.NewAccountMeta(inputTokenAccountAccount, true, false))
		// Account 4 "output_token_account": Writable, Non-signer, Required
		// The user token account for output token
		accounts__.Append(solanago.NewAccountMeta(outputTokenAccountAccount, true, false))
		// Account 5 "base_vault": Writable, Non-signer, Required
		// The vault token account for base token
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 6 "quote_vault": Writable, Non-signer, Required
		// The vault token account for quote token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 7 "base_mint": Read-only, Non-signer, Required
		// The mint of base token
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 8 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 9 "payer": Read-only, Signer, Required
		// The user performing the swap
		accounts__.Append(solanago.NewAccountMeta(payerAccount, false, true))
		// Account 10 "token_base_program": Read-only, Non-signer, Required
		// Token base program
		accounts__.Append(solanago.NewAccountMeta(tokenBaseProgramAccount, false, false))
		// Account 11 "token_quote_program": Read-only, Non-signer, Required
		// Token quote program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 12 "referral_token_account": Writable, Non-signer, Optional
		// referral token account
		if referralTokenAccountAccount.Equals(solanago.PublicKey{}) {
			// https://github.com/solana-foundation/anchor/blob/master/ts/packages/anchor/src/program/accounts-resolver.ts#L196
			referralTokenAccountAccount = programAccount
		}
		accounts__.Append(solanago.NewAccountMeta(referralTokenAccountAccount, true, false))
		// Account 13 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 14 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	for _, v := range remainingAccounts {
		accounts__.Append(v)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "transfer_pool_creator" instruction.
func NewTransferPoolCreatorInstruction(
	virtualPoolAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	newCreatorAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_TransferPoolCreator[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "creator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, true))
		// Account 3 "new_creator": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(newCreatorAccount, false, false))
		// Account 4 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 5 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_leftover" instruction.
func NewWithdrawLeftoverInstruction(
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	virtualPoolAccount solanago.PublicKey,
	tokenBaseAccountAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	leftoverReceiverAccount solanago.PublicKey,
	tokenBaseProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_WithdrawLeftover[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 3 "token_base_account": Writable, Non-signer, Required
		// The receiver token account, withdraw to ATA
		accounts__.Append(solanago.NewAccountMeta(tokenBaseAccountAccount, true, false))
		// Account 4 "base_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 5 "base_mint": Read-only, Non-signer, Required
		// The mint of quote token
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 6 "leftover_receiver": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(leftoverReceiverAccount, false, false))
		// Account 7 "token_base_program": Read-only, Non-signer, Required
		// Token base program
		accounts__.Append(solanago.NewAccountMeta(tokenBaseProgramAccount, false, false))
		// Account 8 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 9 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_migration_fee" instruction.
// BOTH partner and creator FUNCTIONS ///
func NewWithdrawMigrationFeeInstruction(
	// Params:
	flagParam uint8,

	// Accounts:
	poolAuthorityAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	virtualPoolAccount solanago.PublicKey,
	tokenQuoteAccountAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	senderAccount solanago.PublicKey,
	tokenQuoteProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_WithdrawMigrationFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `flagParam`:
		err = enc__.Encode(flagParam)
		if err != nil {
			return nil, errors.NewField("flagParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool_authority": Read-only, Non-signer, Required, Address: FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM
		accounts__.Append(solanago.NewAccountMeta(poolAuthorityAccount, false, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "virtual_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(virtualPoolAccount, true, false))
		// Account 3 "token_quote_account": Writable, Non-signer, Required
		// The receiver token account
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteAccountAccount, true, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The vault token account for output token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 6 "sender": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(senderAccount, false, true))
		// Account 7 "token_quote_program": Read-only, Non-signer, Required
		// Token b program
		accounts__.Append(solanago.NewAccountMeta(tokenQuoteProgramAccount, false, false))
		// Account 8 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 9 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}
