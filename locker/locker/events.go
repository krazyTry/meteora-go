// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package locker

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_EventCancelVestingEscrow:
		value := new(EventCancelVestingEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventCancelVestingEscrow: %w", err)
		}
		return value, nil
	case Event_EventCancelVestingEscrowV3:
		value := new(EventCancelVestingEscrowV3)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventCancelVestingEscrowV3: %w", err)
		}
		return value, nil
	case Event_EventClaim:
		value := new(EventClaim)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventClaim: %w", err)
		}
		return value, nil
	case Event_EventClaimV3:
		value := new(EventClaimV3)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventClaimV3: %w", err)
		}
		return value, nil
	case Event_EventCloseClaimStatus:
		value := new(EventCloseClaimStatus)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventCloseClaimStatus: %w", err)
		}
		return value, nil
	case Event_EventCloseVestingEscrow:
		value := new(EventCloseVestingEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventCloseVestingEscrow: %w", err)
		}
		return value, nil
	case Event_EventCreateRootEscrow:
		value := new(EventCreateRootEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventCreateRootEscrow: %w", err)
		}
		return value, nil
	case Event_EventCreateVestingEscrow:
		value := new(EventCreateVestingEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventCreateVestingEscrow: %w", err)
		}
		return value, nil
	case Event_EventFundRootEscrow:
		value := new(EventFundRootEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventFundRootEscrow: %w", err)
		}
		return value, nil
	case Event_EventUpdateVestingEscrowRecipient:
		value := new(EventUpdateVestingEscrowRecipient)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as EventUpdateVestingEscrowRecipient: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_EventCancelVestingEscrow(eventData []byte) (*EventCancelVestingEscrow, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventCancelVestingEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventCancelVestingEscrow, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventCancelVestingEscrow)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventCancelVestingEscrow: %w", err)
	}
	return event, nil
}

func ParseEvent_EventCancelVestingEscrowV3(eventData []byte) (*EventCancelVestingEscrowV3, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventCancelVestingEscrowV3 {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventCancelVestingEscrowV3, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventCancelVestingEscrowV3)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventCancelVestingEscrowV3: %w", err)
	}
	return event, nil
}

func ParseEvent_EventClaim(eventData []byte) (*EventClaim, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventClaim {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventClaim, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventClaim)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventClaim: %w", err)
	}
	return event, nil
}

func ParseEvent_EventClaimV3(eventData []byte) (*EventClaimV3, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventClaimV3 {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventClaimV3, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventClaimV3)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventClaimV3: %w", err)
	}
	return event, nil
}

func ParseEvent_EventCloseClaimStatus(eventData []byte) (*EventCloseClaimStatus, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventCloseClaimStatus {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventCloseClaimStatus, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventCloseClaimStatus)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventCloseClaimStatus: %w", err)
	}
	return event, nil
}

func ParseEvent_EventCloseVestingEscrow(eventData []byte) (*EventCloseVestingEscrow, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventCloseVestingEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventCloseVestingEscrow, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventCloseVestingEscrow)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventCloseVestingEscrow: %w", err)
	}
	return event, nil
}

func ParseEvent_EventCreateRootEscrow(eventData []byte) (*EventCreateRootEscrow, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventCreateRootEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventCreateRootEscrow, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventCreateRootEscrow)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventCreateRootEscrow: %w", err)
	}
	return event, nil
}

func ParseEvent_EventCreateVestingEscrow(eventData []byte) (*EventCreateVestingEscrow, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventCreateVestingEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventCreateVestingEscrow, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventCreateVestingEscrow)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventCreateVestingEscrow: %w", err)
	}
	return event, nil
}

func ParseEvent_EventFundRootEscrow(eventData []byte) (*EventFundRootEscrow, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventFundRootEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventFundRootEscrow, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventFundRootEscrow)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventFundRootEscrow: %w", err)
	}
	return event, nil
}

func ParseEvent_EventUpdateVestingEscrowRecipient(eventData []byte) (*EventUpdateVestingEscrowRecipient, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_EventUpdateVestingEscrowRecipient {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_EventUpdateVestingEscrowRecipient, binary.FormatDiscriminator(discriminator))
	}
	event := new(EventUpdateVestingEscrowRecipient)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type EventUpdateVestingEscrowRecipient: %w", err)
	}
	return event, nil
}
