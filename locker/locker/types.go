// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package locker

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type AccountsType binary.BorshEnum

const (
	AccountsType_TransferHookEscrow AccountsType = iota
)

func (value AccountsType) String() string {
	switch value {
	case AccountsType_TransferHookEscrow:
		return "TransferHookEscrow"
	default:
		return ""
	}
}

type CreateRootEscrowParameters struct {
	MaxClaimAmount uint64    `json:"maxClaimAmount"`
	MaxEscrow      uint64    `json:"maxEscrow"`
	Version        uint64    `json:"version"`
	Root           [32]uint8 `json:"root"`
}

func (obj CreateRootEscrowParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MaxClaimAmount`:
	err = encoder.Encode(obj.MaxClaimAmount)
	if err != nil {
		return errors.NewField("MaxClaimAmount", err)
	}
	// Serialize `MaxEscrow`:
	err = encoder.Encode(obj.MaxEscrow)
	if err != nil {
		return errors.NewField("MaxEscrow", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Root`:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	return nil
}

func (obj CreateRootEscrowParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateRootEscrowParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateRootEscrowParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxClaimAmount`:
	err = decoder.Decode(&obj.MaxClaimAmount)
	if err != nil {
		return errors.NewField("MaxClaimAmount", err)
	}
	// Deserialize `MaxEscrow`:
	err = decoder.Decode(&obj.MaxEscrow)
	if err != nil {
		return errors.NewField("MaxEscrow", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	return nil
}

func (obj *CreateRootEscrowParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateRootEscrowParameters: %w", err)
	}
	return nil
}

func UnmarshalCreateRootEscrowParameters(buf []byte) (*CreateRootEscrowParameters, error) {
	obj := new(CreateRootEscrowParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateVestingEscrowFromRootParams struct {
	VestingStartTime    uint64 `json:"vestingStartTime"`
	CliffTime           uint64 `json:"cliffTime"`
	Frequency           uint64 `json:"frequency"`
	CliffUnlockAmount   uint64 `json:"cliffUnlockAmount"`
	AmountPerPeriod     uint64 `json:"amountPerPeriod"`
	NumberOfPeriod      uint64 `json:"numberOfPeriod"`
	UpdateRecipientMode uint8  `json:"updateRecipientMode"`
	CancelMode          uint8  `json:"cancelMode"`
}

func (obj CreateVestingEscrowFromRootParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VestingStartTime`:
	err = encoder.Encode(obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Serialize `CliffTime`:
	err = encoder.Encode(obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `UpdateRecipientMode`:
	err = encoder.Encode(obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Serialize `CancelMode`:
	err = encoder.Encode(obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	return nil
}

func (obj CreateVestingEscrowFromRootParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateVestingEscrowFromRootParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateVestingEscrowFromRootParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VestingStartTime`:
	err = decoder.Decode(&obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Deserialize `CliffTime`:
	err = decoder.Decode(&obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `UpdateRecipientMode`:
	err = decoder.Decode(&obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Deserialize `CancelMode`:
	err = decoder.Decode(&obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	return nil
}

func (obj *CreateVestingEscrowFromRootParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateVestingEscrowFromRootParams: %w", err)
	}
	return nil
}

func UnmarshalCreateVestingEscrowFromRootParams(buf []byte) (*CreateVestingEscrowFromRootParams, error) {
	obj := new(CreateVestingEscrowFromRootParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateVestingEscrowMetadataParameters struct {
	Name           string `json:"name"`
	Description    string `json:"description"`
	CreatorEmail   string `json:"creatorEmail"`
	RecipientEmail string `json:"recipientEmail"`
}

func (obj CreateVestingEscrowMetadataParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Description`:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return errors.NewField("Description", err)
	}
	// Serialize `CreatorEmail`:
	err = encoder.Encode(obj.CreatorEmail)
	if err != nil {
		return errors.NewField("CreatorEmail", err)
	}
	// Serialize `RecipientEmail`:
	err = encoder.Encode(obj.RecipientEmail)
	if err != nil {
		return errors.NewField("RecipientEmail", err)
	}
	return nil
}

func (obj CreateVestingEscrowMetadataParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateVestingEscrowMetadataParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateVestingEscrowMetadataParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return errors.NewField("Description", err)
	}
	// Deserialize `CreatorEmail`:
	err = decoder.Decode(&obj.CreatorEmail)
	if err != nil {
		return errors.NewField("CreatorEmail", err)
	}
	// Deserialize `RecipientEmail`:
	err = decoder.Decode(&obj.RecipientEmail)
	if err != nil {
		return errors.NewField("RecipientEmail", err)
	}
	return nil
}

func (obj *CreateVestingEscrowMetadataParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateVestingEscrowMetadataParameters: %w", err)
	}
	return nil
}

func UnmarshalCreateVestingEscrowMetadataParameters(buf []byte) (*CreateVestingEscrowMetadataParameters, error) {
	obj := new(CreateVestingEscrowMetadataParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Accounts for [locker::create_vesting_escrow].
type CreateVestingEscrowParameters struct {
	VestingStartTime    uint64 `json:"vestingStartTime"`
	CliffTime           uint64 `json:"cliffTime"`
	Frequency           uint64 `json:"frequency"`
	CliffUnlockAmount   uint64 `json:"cliffUnlockAmount"`
	AmountPerPeriod     uint64 `json:"amountPerPeriod"`
	NumberOfPeriod      uint64 `json:"numberOfPeriod"`
	UpdateRecipientMode uint8  `json:"updateRecipientMode"`
	CancelMode          uint8  `json:"cancelMode"`
}

func (obj CreateVestingEscrowParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VestingStartTime`:
	err = encoder.Encode(obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Serialize `CliffTime`:
	err = encoder.Encode(obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `UpdateRecipientMode`:
	err = encoder.Encode(obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Serialize `CancelMode`:
	err = encoder.Encode(obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	return nil
}

func (obj CreateVestingEscrowParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateVestingEscrowParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateVestingEscrowParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VestingStartTime`:
	err = decoder.Decode(&obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Deserialize `CliffTime`:
	err = decoder.Decode(&obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `UpdateRecipientMode`:
	err = decoder.Decode(&obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Deserialize `CancelMode`:
	err = decoder.Decode(&obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	return nil
}

func (obj *CreateVestingEscrowParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateVestingEscrowParameters: %w", err)
	}
	return nil
}

func UnmarshalCreateVestingEscrowParameters(buf []byte) (*CreateVestingEscrowParameters, error) {
	obj := new(CreateVestingEscrowParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventCancelVestingEscrow struct {
	Escrow          solanago.PublicKey `json:"escrow"`
	Signer          solanago.PublicKey `json:"signer"`
	ClaimableAmount uint64             `json:"claimableAmount"`
	RemainingAmount uint64             `json:"remainingAmount"`
	CancelledAt     uint64             `json:"cancelledAt"`
}

func (obj EventCancelVestingEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Serialize `Signer`:
	err = encoder.Encode(obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	// Serialize `ClaimableAmount`:
	err = encoder.Encode(obj.ClaimableAmount)
	if err != nil {
		return errors.NewField("ClaimableAmount", err)
	}
	// Serialize `RemainingAmount`:
	err = encoder.Encode(obj.RemainingAmount)
	if err != nil {
		return errors.NewField("RemainingAmount", err)
	}
	// Serialize `CancelledAt`:
	err = encoder.Encode(obj.CancelledAt)
	if err != nil {
		return errors.NewField("CancelledAt", err)
	}
	return nil
}

func (obj EventCancelVestingEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventCancelVestingEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventCancelVestingEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Deserialize `Signer`:
	err = decoder.Decode(&obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	// Deserialize `ClaimableAmount`:
	err = decoder.Decode(&obj.ClaimableAmount)
	if err != nil {
		return errors.NewField("ClaimableAmount", err)
	}
	// Deserialize `RemainingAmount`:
	err = decoder.Decode(&obj.RemainingAmount)
	if err != nil {
		return errors.NewField("RemainingAmount", err)
	}
	// Deserialize `CancelledAt`:
	err = decoder.Decode(&obj.CancelledAt)
	if err != nil {
		return errors.NewField("CancelledAt", err)
	}
	return nil
}

func (obj *EventCancelVestingEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventCancelVestingEscrow: %w", err)
	}
	return nil
}

func UnmarshalEventCancelVestingEscrow(buf []byte) (*EventCancelVestingEscrow, error) {
	obj := new(EventCancelVestingEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventCancelVestingEscrowV3 struct {
	Escrow          solanago.PublicKey `json:"escrow"`
	Signer          solanago.PublicKey `json:"signer"`
	RemainingAmount uint64             `json:"remainingAmount"`
	CancelledAt     uint64             `json:"cancelledAt"`
}

func (obj EventCancelVestingEscrowV3) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Serialize `Signer`:
	err = encoder.Encode(obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	// Serialize `RemainingAmount`:
	err = encoder.Encode(obj.RemainingAmount)
	if err != nil {
		return errors.NewField("RemainingAmount", err)
	}
	// Serialize `CancelledAt`:
	err = encoder.Encode(obj.CancelledAt)
	if err != nil {
		return errors.NewField("CancelledAt", err)
	}
	return nil
}

func (obj EventCancelVestingEscrowV3) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventCancelVestingEscrowV3: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventCancelVestingEscrowV3) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Deserialize `Signer`:
	err = decoder.Decode(&obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	// Deserialize `RemainingAmount`:
	err = decoder.Decode(&obj.RemainingAmount)
	if err != nil {
		return errors.NewField("RemainingAmount", err)
	}
	// Deserialize `CancelledAt`:
	err = decoder.Decode(&obj.CancelledAt)
	if err != nil {
		return errors.NewField("CancelledAt", err)
	}
	return nil
}

func (obj *EventCancelVestingEscrowV3) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventCancelVestingEscrowV3: %w", err)
	}
	return nil
}

func UnmarshalEventCancelVestingEscrowV3(buf []byte) (*EventCancelVestingEscrowV3, error) {
	obj := new(EventCancelVestingEscrowV3)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventClaim struct {
	Amount    uint64             `json:"amount"`
	CurrentTs uint64             `json:"currentTs"`
	Escrow    solanago.PublicKey `json:"escrow"`
}

func (obj EventClaim) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `CurrentTs`:
	err = encoder.Encode(obj.CurrentTs)
	if err != nil {
		return errors.NewField("CurrentTs", err)
	}
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	return nil
}

func (obj EventClaim) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventClaim: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventClaim) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `CurrentTs`:
	err = decoder.Decode(&obj.CurrentTs)
	if err != nil {
		return errors.NewField("CurrentTs", err)
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	return nil
}

func (obj *EventClaim) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventClaim: %w", err)
	}
	return nil
}

func UnmarshalEventClaim(buf []byte) (*EventClaim, error) {
	obj := new(EventClaim)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventClaimV3 struct {
	Amount            uint64             `json:"amount"`
	CurrentTs         uint64             `json:"currentTs"`
	Escrow            solanago.PublicKey `json:"escrow"`
	VestingStartTime  uint64             `json:"vestingStartTime"`
	CliffTime         uint64             `json:"cliffTime"`
	Frequency         uint64             `json:"frequency"`
	CliffUnlockAmount uint64             `json:"cliffUnlockAmount"`
	AmountPerPeriod   uint64             `json:"amountPerPeriod"`
	NumberOfPeriod    uint64             `json:"numberOfPeriod"`
	Recipient         solanago.PublicKey `json:"recipient"`
}

func (obj EventClaimV3) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `CurrentTs`:
	err = encoder.Encode(obj.CurrentTs)
	if err != nil {
		return errors.NewField("CurrentTs", err)
	}
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Serialize `VestingStartTime`:
	err = encoder.Encode(obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Serialize `CliffTime`:
	err = encoder.Encode(obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `Recipient`:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	return nil
}

func (obj EventClaimV3) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventClaimV3: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventClaimV3) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `CurrentTs`:
	err = decoder.Decode(&obj.CurrentTs)
	if err != nil {
		return errors.NewField("CurrentTs", err)
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Deserialize `VestingStartTime`:
	err = decoder.Decode(&obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Deserialize `CliffTime`:
	err = decoder.Decode(&obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	return nil
}

func (obj *EventClaimV3) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventClaimV3: %w", err)
	}
	return nil
}

func UnmarshalEventClaimV3(buf []byte) (*EventClaimV3, error) {
	obj := new(EventClaimV3)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventCloseClaimStatus struct {
	Escrow       solanago.PublicKey `json:"escrow"`
	Recipient    solanago.PublicKey `json:"recipient"`
	RentReceiver solanago.PublicKey `json:"rentReceiver"`
}

func (obj EventCloseClaimStatus) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Serialize `Recipient`:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	// Serialize `RentReceiver`:
	err = encoder.Encode(obj.RentReceiver)
	if err != nil {
		return errors.NewField("RentReceiver", err)
	}
	return nil
}

func (obj EventCloseClaimStatus) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventCloseClaimStatus: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventCloseClaimStatus) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	// Deserialize `RentReceiver`:
	err = decoder.Decode(&obj.RentReceiver)
	if err != nil {
		return errors.NewField("RentReceiver", err)
	}
	return nil
}

func (obj *EventCloseClaimStatus) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventCloseClaimStatus: %w", err)
	}
	return nil
}

func UnmarshalEventCloseClaimStatus(buf []byte) (*EventCloseClaimStatus, error) {
	obj := new(EventCloseClaimStatus)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventCloseVestingEscrow struct {
	Escrow solanago.PublicKey `json:"escrow"`
}

func (obj EventCloseVestingEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	return nil
}

func (obj EventCloseVestingEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventCloseVestingEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventCloseVestingEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	return nil
}

func (obj *EventCloseVestingEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventCloseVestingEscrow: %w", err)
	}
	return nil
}

func UnmarshalEventCloseVestingEscrow(buf []byte) (*EventCloseVestingEscrow, error) {
	obj := new(EventCloseVestingEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventCreateRootEscrow struct {
	RootEscrow     solanago.PublicKey `json:"rootEscrow"`
	MaxClaimAmount uint64             `json:"maxClaimAmount"`
	MaxEscrow      uint64             `json:"maxEscrow"`
	Version        uint64             `json:"version"`
	Root           [32]uint8          `json:"root"`
}

func (obj EventCreateRootEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RootEscrow`:
	err = encoder.Encode(obj.RootEscrow)
	if err != nil {
		return errors.NewField("RootEscrow", err)
	}
	// Serialize `MaxClaimAmount`:
	err = encoder.Encode(obj.MaxClaimAmount)
	if err != nil {
		return errors.NewField("MaxClaimAmount", err)
	}
	// Serialize `MaxEscrow`:
	err = encoder.Encode(obj.MaxEscrow)
	if err != nil {
		return errors.NewField("MaxEscrow", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Root`:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	return nil
}

func (obj EventCreateRootEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventCreateRootEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventCreateRootEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RootEscrow`:
	err = decoder.Decode(&obj.RootEscrow)
	if err != nil {
		return errors.NewField("RootEscrow", err)
	}
	// Deserialize `MaxClaimAmount`:
	err = decoder.Decode(&obj.MaxClaimAmount)
	if err != nil {
		return errors.NewField("MaxClaimAmount", err)
	}
	// Deserialize `MaxEscrow`:
	err = decoder.Decode(&obj.MaxEscrow)
	if err != nil {
		return errors.NewField("MaxEscrow", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	return nil
}

func (obj *EventCreateRootEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventCreateRootEscrow: %w", err)
	}
	return nil
}

func UnmarshalEventCreateRootEscrow(buf []byte) (*EventCreateRootEscrow, error) {
	obj := new(EventCreateRootEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventCreateVestingEscrow struct {
	VestingStartTime    uint64             `json:"vestingStartTime"`
	CliffTime           uint64             `json:"cliffTime"`
	Frequency           uint64             `json:"frequency"`
	CliffUnlockAmount   uint64             `json:"cliffUnlockAmount"`
	AmountPerPeriod     uint64             `json:"amountPerPeriod"`
	NumberOfPeriod      uint64             `json:"numberOfPeriod"`
	UpdateRecipientMode uint8              `json:"updateRecipientMode"`
	CancelMode          uint8              `json:"cancelMode"`
	Recipient           solanago.PublicKey `json:"recipient"`
	Escrow              solanago.PublicKey `json:"escrow"`
}

func (obj EventCreateVestingEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VestingStartTime`:
	err = encoder.Encode(obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Serialize `CliffTime`:
	err = encoder.Encode(obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `UpdateRecipientMode`:
	err = encoder.Encode(obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Serialize `CancelMode`:
	err = encoder.Encode(obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	// Serialize `Recipient`:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	return nil
}

func (obj EventCreateVestingEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventCreateVestingEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventCreateVestingEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VestingStartTime`:
	err = decoder.Decode(&obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Deserialize `CliffTime`:
	err = decoder.Decode(&obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `UpdateRecipientMode`:
	err = decoder.Decode(&obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Deserialize `CancelMode`:
	err = decoder.Decode(&obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	return nil
}

func (obj *EventCreateVestingEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventCreateVestingEscrow: %w", err)
	}
	return nil
}

func UnmarshalEventCreateVestingEscrow(buf []byte) (*EventCreateVestingEscrow, error) {
	obj := new(EventCreateVestingEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventFundRootEscrow struct {
	RootEscrow   solanago.PublicKey `json:"rootEscrow"`
	FundedAmount uint64             `json:"fundedAmount"`
}

func (obj EventFundRootEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RootEscrow`:
	err = encoder.Encode(obj.RootEscrow)
	if err != nil {
		return errors.NewField("RootEscrow", err)
	}
	// Serialize `FundedAmount`:
	err = encoder.Encode(obj.FundedAmount)
	if err != nil {
		return errors.NewField("FundedAmount", err)
	}
	return nil
}

func (obj EventFundRootEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventFundRootEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventFundRootEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RootEscrow`:
	err = decoder.Decode(&obj.RootEscrow)
	if err != nil {
		return errors.NewField("RootEscrow", err)
	}
	// Deserialize `FundedAmount`:
	err = decoder.Decode(&obj.FundedAmount)
	if err != nil {
		return errors.NewField("FundedAmount", err)
	}
	return nil
}

func (obj *EventFundRootEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventFundRootEscrow: %w", err)
	}
	return nil
}

func UnmarshalEventFundRootEscrow(buf []byte) (*EventFundRootEscrow, error) {
	obj := new(EventFundRootEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EventUpdateVestingEscrowRecipient struct {
	Escrow       solanago.PublicKey `json:"escrow"`
	OldRecipient solanago.PublicKey `json:"oldRecipient"`
	NewRecipient solanago.PublicKey `json:"newRecipient"`
	Signer       solanago.PublicKey `json:"signer"`
}

func (obj EventUpdateVestingEscrowRecipient) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Serialize `OldRecipient`:
	err = encoder.Encode(obj.OldRecipient)
	if err != nil {
		return errors.NewField("OldRecipient", err)
	}
	// Serialize `NewRecipient`:
	err = encoder.Encode(obj.NewRecipient)
	if err != nil {
		return errors.NewField("NewRecipient", err)
	}
	// Serialize `Signer`:
	err = encoder.Encode(obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	return nil
}

func (obj EventUpdateVestingEscrowRecipient) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EventUpdateVestingEscrowRecipient: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EventUpdateVestingEscrowRecipient) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Deserialize `OldRecipient`:
	err = decoder.Decode(&obj.OldRecipient)
	if err != nil {
		return errors.NewField("OldRecipient", err)
	}
	// Deserialize `NewRecipient`:
	err = decoder.Decode(&obj.NewRecipient)
	if err != nil {
		return errors.NewField("NewRecipient", err)
	}
	// Deserialize `Signer`:
	err = decoder.Decode(&obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	return nil
}

func (obj *EventUpdateVestingEscrowRecipient) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EventUpdateVestingEscrowRecipient: %w", err)
	}
	return nil
}

func UnmarshalEventUpdateVestingEscrowRecipient(buf []byte) (*EventUpdateVestingEscrowRecipient, error) {
	obj := new(EventUpdateVestingEscrowRecipient)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemainingAccountsInfo struct {
	Slices []RemainingAccountsSlice `json:"slices"`
}

func (obj RemainingAccountsInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Slices`:
	err = encoder.Encode(obj.Slices)
	if err != nil {
		return errors.NewField("Slices", err)
	}
	return nil
}

func (obj RemainingAccountsInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemainingAccountsInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemainingAccountsInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Slices`:
	err = decoder.Decode(&obj.Slices)
	if err != nil {
		return errors.NewField("Slices", err)
	}
	return nil
}

func (obj *RemainingAccountsInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsInfo: %w", err)
	}
	return nil
}

func UnmarshalRemainingAccountsInfo(buf []byte) (*RemainingAccountsInfo, error) {
	obj := new(RemainingAccountsInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemainingAccountsSlice struct {
	AccountsType AccountsType `json:"accountsType"`
	Length       uint8        `json:"length"`
}

func (obj RemainingAccountsSlice) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AccountsType`:
	err = encoder.Encode(obj.AccountsType)
	if err != nil {
		return errors.NewField("AccountsType", err)
	}
	// Serialize `Length`:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return errors.NewField("Length", err)
	}
	return nil
}

func (obj RemainingAccountsSlice) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemainingAccountsSlice: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemainingAccountsSlice) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AccountsType`:
	err = decoder.Decode(&obj.AccountsType)
	if err != nil {
		return errors.NewField("AccountsType", err)
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return errors.NewField("Length", err)
	}
	return nil
}

func (obj *RemainingAccountsSlice) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsSlice: %w", err)
	}
	return nil
}

func UnmarshalRemainingAccountsSlice(buf []byte) (*RemainingAccountsSlice, error) {
	obj := new(RemainingAccountsSlice)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RootEscrow struct {
	// token mint
	TokenMint solanago.PublicKey `json:"tokenMint"`

	// creator of the escrow
	Creator solanago.PublicKey `json:"creator"`

	// escrow base key
	Base solanago.PublicKey `json:"base"`

	// 256 bit merkle root
	Root [32]uint8 `json:"root"`

	// bump
	Bump uint8 `json:"bump"`

	// token program flag
	TokenProgramFlag uint8 `json:"tokenProgramFlag"`

	// padding
	Padding0 [6]uint8 `json:"padding0"`

	// max claim amount
	MaxClaimAmount uint64 `json:"maxClaimAmount"`

	// max escrow
	MaxEscrow uint64 `json:"maxEscrow"`

	// total funded amount
	TotalFundedAmount uint64 `json:"totalFundedAmount"`

	// total escrow created
	TotalEscrowCreated uint64 `json:"totalEscrowCreated"`

	// total distributed amount
	TotalDistributeAmount uint64 `json:"totalDistributeAmount"`

	// version
	Version uint64 `json:"version"`

	// padding
	Padding uint64 `json:"padding"`

	// buffer
	Buffer [5]binary.Uint128 `json:"buffer"`
}

func (obj RootEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenMint`:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `Base`:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return errors.NewField("Base", err)
	}
	// Serialize `Root`:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `TokenProgramFlag`:
	err = encoder.Encode(obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `MaxClaimAmount`:
	err = encoder.Encode(obj.MaxClaimAmount)
	if err != nil {
		return errors.NewField("MaxClaimAmount", err)
	}
	// Serialize `MaxEscrow`:
	err = encoder.Encode(obj.MaxEscrow)
	if err != nil {
		return errors.NewField("MaxEscrow", err)
	}
	// Serialize `TotalFundedAmount`:
	err = encoder.Encode(obj.TotalFundedAmount)
	if err != nil {
		return errors.NewField("TotalFundedAmount", err)
	}
	// Serialize `TotalEscrowCreated`:
	err = encoder.Encode(obj.TotalEscrowCreated)
	if err != nil {
		return errors.NewField("TotalEscrowCreated", err)
	}
	// Serialize `TotalDistributeAmount`:
	err = encoder.Encode(obj.TotalDistributeAmount)
	if err != nil {
		return errors.NewField("TotalDistributeAmount", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Buffer`:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	return nil
}

func (obj RootEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RootEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RootEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return errors.NewField("Base", err)
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `TokenProgramFlag`:
	err = decoder.Decode(&obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `MaxClaimAmount`:
	err = decoder.Decode(&obj.MaxClaimAmount)
	if err != nil {
		return errors.NewField("MaxClaimAmount", err)
	}
	// Deserialize `MaxEscrow`:
	err = decoder.Decode(&obj.MaxEscrow)
	if err != nil {
		return errors.NewField("MaxEscrow", err)
	}
	// Deserialize `TotalFundedAmount`:
	err = decoder.Decode(&obj.TotalFundedAmount)
	if err != nil {
		return errors.NewField("TotalFundedAmount", err)
	}
	// Deserialize `TotalEscrowCreated`:
	err = decoder.Decode(&obj.TotalEscrowCreated)
	if err != nil {
		return errors.NewField("TotalEscrowCreated", err)
	}
	// Deserialize `TotalDistributeAmount`:
	err = decoder.Decode(&obj.TotalDistributeAmount)
	if err != nil {
		return errors.NewField("TotalDistributeAmount", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	return nil
}

func (obj *RootEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RootEscrow: %w", err)
	}
	return nil
}

func UnmarshalRootEscrow(buf []byte) (*RootEscrow, error) {
	obj := new(RootEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VestingEscrow struct {
	// recipient address
	Recipient solanago.PublicKey `json:"recipient"`

	// token mint
	TokenMint solanago.PublicKey `json:"tokenMint"`

	// creator of the escrow
	Creator solanago.PublicKey `json:"creator"`

	// escrow base key
	Base solanago.PublicKey `json:"base"`

	// escrow bump
	EscrowBump uint8 `json:"escrowBump"`

	// update_recipient_mode
	UpdateRecipientMode uint8 `json:"updateRecipientMode"`

	// cancel_mode
	CancelMode uint8 `json:"cancelMode"`

	// token program flag
	TokenProgramFlag uint8 `json:"tokenProgramFlag"`

	// padding
	Padding0 [4]uint8 `json:"padding0"`

	// cliff time
	CliffTime uint64 `json:"cliffTime"`

	// frequency
	Frequency uint64 `json:"frequency"`

	// cliff unlock amount
	CliffUnlockAmount uint64 `json:"cliffUnlockAmount"`

	// amount per period
	AmountPerPeriod uint64 `json:"amountPerPeriod"`

	// number of period
	NumberOfPeriod uint64 `json:"numberOfPeriod"`

	// total claimed amount
	TotalClaimedAmount uint64 `json:"totalClaimedAmount"`

	// vesting start time
	VestingStartTime uint64 `json:"vestingStartTime"`

	// cancelled_at
	CancelledAt uint64 `json:"cancelledAt"`

	// buffer
	Padding1 uint64 `json:"padding1"`

	// buffer
	Buffer [5]binary.Uint128 `json:"buffer"`
}

func (obj VestingEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Recipient`:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	// Serialize `TokenMint`:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `Base`:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return errors.NewField("Base", err)
	}
	// Serialize `EscrowBump`:
	err = encoder.Encode(obj.EscrowBump)
	if err != nil {
		return errors.NewField("EscrowBump", err)
	}
	// Serialize `UpdateRecipientMode`:
	err = encoder.Encode(obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Serialize `CancelMode`:
	err = encoder.Encode(obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	// Serialize `TokenProgramFlag`:
	err = encoder.Encode(obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `CliffTime`:
	err = encoder.Encode(obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Serialize `Frequency`:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Serialize `CliffUnlockAmount`:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Serialize `AmountPerPeriod`:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Serialize `NumberOfPeriod`:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Serialize `TotalClaimedAmount`:
	err = encoder.Encode(obj.TotalClaimedAmount)
	if err != nil {
		return errors.NewField("TotalClaimedAmount", err)
	}
	// Serialize `VestingStartTime`:
	err = encoder.Encode(obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Serialize `CancelledAt`:
	err = encoder.Encode(obj.CancelledAt)
	if err != nil {
		return errors.NewField("CancelledAt", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Buffer`:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	return nil
}

func (obj VestingEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return errors.NewField("Recipient", err)
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return errors.NewField("Base", err)
	}
	// Deserialize `EscrowBump`:
	err = decoder.Decode(&obj.EscrowBump)
	if err != nil {
		return errors.NewField("EscrowBump", err)
	}
	// Deserialize `UpdateRecipientMode`:
	err = decoder.Decode(&obj.UpdateRecipientMode)
	if err != nil {
		return errors.NewField("UpdateRecipientMode", err)
	}
	// Deserialize `CancelMode`:
	err = decoder.Decode(&obj.CancelMode)
	if err != nil {
		return errors.NewField("CancelMode", err)
	}
	// Deserialize `TokenProgramFlag`:
	err = decoder.Decode(&obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `CliffTime`:
	err = decoder.Decode(&obj.CliffTime)
	if err != nil {
		return errors.NewField("CliffTime", err)
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return errors.NewField("Frequency", err)
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return errors.NewField("CliffUnlockAmount", err)
	}
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return errors.NewField("AmountPerPeriod", err)
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return errors.NewField("NumberOfPeriod", err)
	}
	// Deserialize `TotalClaimedAmount`:
	err = decoder.Decode(&obj.TotalClaimedAmount)
	if err != nil {
		return errors.NewField("TotalClaimedAmount", err)
	}
	// Deserialize `VestingStartTime`:
	err = decoder.Decode(&obj.VestingStartTime)
	if err != nil {
		return errors.NewField("VestingStartTime", err)
	}
	// Deserialize `CancelledAt`:
	err = decoder.Decode(&obj.CancelledAt)
	if err != nil {
		return errors.NewField("CancelledAt", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	return nil
}

func (obj *VestingEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingEscrow: %w", err)
	}
	return nil
}

func UnmarshalVestingEscrow(buf []byte) (*VestingEscrow, error) {
	obj := new(VestingEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Metadata about an escrow.
type VestingEscrowMetadata struct {
	// The [Escrow].
	Escrow solanago.PublicKey `json:"escrow"`

	// Name of escrow.
	Name string `json:"name"`

	// Description of escrow.
	Description string `json:"description"`

	// Email of creator
	CreatorEmail string `json:"creatorEmail"`

	// Email of recipient
	RecipientEmail string `json:"recipientEmail"`
}

func (obj VestingEscrowMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Escrow`:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Description`:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return errors.NewField("Description", err)
	}
	// Serialize `CreatorEmail`:
	err = encoder.Encode(obj.CreatorEmail)
	if err != nil {
		return errors.NewField("CreatorEmail", err)
	}
	// Serialize `RecipientEmail`:
	err = encoder.Encode(obj.RecipientEmail)
	if err != nil {
		return errors.NewField("RecipientEmail", err)
	}
	return nil
}

func (obj VestingEscrowMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingEscrowMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingEscrowMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return errors.NewField("Escrow", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return errors.NewField("Description", err)
	}
	// Deserialize `CreatorEmail`:
	err = decoder.Decode(&obj.CreatorEmail)
	if err != nil {
		return errors.NewField("CreatorEmail", err)
	}
	// Deserialize `RecipientEmail`:
	err = decoder.Decode(&obj.RecipientEmail)
	if err != nil {
		return errors.NewField("RecipientEmail", err)
	}
	return nil
}

func (obj *VestingEscrowMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingEscrowMetadata: %w", err)
	}
	return nil
}

func UnmarshalVestingEscrowMetadata(buf []byte) (*VestingEscrowMetadata, error) {
	obj := new(VestingEscrowMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
