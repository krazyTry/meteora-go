// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package locker

import (
	"fmt"

	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_RootEscrow:
		value := new(RootEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as RootEscrow: %w", err)
		}
		return value, nil
	case Account_VestingEscrow:
		value := new(VestingEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as VestingEscrow: %w", err)
		}
		return value, nil
	case Account_VestingEscrowMetadata:
		value := new(VestingEscrowMetadata)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as VestingEscrowMetadata: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_RootEscrow(accountData []byte) (*RootEscrow, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_RootEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_RootEscrow, binary.FormatDiscriminator(discriminator))
	}
	acc := new(RootEscrow)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type RootEscrow: %w", err)
	}
	return acc, nil
}

func ParseAccount_VestingEscrow(accountData []byte) (*VestingEscrow, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_VestingEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_VestingEscrow, binary.FormatDiscriminator(discriminator))
	}
	acc := new(VestingEscrow)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type VestingEscrow: %w", err)
	}
	return acc, nil
}

func ParseAccount_VestingEscrowMetadata(accountData []byte) (*VestingEscrowMetadata, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_VestingEscrowMetadata {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_VestingEscrowMetadata, binary.FormatDiscriminator(discriminator))
	}
	acc := new(VestingEscrowMetadata)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type VestingEscrowMetadata: %w", err)
	}
	return acc, nil
}
