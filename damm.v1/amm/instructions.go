// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains instructions.

package amm

import (
	"bytes"
	"fmt"

	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "initialize_permissioned_pool" instruction.
// Initialize a new permissioned pool.
func NewInitializePermissionedPoolInstruction(
	// Params:
	curveTypeParam CurveType,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	adminTokenAAccount solanago.PublicKey,
	adminTokenBAccount solanago.PublicKey,
	adminPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	feeOwnerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializePermissionedPool[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `curveTypeParam`:
		{
			err := EncodeCurveType(enc__, curveTypeParam)
			if err != nil {
				return nil, errors.NewField("curveTypeParam", err)
			}
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Signer, Required
		// Pool account (arbitrary address)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, true))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "token_a_mint": Read-only, Non-signer, Required
		// Token A mint of the pool. Eg: USDT
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, false, false))
		// Account 3 "token_b_mint": Read-only, Non-signer, Required
		// Token B mint of the pool. Eg: USDC
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 4 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 5 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 6 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 7 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 8 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 9 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 10 "admin_token_a": Writable, Non-signer, Required
		// Admin token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(adminTokenAAccount, true, false))
		// Account 11 "admin_token_b": Writable, Non-signer, Required
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(adminTokenBAccount, true, false))
		// Account 12 "admin_pool_lp": Writable, Non-signer, Required
		// Admin pool LP token account. Used to receive LP during first deposit (initialize pool)
		// Admin pool LP token account. Used to receive LP during first deposit (initialize pool)
		accounts__.Append(solanago.NewAccountMeta(adminPoolLpAccount, true, false))
		// Account 13 "protocol_token_a_fee": Writable, Non-signer, Required
		// Protocol fee token account for token A. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 14 "protocol_token_b_fee": Writable, Non-signer, Required
		// Protocol fee token account for token B. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 15 "admin": Writable, Signer, Required
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 16 "fee_owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeOwnerAccount, false, false))
		// Account 17 "rent": Read-only, Non-signer, Required
		// Rent account.
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 18 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 19 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 20 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 21 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 22 "associated_token_program": Read-only, Non-signer, Required
		// Associated token program.
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 23 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize_permissionless_pool" instruction.
// Initialize a new permissionless pool.
func NewInitializePermissionlessPoolInstruction(
	// Params:
	curveTypeParam CurveType,
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	payerTokenAAccount solanago.PublicKey,
	payerTokenBAccount solanago.PublicKey,
	payerPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	feeOwnerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializePermissionlessPool[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `curveTypeParam`:
		{
			err := EncodeCurveType(enc__, curveTypeParam)
			if err != nil {
				return nil, errors.NewField("curveTypeParam", err)
			}
		}
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA address)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "token_a_mint": Read-only, Non-signer, Required
		// Token A mint of the pool. Eg: USDT
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, false, false))
		// Account 3 "token_b_mint": Read-only, Non-signer, Required
		// Token B mint of the pool. Eg: USDC
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 4 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 5 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 6 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 7 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 8 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 9 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 10 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 11 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 12 "payer_token_a": Writable, Non-signer, Required
		// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenAAccount, true, false))
		// Account 13 "payer_token_b": Writable, Non-signer, Required
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenBAccount, true, false))
		// Account 14 "payer_pool_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerPoolLpAccount, true, false))
		// Account 15 "protocol_token_a_fee": Writable, Non-signer, Required
		// Protocol fee token account for token A. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 16 "protocol_token_b_fee": Writable, Non-signer, Required
		// Protocol fee token account for token B. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 17 "payer": Writable, Signer, Required
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 18 "fee_owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeOwnerAccount, false, false))
		// Account 19 "rent": Read-only, Non-signer, Required
		// Rent account.
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 20 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 21 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 22 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 23 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 24 "associated_token_program": Read-only, Non-signer, Required
		// Associated token program.
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 25 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize_permissionless_pool_with_fee_tier" instruction.
// Initialize a new permissionless pool with customized fee tier
func NewInitializePermissionlessPoolWithFeeTierInstruction(
	// Params:
	curveTypeParam CurveType,
	tradeFeeBpsParam uint64,
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	payerTokenAAccount solanago.PublicKey,
	payerTokenBAccount solanago.PublicKey,
	payerPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	feeOwnerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializePermissionlessPoolWithFeeTier[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `curveTypeParam`:
		{
			err := EncodeCurveType(enc__, curveTypeParam)
			if err != nil {
				return nil, errors.NewField("curveTypeParam", err)
			}
		}
		// Serialize `tradeFeeBpsParam`:
		err = enc__.Encode(tradeFeeBpsParam)
		if err != nil {
			return nil, errors.NewField("tradeFeeBpsParam", err)
		}
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA address)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "token_a_mint": Read-only, Non-signer, Required
		// Token A mint of the pool. Eg: USDT
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, false, false))
		// Account 3 "token_b_mint": Read-only, Non-signer, Required
		// Token B mint of the pool. Eg: USDC
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 4 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 5 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 6 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 7 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 8 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 9 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 10 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 11 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 12 "payer_token_a": Writable, Non-signer, Required
		// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenAAccount, true, false))
		// Account 13 "payer_token_b": Writable, Non-signer, Required
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenBAccount, true, false))
		// Account 14 "payer_pool_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerPoolLpAccount, true, false))
		// Account 15 "protocol_token_a_fee": Writable, Non-signer, Required
		// Protocol fee token account for token A. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 16 "protocol_token_b_fee": Writable, Non-signer, Required
		// Protocol fee token account for token B. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 17 "payer": Writable, Signer, Required
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 18 "fee_owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(feeOwnerAccount, false, false))
		// Account 19 "rent": Read-only, Non-signer, Required
		// Rent account.
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 20 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 21 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 22 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 23 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 24 "associated_token_program": Read-only, Non-signer, Required
		// Associated token program.
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 25 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "enable_or_disable_pool" instruction.
// Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation.
func NewEnableOrDisablePoolInstruction(
	// Params:
	enableParam bool,

	// Accounts:
	poolAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_EnableOrDisablePool[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `enableParam`:
		err = enc__.Encode(enableParam)
		if err != nil {
			return nil, errors.NewField("enableParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "admin": Read-only, Signer, Required
		// Admin account. Must be owner of the pool.
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "swap" instruction.
// Swap token A to B, or vice versa. An amount of trading fee will be charged for liquidity provider, and the admin of the pool.
func NewSwapInstruction(
	// Params:
	inAmountParam uint64,
	minimumOutAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	userSourceTokenAccount solanago.PublicKey,
	userDestinationTokenAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	protocolTokenFeeAccount solanago.PublicKey,
	userAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Swap[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `inAmountParam`:
		err = enc__.Encode(inAmountParam)
		if err != nil {
			return nil, errors.NewField("inAmountParam", err)
		}
		// Serialize `minimumOutAmountParam`:
		err = enc__.Encode(minimumOutAmountParam)
		if err != nil {
			return nil, errors.NewField("minimumOutAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "user_source_token": Writable, Non-signer, Required
		// User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool.
		accounts__.Append(solanago.NewAccountMeta(userSourceTokenAccount, true, false))
		// Account 2 "user_destination_token": Writable, Non-signer, Required
		// User token account. The exchanged token will be transfer into this account from the pool.
		accounts__.Append(solanago.NewAccountMeta(userDestinationTokenAccount, true, false))
		// Account 3 "a_vault": Writable, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 4 "b_vault": Writable, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 5 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 6 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 7 "a_vault_lp_mint": Writable, Non-signer, Required
		// Lp token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 8 "b_vault_lp_mint": Writable, Non-signer, Required
		// Lp token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 9 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 10 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 11 "protocol_token_fee": Writable, Non-signer, Required
		// Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenFeeAccount, true, false))
		// Account 12 "user": Read-only, Signer, Required
		// User account. Must be owner of user_source_token.
		accounts__.Append(solanago.NewAccountMeta(userAccount, false, true))
		// Account 13 "vault_program": Read-only, Non-signer, Required
		// Vault program. the pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 14 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "remove_liquidity_single_side" instruction.
// Withdraw only single token from the pool. Only supported by pool with stable swap curve.
func NewRemoveLiquiditySingleSideInstruction(
	// Params:
	poolTokenAmountParam uint64,
	minimumOutAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	userPoolLpAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	userDestinationTokenAccount solanago.PublicKey,
	userAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RemoveLiquiditySingleSide[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `poolTokenAmountParam`:
		err = enc__.Encode(poolTokenAmountParam)
		if err != nil {
			return nil, errors.NewField("poolTokenAmountParam", err)
		}
		// Serialize `minimumOutAmountParam`:
		err = enc__.Encode(minimumOutAmountParam)
		if err != nil {
			return nil, errors.NewField("minimumOutAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "user_pool_lp": Writable, Non-signer, Required
		// User pool lp token account. LP will be burned from this account upon success liquidity removal.
		accounts__.Append(solanago.NewAccountMeta(userPoolLpAccount, true, false))
		// Account 3 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 4 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 8 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 9 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 10 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 11 "user_destination_token": Writable, Non-signer, Required
		// User token account to receive token upon success liquidity removal.
		accounts__.Append(solanago.NewAccountMeta(userDestinationTokenAccount, true, false))
		// Account 12 "user": Read-only, Signer, Required
		// User account. Must be owner of the user_pool_lp account.
		accounts__.Append(solanago.NewAccountMeta(userAccount, false, true))
		// Account 13 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 14 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "add_imbalance_liquidity" instruction.
// Deposit tokens to the pool in an imbalance ratio. Only supported by pool with stable swap curve.
func NewAddImbalanceLiquidityInstruction(
	// Params:
	minimumPoolTokenAmountParam uint64,
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	userPoolLpAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	userATokenAccount solanago.PublicKey,
	userBTokenAccount solanago.PublicKey,
	userAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_AddImbalanceLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `minimumPoolTokenAmountParam`:
		err = enc__.Encode(minimumPoolTokenAmountParam)
		if err != nil {
			return nil, errors.NewField("minimumPoolTokenAmountParam", err)
		}
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "user_pool_lp": Writable, Non-signer, Required
		// user pool lp token account. lp will be burned from this account upon success liquidity removal.
		accounts__.Append(solanago.NewAccountMeta(userPoolLpAccount, true, false))
		// Account 3 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 4 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 8 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 9 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 10 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 11 "user_a_token": Writable, Non-signer, Required
		// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userATokenAccount, true, false))
		// Account 12 "user_b_token": Writable, Non-signer, Required
		// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userBTokenAccount, true, false))
		// Account 13 "user": Read-only, Signer, Required
		// User account. Must be owner of user_a_token, and user_b_token.
		accounts__.Append(solanago.NewAccountMeta(userAccount, false, true))
		// Account 14 "vault_program": Read-only, Non-signer, Required
		// Vault program. the pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "remove_balance_liquidity" instruction.
// Withdraw tokens from the pool in a balanced ratio. User will still able to withdraw from pool even the pool is disabled. This allow user to exit their liquidity when there's some unforeseen event happen.
func NewRemoveBalanceLiquidityInstruction(
	// Params:
	poolTokenAmountParam uint64,
	minimumATokenOutParam uint64,
	minimumBTokenOutParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	userPoolLpAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	userATokenAccount solanago.PublicKey,
	userBTokenAccount solanago.PublicKey,
	userAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RemoveBalanceLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `poolTokenAmountParam`:
		err = enc__.Encode(poolTokenAmountParam)
		if err != nil {
			return nil, errors.NewField("poolTokenAmountParam", err)
		}
		// Serialize `minimumATokenOutParam`:
		err = enc__.Encode(minimumATokenOutParam)
		if err != nil {
			return nil, errors.NewField("minimumATokenOutParam", err)
		}
		// Serialize `minimumBTokenOutParam`:
		err = enc__.Encode(minimumBTokenOutParam)
		if err != nil {
			return nil, errors.NewField("minimumBTokenOutParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "user_pool_lp": Writable, Non-signer, Required
		// user pool lp token account. lp will be burned from this account upon success liquidity removal.
		accounts__.Append(solanago.NewAccountMeta(userPoolLpAccount, true, false))
		// Account 3 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 4 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 8 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 9 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 10 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 11 "user_a_token": Writable, Non-signer, Required
		// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userATokenAccount, true, false))
		// Account 12 "user_b_token": Writable, Non-signer, Required
		// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userBTokenAccount, true, false))
		// Account 13 "user": Read-only, Signer, Required
		// User account. Must be owner of user_a_token, and user_b_token.
		accounts__.Append(solanago.NewAccountMeta(userAccount, false, true))
		// Account 14 "vault_program": Read-only, Non-signer, Required
		// Vault program. the pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "add_balance_liquidity" instruction.
// Deposit tokens to the pool in a balanced ratio.
func NewAddBalanceLiquidityInstruction(
	// Params:
	poolTokenAmountParam uint64,
	maximumTokenAAmountParam uint64,
	maximumTokenBAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	userPoolLpAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	userATokenAccount solanago.PublicKey,
	userBTokenAccount solanago.PublicKey,
	userAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_AddBalanceLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `poolTokenAmountParam`:
		err = enc__.Encode(poolTokenAmountParam)
		if err != nil {
			return nil, errors.NewField("poolTokenAmountParam", err)
		}
		// Serialize `maximumTokenAAmountParam`:
		err = enc__.Encode(maximumTokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("maximumTokenAAmountParam", err)
		}
		// Serialize `maximumTokenBAmountParam`:
		err = enc__.Encode(maximumTokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("maximumTokenBAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "user_pool_lp": Writable, Non-signer, Required
		// user pool lp token account. lp will be burned from this account upon success liquidity removal.
		accounts__.Append(solanago.NewAccountMeta(userPoolLpAccount, true, false))
		// Account 3 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 4 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 8 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 9 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 10 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 11 "user_a_token": Writable, Non-signer, Required
		// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userATokenAccount, true, false))
		// Account 12 "user_b_token": Writable, Non-signer, Required
		// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userBTokenAccount, true, false))
		// Account 13 "user": Read-only, Signer, Required
		// User account. Must be owner of user_a_token, and user_b_token.
		accounts__.Append(solanago.NewAccountMeta(userAccount, false, true))
		// Account 14 "vault_program": Read-only, Non-signer, Required
		// Vault program. the pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "set_pool_fees" instruction.
// Update trading fee charged for liquidity provider, and admin.
func NewSetPoolFeesInstruction(
	// Params:
	feesParam PoolFees,
	newPartnerFeeNumeratorParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	feeOperatorAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetPoolFees[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `feesParam`:
		err = enc__.Encode(feesParam)
		if err != nil {
			return nil, errors.NewField("feesParam", err)
		}
		// Serialize `newPartnerFeeNumeratorParam`:
		err = enc__.Encode(newPartnerFeeNumeratorParam)
		if err != nil {
			return nil, errors.NewField("newPartnerFeeNumeratorParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "fee_operator": Read-only, Signer, Required
		// Fee operator account
		accounts__.Append(solanago.NewAccountMeta(feeOperatorAccount, false, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "override_curve_param" instruction.
// Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve. // Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.
func NewOverrideCurveParamInstruction(
	// Params:
	curveTypeParam CurveType,

	// Accounts:
	poolAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_OverrideCurveParam[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `curveTypeParam`:
		{
			err := EncodeCurveType(enc__, curveTypeParam)
			if err != nil {
				return nil, errors.NewField("curveTypeParam", err)
			}
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "admin": Read-only, Signer, Required
		// Admin account.
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "get_pool_info" instruction.
// Get the general information of the pool.
func NewGetPoolInfoInstruction(
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Read-only, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 1 "lp_mint": Read-only, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 2 "a_vault_lp": Read-only, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 3 "b_vault_lp": Read-only, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, false, false))
		// Account 4 "a_vault": Read-only, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, false, false))
		// Account 5 "b_vault": Read-only, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, false, false))
		// Account 6 "a_vault_lp_mint": Read-only, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, false, false))
		// Account 7 "b_vault_lp_mint": Read-only, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "bootstrap_liquidity" instruction.
// Bootstrap the pool when liquidity is depleted.
func NewBootstrapLiquidityInstruction(
	// Params:
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	userPoolLpAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	userATokenAccount solanago.PublicKey,
	userBTokenAccount solanago.PublicKey,
	userAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_BootstrapLiquidity[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "user_pool_lp": Writable, Non-signer, Required
		// user pool lp token account. lp will be burned from this account upon success liquidity removal.
		accounts__.Append(solanago.NewAccountMeta(userPoolLpAccount, true, false))
		// Account 3 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 4 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 8 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 9 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 10 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 11 "user_a_token": Writable, Non-signer, Required
		// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userATokenAccount, true, false))
		// Account 12 "user_b_token": Writable, Non-signer, Required
		// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userBTokenAccount, true, false))
		// Account 13 "user": Read-only, Signer, Required
		// User account. Must be owner of user_a_token, and user_b_token.
		accounts__.Append(solanago.NewAccountMeta(userAccount, false, true))
		// Account 14 "vault_program": Read-only, Non-signer, Required
		// Vault program. the pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_mint_metadata" instruction.
// Create mint metadata account for old pools
func NewCreateMintMetadataInstruction(
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Read-only, Non-signer, Required
		// Pool account
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 1 "lp_mint": Read-only, Non-signer, Required
		// LP mint account of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 2 "a_vault_lp": Read-only, Non-signer, Required
		// Vault A LP account of the pool
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 3 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 4 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 5 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 6 "payer": Writable, Signer, Required
		// Payer
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "create_lock_escrow" instruction.
// Create lock account
func NewCreateLockEscrowInstruction(
	poolAccount solanago.PublicKey,
	lockEscrowAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Read-only, Non-signer, Required
		// Pool account
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 1 "lock_escrow": Writable, Non-signer, Required
		// Lock account
		accounts__.Append(solanago.NewAccountMeta(lockEscrowAccount, true, false))
		// Account 2 "owner": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, false))
		// Account 3 "lp_mint": Read-only, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 4 "payer": Writable, Signer, Required
		// Payer account
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 5 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "lock" instruction.
// Lock Lp token
func NewLockInstruction(
	// Params:
	maxAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	lockEscrowAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	sourceTokensAccount solanago.PublicKey,
	escrowVaultAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Lock[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `maxAmountParam`:
		err = enc__.Encode(maxAmountParam)
		if err != nil {
			return nil, errors.NewField("maxAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Read-only, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 2 "lock_escrow": Writable, Non-signer, Required
		// Lock account
		accounts__.Append(solanago.NewAccountMeta(lockEscrowAccount, true, false))
		// Account 3 "owner": Writable, Signer, Required
		// Can be anyone
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 4 "source_tokens": Writable, Non-signer, Required
		// owner lp token account
		accounts__.Append(solanago.NewAccountMeta(sourceTokensAccount, true, false))
		// Account 5 "escrow_vault": Writable, Non-signer, Required
		// Escrow vault
		accounts__.Append(solanago.NewAccountMeta(escrowVaultAccount, true, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 7 "a_vault": Read-only, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, false, false))
		// Account 8 "b_vault": Read-only, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, false, false))
		// Account 9 "a_vault_lp": Read-only, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 10 "b_vault_lp": Read-only, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, false, false))
		// Account 11 "a_vault_lp_mint": Read-only, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, false, false))
		// Account 12 "b_vault_lp_mint": Read-only, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "claim_fee" instruction.
// Claim fee
func NewClaimFeeInstruction(
	// Params:
	maxAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	lockEscrowAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	sourceTokensAccount solanago.PublicKey,
	escrowVaultAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	userATokenAccount solanago.PublicKey,
	userBTokenAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_ClaimFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `maxAmountParam`:
		err = enc__.Encode(maxAmountParam)
		if err != nil {
			return nil, errors.NewField("maxAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "lock_escrow": Writable, Non-signer, Required
		// Lock account
		accounts__.Append(solanago.NewAccountMeta(lockEscrowAccount, true, false))
		// Account 3 "owner": Writable, Signer, Required
		// Owner of lock account
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 4 "source_tokens": Writable, Non-signer, Required
		// owner lp token account
		accounts__.Append(solanago.NewAccountMeta(sourceTokensAccount, true, false))
		// Account 5 "escrow_vault": Writable, Non-signer, Required
		// Escrow vault
		accounts__.Append(solanago.NewAccountMeta(escrowVaultAccount, true, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 7 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 8 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 9 "a_vault": Writable, Non-signer, Required
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 10 "b_vault": Writable, Non-signer, Required
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 11 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 12 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 13 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault a
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 14 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault b
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 15 "user_a_token": Writable, Non-signer, Required
		// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userATokenAccount, true, false))
		// Account 16 "user_b_token": Writable, Non-signer, Required
		// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
		accounts__.Append(solanago.NewAccountMeta(userBTokenAccount, true, false))
		// Account 17 "vault_program": Read-only, Non-signer, Required
		// Vault program. the pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_config" instruction.
// Create config
func NewCreateConfigInstruction(
	// Params:
	configParametersParam ConfigParameters,

	// Accounts:
	configAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `configParametersParam`:
		err = enc__.Encode(configParametersParam)
		if err != nil {
			return nil, errors.NewField("configParametersParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "config": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, true, false))
		// Account 1 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 2 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "close_config" instruction.
// Close config
func NewCloseConfigInstruction(
	configAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	rentReceiverAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "config": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, true, false))
		// Account 1 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 2 "rent_receiver": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentReceiverAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "initialize_permissionless_constant_product_pool_with_config" instruction.
// Initialize permissionless pool with config
func NewInitializePermissionlessConstantProductPoolWithConfigInstruction(
	// Params:
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	payerTokenAAccount solanago.PublicKey,
	payerTokenBAccount solanago.PublicKey,
	payerPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializePermissionlessConstantProductPoolWithConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA address)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 3 "token_a_mint": Read-only, Non-signer, Required
		// Token A mint of the pool. Eg: USDT
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, false, false))
		// Account 4 "token_b_mint": Read-only, Non-signer, Required
		// Token B mint of the pool. Eg: USDC
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 8 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 9 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 10 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 11 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 12 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 13 "payer_token_a": Writable, Non-signer, Required
		// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenAAccount, true, false))
		// Account 14 "payer_token_b": Writable, Non-signer, Required
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenBAccount, true, false))
		// Account 15 "payer_pool_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerPoolLpAccount, true, false))
		// Account 16 "protocol_token_a_fee": Writable, Non-signer, Required
		// Protocol fee token account for token A. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 17 "protocol_token_b_fee": Writable, Non-signer, Required
		// Protocol fee token account for token B. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 18 "payer": Writable, Signer, Required
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 19 "rent": Read-only, Non-signer, Required
		// Rent account.
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 20 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 21 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 22 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 23 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 24 "associated_token_program": Read-only, Non-signer, Required
		// Associated token program.
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 25 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize_permissionless_constant_product_pool_with_config2" instruction.
// Initialize permissionless pool with config 2
func NewInitializePermissionlessConstantProductPoolWithConfig2Instruction(
	// Params:
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,
	activationPointParam *uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	payerTokenAAccount solanago.PublicKey,
	payerTokenBAccount solanago.PublicKey,
	payerPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializePermissionlessConstantProductPoolWithConfig2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
		// Serialize `activationPointParam` (optional):
		{
			if activationPointParam == nil {
				err = enc__.WriteOption(false)
				if err != nil {
					return nil, errors.NewOption("activationPointParam", fmt.Errorf("error while encoding optionality: %w", err))
				}
			} else {
				err = enc__.WriteOption(true)
				if err != nil {
					return nil, errors.NewOption("activationPointParam", fmt.Errorf("error while encoding optionality: %w", err))
				}
				err = enc__.Encode(activationPointParam)
				if err != nil {
					return nil, errors.NewField("activationPointParam", err)
				}
			}
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA address)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(configAccount, false, false))
		// Account 2 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 3 "token_a_mint": Read-only, Non-signer, Required
		// Token A mint of the pool. Eg: USDT
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, false, false))
		// Account 4 "token_b_mint": Read-only, Non-signer, Required
		// Token B mint of the pool. Eg: USDC
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 5 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 6 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 7 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 8 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 9 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 10 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 11 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 12 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 13 "payer_token_a": Writable, Non-signer, Required
		// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenAAccount, true, false))
		// Account 14 "payer_token_b": Writable, Non-signer, Required
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenBAccount, true, false))
		// Account 15 "payer_pool_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerPoolLpAccount, true, false))
		// Account 16 "protocol_token_a_fee": Writable, Non-signer, Required
		// Protocol fee token account for token A. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 17 "protocol_token_b_fee": Writable, Non-signer, Required
		// Protocol fee token account for token B. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 18 "payer": Writable, Signer, Required
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 19 "rent": Read-only, Non-signer, Required
		// Rent account.
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 20 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 21 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 22 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 23 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 24 "associated_token_program": Read-only, Non-signer, Required
		// Associated token program.
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 25 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize_customizable_permissionless_constant_product_pool" instruction.
// Initialize permissionless pool with customizable params
func NewInitializeCustomizablePermissionlessConstantProductPoolInstruction(
	// Params:
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,
	paramsParam CustomizableParams,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	tokenAMintAccount solanago.PublicKey,
	tokenBMintAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aTokenVaultAccount solanago.PublicKey,
	bTokenVaultAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	payerTokenAAccount solanago.PublicKey,
	payerTokenBAccount solanago.PublicKey,
	payerPoolLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
	mintMetadataAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	vaultProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InitializeCustomizablePermissionlessConstantProductPool[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `tokenAAmountParam`:
		err = enc__.Encode(tokenAAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenAAmountParam", err)
		}
		// Serialize `tokenBAmountParam`:
		err = enc__.Encode(tokenBAmountParam)
		if err != nil {
			return nil, errors.NewField("tokenBAmountParam", err)
		}
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA address)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "lp_mint": Writable, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, true, false))
		// Account 2 "token_a_mint": Read-only, Non-signer, Required
		// Token A mint of the pool. Eg: USDT
		accounts__.Append(solanago.NewAccountMeta(tokenAMintAccount, false, false))
		// Account 3 "token_b_mint": Read-only, Non-signer, Required
		// Token B mint of the pool. Eg: USDC
		accounts__.Append(solanago.NewAccountMeta(tokenBMintAccount, false, false))
		// Account 4 "a_vault": Writable, Non-signer, Required
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, true, false))
		// Account 5 "b_vault": Writable, Non-signer, Required
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, true, false))
		// Account 6 "a_token_vault": Writable, Non-signer, Required
		// Token vault account of vault A
		accounts__.Append(solanago.NewAccountMeta(aTokenVaultAccount, true, false))
		// Account 7 "b_token_vault": Writable, Non-signer, Required
		// Token vault account of vault B
		accounts__.Append(solanago.NewAccountMeta(bTokenVaultAccount, true, false))
		// Account 8 "a_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault A
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, true, false))
		// Account 9 "b_vault_lp_mint": Writable, Non-signer, Required
		// LP token mint of vault B
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, true, false))
		// Account 10 "a_vault_lp": Writable, Non-signer, Required
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, true, false))
		// Account 11 "b_vault_lp": Writable, Non-signer, Required
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, true, false))
		// Account 12 "payer_token_a": Writable, Non-signer, Required
		// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenAAccount, true, false))
		// Account 13 "payer_token_b": Writable, Non-signer, Required
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		accounts__.Append(solanago.NewAccountMeta(payerTokenBAccount, true, false))
		// Account 14 "payer_pool_lp": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerPoolLpAccount, true, false))
		// Account 15 "protocol_token_a_fee": Writable, Non-signer, Required
		// Protocol fee token account for token A. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 16 "protocol_token_b_fee": Writable, Non-signer, Required
		// Protocol fee token account for token B. Used to receive trading fee.
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 17 "payer": Writable, Signer, Required
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 18 "rent": Read-only, Non-signer, Required
		// Rent account.
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
		// Account 19 "mint_metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintMetadataAccount, true, false))
		// Account 20 "metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 21 "vault_program": Read-only, Non-signer, Required
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		accounts__.Append(solanago.NewAccountMeta(vaultProgramAccount, false, false))
		// Account 22 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 23 "associated_token_program": Read-only, Non-signer, Required
		// Associated token program.
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 24 "system_program": Read-only, Non-signer, Required
		// System program.
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_activation_point" instruction.
// Update activation slot
func NewUpdateActivationPointInstruction(
	// Params:
	newActivationPointParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateActivationPoint[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `newActivationPointParam`:
		err = enc__.Encode(newActivationPointParam)
		if err != nil {
			return nil, errors.NewField("newActivationPointParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "admin": Read-only, Signer, Required
		// Admin account.
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_protocol_fees" instruction.
// Withdraw protocol fee
func NewWithdrawProtocolFeesInstruction(
	poolAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	treasuryTokenAAccount solanago.PublicKey,
	treasuryTokenBAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Read-only, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 1 "a_vault_lp": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 2 "protocol_token_a_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 3 "protocol_token_b_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 4 "treasury_token_a": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(treasuryTokenAAccount, true, false))
		// Account 5 "treasury_token_b": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(treasuryTokenBAccount, true, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "set_whitelisted_vault" instruction.
// Set whitelisted vault
func NewSetWhitelistedVaultInstruction(
	// Params:
	whitelistedVaultParam solanago.PublicKey,

	// Accounts:
	poolAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetWhitelistedVault[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `whitelistedVaultParam`:
		err = enc__.Encode(whitelistedVaultParam)
		if err != nil {
			return nil, errors.NewField("whitelistedVaultParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "partner_claim_fee" instruction.
// Partner claim fee
func NewPartnerClaimFeeInstruction(
	// Params:
	maxAmountAParam uint64,
	maxAmountBParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	protocolTokenAFeeAccount solanago.PublicKey,
	protocolTokenBFeeAccount solanago.PublicKey,
	partnerTokenAAccount solanago.PublicKey,
	partnerTokenBAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	partnerAuthorityAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_PartnerClaimFee[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `maxAmountAParam`:
		err = enc__.Encode(maxAmountAParam)
		if err != nil {
			return nil, errors.NewField("maxAmountAParam", err)
		}
		// Serialize `maxAmountBParam`:
		err = enc__.Encode(maxAmountBParam)
		if err != nil {
			return nil, errors.NewField("maxAmountBParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Writable, Non-signer, Required
		// Pool account (PDA)
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 1 "a_vault_lp": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 2 "protocol_token_a_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(protocolTokenAFeeAccount, true, false))
		// Account 3 "protocol_token_b_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(protocolTokenBFeeAccount, true, false))
		// Account 4 "partner_token_a": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(partnerTokenAAccount, true, false))
		// Account 5 "partner_token_b": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(partnerTokenBAccount, true, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 7 "partner_authority": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(partnerAuthorityAccount, false, true))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "move_locked_lp" instruction.
// Move locked lp
func NewMoveLockedLpInstruction(
	// Params:
	maxAmountParam uint64,

	// Accounts:
	poolAccount solanago.PublicKey,
	lpMintAccount solanago.PublicKey,
	fromLockEscrowAccount solanago.PublicKey,
	toLockEscrowAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	fromEscrowVaultAccount solanago.PublicKey,
	toEscrowVaultAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	aVaultAccount solanago.PublicKey,
	bVaultAccount solanago.PublicKey,
	aVaultLpAccount solanago.PublicKey,
	bVaultLpAccount solanago.PublicKey,
	aVaultLpMintAccount solanago.PublicKey,
	bVaultLpMintAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MoveLockedLp[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `maxAmountParam`:
		err = enc__.Encode(maxAmountParam)
		if err != nil {
			return nil, errors.NewField("maxAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "pool": Read-only, Non-signer, Required
		// Pool account
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 1 "lp_mint": Read-only, Non-signer, Required
		// LP token mint of the pool
		accounts__.Append(solanago.NewAccountMeta(lpMintAccount, false, false))
		// Account 2 "from_lock_escrow": Writable, Non-signer, Required
		// From lock account
		accounts__.Append(solanago.NewAccountMeta(fromLockEscrowAccount, true, false))
		// Account 3 "to_lock_escrow": Writable, Non-signer, Required
		// To lock account
		accounts__.Append(solanago.NewAccountMeta(toLockEscrowAccount, true, false))
		// Account 4 "owner": Read-only, Signer, Required
		// Owner of lock account
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 5 "from_escrow_vault": Writable, Non-signer, Required
		// From escrow vault
		accounts__.Append(solanago.NewAccountMeta(fromEscrowVaultAccount, true, false))
		// Account 6 "to_escrow_vault": Writable, Non-signer, Required
		// To escrow vault
		accounts__.Append(solanago.NewAccountMeta(toEscrowVaultAccount, true, false))
		// Account 7 "token_program": Read-only, Non-signer, Required
		// Token program.
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 8 "a_vault": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultAccount, false, false))
		// Account 9 "b_vault": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultAccount, false, false))
		// Account 10 "a_vault_lp": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpAccount, false, false))
		// Account 11 "b_vault_lp": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultLpAccount, false, false))
		// Account 12 "a_vault_lp_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(aVaultLpMintAccount, false, false))
		// Account 13 "b_vault_lp_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(bVaultLpMintAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}
