// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package amm

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Multiplier for the pool token. Used to normalized token with different decimal into the same precision.
type TokenMultiplier struct {
	// Multiplier for token A of the pool.
	TokenAMultiplier uint64 `json:"tokenAMultiplier"`

	// Multiplier for token B of the pool.
	TokenBMultiplier uint64 `json:"tokenBMultiplier"`

	// Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9.
	PrecisionFactor uint8 `json:"precisionFactor"`
}

func (obj TokenMultiplier) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenAMultiplier`:
	err = encoder.Encode(obj.TokenAMultiplier)
	if err != nil {
		return errors.NewField("TokenAMultiplier", err)
	}
	// Serialize `TokenBMultiplier`:
	err = encoder.Encode(obj.TokenBMultiplier)
	if err != nil {
		return errors.NewField("TokenBMultiplier", err)
	}
	// Serialize `PrecisionFactor`:
	err = encoder.Encode(obj.PrecisionFactor)
	if err != nil {
		return errors.NewField("PrecisionFactor", err)
	}
	return nil
}

func (obj TokenMultiplier) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenMultiplier: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenMultiplier) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenAMultiplier`:
	err = decoder.Decode(&obj.TokenAMultiplier)
	if err != nil {
		return errors.NewField("TokenAMultiplier", err)
	}
	// Deserialize `TokenBMultiplier`:
	err = decoder.Decode(&obj.TokenBMultiplier)
	if err != nil {
		return errors.NewField("TokenBMultiplier", err)
	}
	// Deserialize `PrecisionFactor`:
	err = decoder.Decode(&obj.PrecisionFactor)
	if err != nil {
		return errors.NewField("PrecisionFactor", err)
	}
	return nil
}

func (obj *TokenMultiplier) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenMultiplier: %w", err)
	}
	return nil
}

func UnmarshalTokenMultiplier(buf []byte) (*TokenMultiplier, error) {
	obj := new(TokenMultiplier)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFees struct {
	// Trade fees are extra token amounts that are held inside the token
	// accounts during a trade, making the value of liquidity tokens rise.
	// Trade fee numerator
	TradeFeeNumerator uint64 `json:"tradeFeeNumerator"`

	// Trade fee denominator
	TradeFeeDenominator uint64 `json:"tradeFeeDenominator"`

	// Protocol trading fees are extra token amounts that are held inside the token
	// accounts during a trade, with the equivalent in pool tokens minted to
	// the protocol of the program.
	// Protocol trade fee numerator
	ProtocolTradeFeeNumerator uint64 `json:"protocolTradeFeeNumerator"`

	// Protocol trade fee denominator
	ProtocolTradeFeeDenominator uint64 `json:"protocolTradeFeeDenominator"`
}

func (obj PoolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Serialize `TradeFeeDenominator`:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return errors.NewField("TradeFeeDenominator", err)
	}
	// Serialize `ProtocolTradeFeeNumerator`:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Serialize `ProtocolTradeFeeDenominator`:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeDenominator", err)
	}
	return nil
}

func (obj PoolFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return errors.NewField("TradeFeeDenominator", err)
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeDenominator", err)
	}
	return nil
}

func (obj *PoolFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFees: %w", err)
	}
	return nil
}

func UnmarshalPoolFees(buf []byte) (*PoolFees, error) {
	obj := new(PoolFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Contains information for depeg pool
type Depeg struct {
	// The virtual price of staking / interest bearing token
	BaseVirtualPrice uint64 `json:"baseVirtualPrice"`

	// The last time base_virtual_price is updated
	BaseCacheUpdated uint64 `json:"baseCacheUpdated"`

	// Type of the depeg pool
	DepegType DepegType `json:"depegType"`
}

func (obj Depeg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseVirtualPrice`:
	err = encoder.Encode(obj.BaseVirtualPrice)
	if err != nil {
		return errors.NewField("BaseVirtualPrice", err)
	}
	// Serialize `BaseCacheUpdated`:
	err = encoder.Encode(obj.BaseCacheUpdated)
	if err != nil {
		return errors.NewField("BaseCacheUpdated", err)
	}
	// Serialize `DepegType`:
	err = encoder.Encode(obj.DepegType)
	if err != nil {
		return errors.NewField("DepegType", err)
	}
	return nil
}

func (obj Depeg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Depeg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Depeg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseVirtualPrice`:
	err = decoder.Decode(&obj.BaseVirtualPrice)
	if err != nil {
		return errors.NewField("BaseVirtualPrice", err)
	}
	// Deserialize `BaseCacheUpdated`:
	err = decoder.Decode(&obj.BaseCacheUpdated)
	if err != nil {
		return errors.NewField("BaseCacheUpdated", err)
	}
	// Deserialize `DepegType`:
	err = decoder.Decode(&obj.DepegType)
	if err != nil {
		return errors.NewField("DepegType", err)
	}
	return nil
}

func (obj *Depeg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Depeg: %w", err)
	}
	return nil
}

func UnmarshalDepeg(buf []byte) (*Depeg, error) {
	obj := new(Depeg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ConfigParameters struct {
	TradeFeeNumerator         uint64             `json:"tradeFeeNumerator"`
	ProtocolTradeFeeNumerator uint64             `json:"protocolTradeFeeNumerator"`
	ActivationDuration        uint64             `json:"activationDuration"`
	VaultConfigKey            solanago.PublicKey `json:"vaultConfigKey"`
	PoolCreatorAuthority      solanago.PublicKey `json:"poolCreatorAuthority"`
	ActivationType            uint8              `json:"activationType"`
	Index                     uint64             `json:"index"`
	PartnerFeeNumerator       uint64             `json:"partnerFeeNumerator"`
}

func (obj ConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Serialize `ProtocolTradeFeeNumerator`:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Serialize `ActivationDuration`:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return errors.NewField("ActivationDuration", err)
	}
	// Serialize `VaultConfigKey`:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `PartnerFeeNumerator`:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return errors.NewField("PartnerFeeNumerator", err)
	}
	return nil
}

func (obj ConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return errors.NewField("ActivationDuration", err)
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return errors.NewField("PartnerFeeNumerator", err)
	}
	return nil
}

func (obj *ConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalConfigParameters(buf []byte) (*ConfigParameters, error) {
	obj := new(ConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CustomizableParams struct {
	// Trading fee.
	TradeFeeNumerator uint32 `json:"tradeFeeNumerator"`

	// The pool start trading.
	ActivationPoint *uint64 `bin:"optional" json:"activationPoint,omitempty"`

	// Whether the pool support alpha vault
	HasAlphaVault bool `json:"hasAlphaVault"`

	// Activation type
	ActivationType uint8 `json:"activationType"`

	// Padding
	Padding [90]uint8 `json:"padding"`
}

func (obj CustomizableParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Serialize `ActivationPoint` (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	// Serialize `HasAlphaVault`:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return errors.NewField("HasAlphaVault", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj CustomizableParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CustomizableParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CustomizableParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ActivationPoint", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return errors.NewField("HasAlphaVault", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *CustomizableParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CustomizableParams: %w", err)
	}
	return nil
}

func UnmarshalCustomizableParams(buf []byte) (*CustomizableParams, error) {
	obj := new(CustomizableParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Padding for future pool fields
type Padding struct {
	// Padding 0
	Padding0 [6]uint8 `json:"padding0"`

	// Padding 1
	Padding1 [21]uint64 `json:"padding1"`

	// Padding 2
	Padding2 [21]uint64 `json:"padding2"`
}

func (obj Padding) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj Padding) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Padding: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Padding) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *Padding) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Padding: %w", err)
	}
	return nil
}

func UnmarshalPadding(buf []byte) (*Padding, error) {
	obj := new(Padding)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PartnerInfo struct {
	FeeNumerator     uint64             `json:"feeNumerator"`
	PartnerAuthority solanago.PublicKey `json:"partnerAuthority"`
	PendingFeeA      uint64             `json:"pendingFeeA"`
	PendingFeeB      uint64             `json:"pendingFeeB"`
}

func (obj PartnerInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeeNumerator`:
	err = encoder.Encode(obj.FeeNumerator)
	if err != nil {
		return errors.NewField("FeeNumerator", err)
	}
	// Serialize `PartnerAuthority`:
	err = encoder.Encode(obj.PartnerAuthority)
	if err != nil {
		return errors.NewField("PartnerAuthority", err)
	}
	// Serialize `PendingFeeA`:
	err = encoder.Encode(obj.PendingFeeA)
	if err != nil {
		return errors.NewField("PendingFeeA", err)
	}
	// Serialize `PendingFeeB`:
	err = encoder.Encode(obj.PendingFeeB)
	if err != nil {
		return errors.NewField("PendingFeeB", err)
	}
	return nil
}

func (obj PartnerInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PartnerInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PartnerInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeNumerator`:
	err = decoder.Decode(&obj.FeeNumerator)
	if err != nil {
		return errors.NewField("FeeNumerator", err)
	}
	// Deserialize `PartnerAuthority`:
	err = decoder.Decode(&obj.PartnerAuthority)
	if err != nil {
		return errors.NewField("PartnerAuthority", err)
	}
	// Deserialize `PendingFeeA`:
	err = decoder.Decode(&obj.PendingFeeA)
	if err != nil {
		return errors.NewField("PendingFeeA", err)
	}
	// Deserialize `PendingFeeB`:
	err = decoder.Decode(&obj.PendingFeeB)
	if err != nil {
		return errors.NewField("PendingFeeB", err)
	}
	return nil
}

func (obj *PartnerInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PartnerInfo: %w", err)
	}
	return nil
}

func UnmarshalPartnerInfo(buf []byte) (*PartnerInfo, error) {
	obj := new(PartnerInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Bootstrapping struct {
	// Activation point, can be slot or timestamp
	ActivationPoint uint64 `json:"activationPoint"`

	// Whitelisted vault to be able to buy pool before activation_point
	WhitelistedVault solanago.PublicKey `json:"whitelistedVault"`

	// Need to store pool creator in lauch pool, so they can modify liquidity before activation_point
	PoolCreator solanago.PublicKey `json:"poolCreator"`

	// Activation type, 0 means by slot, 1 means by timestamp
	ActivationType uint8 `json:"activationType"`
}

func (obj Bootstrapping) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActivationPoint`:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Serialize `WhitelistedVault`:
	err = encoder.Encode(obj.WhitelistedVault)
	if err != nil {
		return errors.NewField("WhitelistedVault", err)
	}
	// Serialize `PoolCreator`:
	err = encoder.Encode(obj.PoolCreator)
	if err != nil {
		return errors.NewField("PoolCreator", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	return nil
}

func (obj Bootstrapping) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Bootstrapping: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Bootstrapping) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Deserialize `WhitelistedVault`:
	err = decoder.Decode(&obj.WhitelistedVault)
	if err != nil {
		return errors.NewField("WhitelistedVault", err)
	}
	// Deserialize `PoolCreator`:
	err = decoder.Decode(&obj.PoolCreator)
	if err != nil {
		return errors.NewField("PoolCreator", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	return nil
}

func (obj *Bootstrapping) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Bootstrapping: %w", err)
	}
	return nil
}

func UnmarshalBootstrapping(buf []byte) (*Bootstrapping, error) {
	obj := new(Bootstrapping)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Type of the activation
type ActivationType binary.BorshEnum

const (
	ActivationType_Slot ActivationType = iota
	ActivationType_Timestamp
)

func (value ActivationType) String() string {
	switch value {
	case ActivationType_Slot:
		return "Slot"
	case ActivationType_Timestamp:
		return "Timestamp"
	default:
		return ""
	}
}

// Rounding direction
type RoundDirection binary.BorshEnum

const (
	RoundDirection_Floor RoundDirection = iota
	RoundDirection_Ceiling
)

func (value RoundDirection) String() string {
	switch value {
	case RoundDirection_Floor:
		return "Floor"
	case RoundDirection_Ceiling:
		return "Ceiling"
	default:
		return ""
	}
}

// Trade (swap) direction
type TradeDirection binary.BorshEnum

const (
	TradeDirection_AtoB TradeDirection = iota
	TradeDirection_BtoA
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirection_AtoB:
		return "AtoB"
	case TradeDirection_BtoA:
		return "BtoA"
	default:
		return ""
	}
}

// Type of the swap curve
// The "isNewCurveType" interface for the "NewCurveType" complex enum.
type NewCurveType interface {
	isNewCurveType()
}

type newCurveTypeEnumContainer struct {
	Enum            binary.BorshEnum `bin:"enum"`
	ConstantProduct NewCurveType_ConstantProduct
	Stable          NewCurveType_Stable
	NewCurve        NewCurveType_NewCurve
}

func DecodeNewCurveType(decoder *binary.Decoder) (NewCurveType, error) {
	{
		tmp := new(newCurveTypeEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing NewCurveType: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return (*NewCurveType_ConstantProduct)(&tmp.Enum), nil
		case 1:
			return &tmp.Stable, nil
		case 2:
			return &tmp.NewCurve, nil
		default:
			return nil, fmt.Errorf("NewCurveType: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeNewCurveType(encoder *binary.Encoder, value NewCurveType) error {
	{
		tmp := newCurveTypeEnumContainer{}
		switch realvalue := value.(type) {
		case *NewCurveType_ConstantProduct:
			tmp.Enum = 0
			tmp.ConstantProduct = *realvalue
		case *NewCurveType_Stable:
			tmp.Enum = 1
			tmp.Stable = *realvalue
		case *NewCurveType_NewCurve:
			tmp.Enum = 2
			tmp.NewCurve = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

type NewCurveType_ConstantProduct uint8

func (obj NewCurveType_ConstantProduct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *NewCurveType_ConstantProduct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *NewCurveType_ConstantProduct) isNewCurveType() {}

// Variant "Stable" of enum "NewCurveType"
type NewCurveType_Stable struct {
	Amp                     uint64          `json:"amp"`
	TokenMultiplier         TokenMultiplier `json:"tokenMultiplier"`
	Depeg                   Depeg           `json:"depeg"`
	LastAmpUpdatedTimestamp uint64          `json:"lastAmpUpdatedTimestamp"`
}

func (obj NewCurveType_Stable) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amp`:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return errors.NewField("Amp", err)
	}
	// Serialize `TokenMultiplier`:
	err = encoder.Encode(obj.TokenMultiplier)
	if err != nil {
		return errors.NewField("TokenMultiplier", err)
	}
	// Serialize `Depeg`:
	err = encoder.Encode(obj.Depeg)
	if err != nil {
		return errors.NewField("Depeg", err)
	}
	// Serialize `LastAmpUpdatedTimestamp`:
	err = encoder.Encode(obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return errors.NewField("LastAmpUpdatedTimestamp", err)
	}
	return nil
}

func (obj NewCurveType_Stable) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding NewCurveType_Stable: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *NewCurveType_Stable) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return errors.NewField("Amp", err)
	}
	// Deserialize `TokenMultiplier`:
	err = decoder.Decode(&obj.TokenMultiplier)
	if err != nil {
		return errors.NewField("TokenMultiplier", err)
	}
	// Deserialize `Depeg`:
	err = decoder.Decode(&obj.Depeg)
	if err != nil {
		return errors.NewField("Depeg", err)
	}
	// Deserialize `LastAmpUpdatedTimestamp`:
	err = decoder.Decode(&obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return errors.NewField("LastAmpUpdatedTimestamp", err)
	}
	return nil
}

func (obj *NewCurveType_Stable) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling NewCurveType_Stable: %w", err)
	}
	return nil
}

func UnmarshalNewCurveType_Stable(buf []byte) (*NewCurveType_Stable, error) {
	obj := new(NewCurveType_Stable)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *NewCurveType_Stable) isNewCurveType() {}

// Variant "NewCurve" of enum "NewCurveType"
type NewCurveType_NewCurve struct {
	FieldOne uint64 `json:"fieldOne"`
	FieldTwo uint64 `json:"fieldTwo"`
}

func (obj NewCurveType_NewCurve) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FieldOne`:
	err = encoder.Encode(obj.FieldOne)
	if err != nil {
		return errors.NewField("FieldOne", err)
	}
	// Serialize `FieldTwo`:
	err = encoder.Encode(obj.FieldTwo)
	if err != nil {
		return errors.NewField("FieldTwo", err)
	}
	return nil
}

func (obj NewCurveType_NewCurve) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding NewCurveType_NewCurve: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *NewCurveType_NewCurve) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FieldOne`:
	err = decoder.Decode(&obj.FieldOne)
	if err != nil {
		return errors.NewField("FieldOne", err)
	}
	// Deserialize `FieldTwo`:
	err = decoder.Decode(&obj.FieldTwo)
	if err != nil {
		return errors.NewField("FieldTwo", err)
	}
	return nil
}

func (obj *NewCurveType_NewCurve) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling NewCurveType_NewCurve: %w", err)
	}
	return nil
}

func UnmarshalNewCurveType_NewCurve(buf []byte) (*NewCurveType_NewCurve, error) {
	obj := new(NewCurveType_NewCurve)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *NewCurveType_NewCurve) isNewCurveType() {}

// Type of the swap curve
// The "isCurveType" interface for the "CurveType" complex enum.
type CurveType interface {
	isCurveType()
}

type curveTypeEnumContainer struct {
	Enum            binary.BorshEnum `bin:"enum"`
	ConstantProduct CurveType_ConstantProduct
	Stable          CurveType_Stable
}

func DecodeCurveType(decoder *binary.Decoder) (CurveType, error) {
	{
		tmp := new(curveTypeEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing CurveType: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return (*CurveType_ConstantProduct)(&tmp.Enum), nil
		case 1:
			return &tmp.Stable, nil
		default:
			return nil, fmt.Errorf("CurveType: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeCurveType(encoder *binary.Encoder, value CurveType) error {
	{
		tmp := curveTypeEnumContainer{}
		switch realvalue := value.(type) {
		case *CurveType_ConstantProduct:
			tmp.Enum = 0
			tmp.ConstantProduct = *realvalue
		case *CurveType_Stable:
			tmp.Enum = 1
			tmp.Stable = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

type CurveType_ConstantProduct uint8

func (obj CurveType_ConstantProduct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CurveType_ConstantProduct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *CurveType_ConstantProduct) isCurveType() {}

// Variant "Stable" of enum "CurveType"
type CurveType_Stable struct {
	Amp                     uint64          `json:"amp"`
	TokenMultiplier         TokenMultiplier `json:"tokenMultiplier"`
	Depeg                   Depeg           `json:"depeg"`
	LastAmpUpdatedTimestamp uint64          `json:"lastAmpUpdatedTimestamp"`
}

func (obj CurveType_Stable) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amp`:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return errors.NewField("Amp", err)
	}
	// Serialize `TokenMultiplier`:
	err = encoder.Encode(obj.TokenMultiplier)
	if err != nil {
		return errors.NewField("TokenMultiplier", err)
	}
	// Serialize `Depeg`:
	err = encoder.Encode(obj.Depeg)
	if err != nil {
		return errors.NewField("Depeg", err)
	}
	// Serialize `LastAmpUpdatedTimestamp`:
	err = encoder.Encode(obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return errors.NewField("LastAmpUpdatedTimestamp", err)
	}
	return nil
}

func (obj CurveType_Stable) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CurveType_Stable: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CurveType_Stable) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return errors.NewField("Amp", err)
	}
	// Deserialize `TokenMultiplier`:
	err = decoder.Decode(&obj.TokenMultiplier)
	if err != nil {
		return errors.NewField("TokenMultiplier", err)
	}
	// Deserialize `Depeg`:
	err = decoder.Decode(&obj.Depeg)
	if err != nil {
		return errors.NewField("Depeg", err)
	}
	// Deserialize `LastAmpUpdatedTimestamp`:
	err = decoder.Decode(&obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return errors.NewField("LastAmpUpdatedTimestamp", err)
	}
	return nil
}

func (obj *CurveType_Stable) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CurveType_Stable: %w", err)
	}
	return nil
}

func UnmarshalCurveType_Stable(buf []byte) (*CurveType_Stable, error) {
	obj := new(CurveType_Stable)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *CurveType_Stable) isCurveType() {}

// Type of depeg pool
type DepegType binary.BorshEnum

const (
	DepegType_None DepegType = iota
	DepegType_Marinade
	DepegType_Lido
	DepegType_SplStake
)

func (value DepegType) String() string {
	switch value {
	case DepegType_None:
		return "None"
	case DepegType_Marinade:
		return "Marinade"
	case DepegType_Lido:
		return "Lido"
	case DepegType_SplStake:
		return "SplStake"
	default:
		return ""
	}
}

// Round up, down
type Rounding binary.BorshEnum

const (
	Rounding_Up Rounding = iota
	Rounding_Down
)

func (value Rounding) String() string {
	switch value {
	case Rounding_Up:
		return "Up"
	case Rounding_Down:
		return "Down"
	default:
		return ""
	}
}

// Pool type
type PoolType binary.BorshEnum

const (
	PoolType_Permissioned PoolType = iota
	PoolType_Permissionless
)

func (value PoolType) String() string {
	switch value {
	case PoolType_Permissioned:
		return "Permissioned"
	case PoolType_Permissionless:
		return "Permissionless"
	default:
		return ""
	}
}

type Config struct {
	PoolFees           PoolFees           `json:"poolFees"`
	ActivationDuration uint64             `json:"activationDuration"`
	VaultConfigKey     solanago.PublicKey `json:"vaultConfigKey"`

	// Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config.
	PoolCreatorAuthority solanago.PublicKey `json:"poolCreatorAuthority"`

	// Activation type
	ActivationType      uint8      `json:"activationType"`
	PartnerFeeNumerator uint64     `json:"partnerFeeNumerator"`
	Padding             [219]uint8 `json:"padding"`
}

func (obj Config) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Serialize `ActivationDuration`:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return errors.NewField("ActivationDuration", err)
	}
	// Serialize `VaultConfigKey`:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Serialize `PoolCreatorAuthority`:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `PartnerFeeNumerator`:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return errors.NewField("PartnerFeeNumerator", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj Config) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Config: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return errors.NewField("PoolFees", err)
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return errors.NewField("ActivationDuration", err)
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return errors.NewField("VaultConfigKey", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return errors.NewField("PoolCreatorAuthority", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return errors.NewField("PartnerFeeNumerator", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *Config) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Config: %w", err)
	}
	return nil
}

func UnmarshalConfig(buf []byte) (*Config, error) {
	obj := new(Config)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// State of lock escrow account
type LockEscrow struct {
	// Pool address
	Pool solanago.PublicKey `json:"pool"`

	// Owner address
	Owner solanago.PublicKey `json:"owner"`

	// Vault address, store the lock user lock
	EscrowVault solanago.PublicKey `json:"escrowVault"`

	// bump, used to sign
	Bump uint8 `json:"bump"`

	// Total locked amount
	TotalLockedAmount uint64 `json:"totalLockedAmount"`

	// Lp per token, virtual price of lp token
	LpPerToken binary.Uint128 `json:"lpPerToken"`

	// Unclaimed fee pending
	UnclaimedFeePending uint64 `json:"unclaimedFeePending"`

	// Total a fee claimed so far
	AFee uint64 `json:"aFee"`

	// Total b fee claimed so far
	BFee uint64 `json:"bFee"`

	// padding
	Padding [7]uint8 `json:"padding"`
}

func (obj LockEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `EscrowVault`:
	err = encoder.Encode(obj.EscrowVault)
	if err != nil {
		return errors.NewField("EscrowVault", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `TotalLockedAmount`:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Serialize `LpPerToken`:
	err = encoder.Encode(obj.LpPerToken)
	if err != nil {
		return errors.NewField("LpPerToken", err)
	}
	// Serialize `UnclaimedFeePending`:
	err = encoder.Encode(obj.UnclaimedFeePending)
	if err != nil {
		return errors.NewField("UnclaimedFeePending", err)
	}
	// Serialize `AFee`:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return errors.NewField("AFee", err)
	}
	// Serialize `BFee`:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return errors.NewField("BFee", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj LockEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `EscrowVault`:
	err = decoder.Decode(&obj.EscrowVault)
	if err != nil {
		return errors.NewField("EscrowVault", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Deserialize `LpPerToken`:
	err = decoder.Decode(&obj.LpPerToken)
	if err != nil {
		return errors.NewField("LpPerToken", err)
	}
	// Deserialize `UnclaimedFeePending`:
	err = decoder.Decode(&obj.UnclaimedFeePending)
	if err != nil {
		return errors.NewField("UnclaimedFeePending", err)
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return errors.NewField("AFee", err)
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return errors.NewField("BFee", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *LockEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockEscrow: %w", err)
	}
	return nil
}

func UnmarshalLockEscrow(buf []byte) (*LockEscrow, error) {
	obj := new(LockEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// State of pool account
type Pool struct {
	// LP token mint of the pool
	LpMint solanago.PublicKey `json:"lpMint"`

	// Token A mint of the pool. Eg: USDT
	TokenAMint solanago.PublicKey `json:"tokenAMint"`

	// Token B mint of the pool. Eg: USDC
	TokenBMint solanago.PublicKey `json:"tokenBMint"`

	// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
	AVault solanago.PublicKey `json:"aVault"`

	// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
	BVault solanago.PublicKey `json:"bVault"`

	// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	AVaultLp solanago.PublicKey `json:"aVaultLp"`

	// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	BVaultLp solanago.PublicKey `json:"bVaultLp"`

	// "A" vault lp bump. Used to create signer seeds.
	AVaultLpBump uint8 `json:"aVaultLpBump"`

	// Flag to determine whether the pool is enabled, or disabled.
	Enabled bool `json:"enabled"`

	// Protocol fee token account for token A. Used to receive trading fee.
	ProtocolTokenAFee solanago.PublicKey `json:"protocolTokenAFee"`

	// Protocol fee token account for token B. Used to receive trading fee.
	ProtocolTokenBFee solanago.PublicKey `json:"protocolTokenBFee"`

	// Fee last updated timestamp
	FeeLastUpdatedAt uint64    `json:"feeLastUpdatedAt"`
	Padding0         [24]uint8 `json:"padding0"`

	// Store the fee charges setting.
	Fees PoolFees `json:"fees"`

	// Pool type
	PoolType PoolType `json:"poolType"`

	// Stake pubkey of SPL stake pool
	Stake solanago.PublicKey `json:"stake"`

	// Total locked lp token
	TotalLockedLp uint64 `json:"totalLockedLp"`

	// bootstrapping config
	Bootstrapping Bootstrapping `json:"bootstrapping"`
	PartnerInfo   PartnerInfo   `json:"partnerInfo"`

	// Padding for future pool field
	Padding Padding `json:"padding"`

	// The type of the swap curve supported by the pool.
	CurveType CurveType `json:"curveType"`

	// padding
	Padding1 [19]uint8 `json:"padding1"`
}

func (obj Pool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpMint`:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return errors.NewField("LpMint", err)
	}
	// Serialize `TokenAMint`:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Serialize `TokenBMint`:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Serialize `AVault`:
	err = encoder.Encode(obj.AVault)
	if err != nil {
		return errors.NewField("AVault", err)
	}
	// Serialize `BVault`:
	err = encoder.Encode(obj.BVault)
	if err != nil {
		return errors.NewField("BVault", err)
	}
	// Serialize `AVaultLp`:
	err = encoder.Encode(obj.AVaultLp)
	if err != nil {
		return errors.NewField("AVaultLp", err)
	}
	// Serialize `BVaultLp`:
	err = encoder.Encode(obj.BVaultLp)
	if err != nil {
		return errors.NewField("BVaultLp", err)
	}
	// Serialize `AVaultLpBump`:
	err = encoder.Encode(obj.AVaultLpBump)
	if err != nil {
		return errors.NewField("AVaultLpBump", err)
	}
	// Serialize `Enabled`:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return errors.NewField("Enabled", err)
	}
	// Serialize `ProtocolTokenAFee`:
	err = encoder.Encode(obj.ProtocolTokenAFee)
	if err != nil {
		return errors.NewField("ProtocolTokenAFee", err)
	}
	// Serialize `ProtocolTokenBFee`:
	err = encoder.Encode(obj.ProtocolTokenBFee)
	if err != nil {
		return errors.NewField("ProtocolTokenBFee", err)
	}
	// Serialize `FeeLastUpdatedAt`:
	err = encoder.Encode(obj.FeeLastUpdatedAt)
	if err != nil {
		return errors.NewField("FeeLastUpdatedAt", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `PoolType`:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Serialize `Stake`:
	err = encoder.Encode(obj.Stake)
	if err != nil {
		return errors.NewField("Stake", err)
	}
	// Serialize `TotalLockedLp`:
	err = encoder.Encode(obj.TotalLockedLp)
	if err != nil {
		return errors.NewField("TotalLockedLp", err)
	}
	// Serialize `Bootstrapping`:
	err = encoder.Encode(obj.Bootstrapping)
	if err != nil {
		return errors.NewField("Bootstrapping", err)
	}
	// Serialize `PartnerInfo`:
	err = encoder.Encode(obj.PartnerInfo)
	if err != nil {
		return errors.NewField("PartnerInfo", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `CurveType`:
	{
		err := EncodeCurveType(encoder, obj.CurveType)
		if err != nil {
			return errors.NewField("CurveType", err)
		}
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj Pool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Pool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return errors.NewField("LpMint", err)
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Deserialize `AVault`:
	err = decoder.Decode(&obj.AVault)
	if err != nil {
		return errors.NewField("AVault", err)
	}
	// Deserialize `BVault`:
	err = decoder.Decode(&obj.BVault)
	if err != nil {
		return errors.NewField("BVault", err)
	}
	// Deserialize `AVaultLp`:
	err = decoder.Decode(&obj.AVaultLp)
	if err != nil {
		return errors.NewField("AVaultLp", err)
	}
	// Deserialize `BVaultLp`:
	err = decoder.Decode(&obj.BVaultLp)
	if err != nil {
		return errors.NewField("BVaultLp", err)
	}
	// Deserialize `AVaultLpBump`:
	err = decoder.Decode(&obj.AVaultLpBump)
	if err != nil {
		return errors.NewField("AVaultLpBump", err)
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return errors.NewField("Enabled", err)
	}
	// Deserialize `ProtocolTokenAFee`:
	err = decoder.Decode(&obj.ProtocolTokenAFee)
	if err != nil {
		return errors.NewField("ProtocolTokenAFee", err)
	}
	// Deserialize `ProtocolTokenBFee`:
	err = decoder.Decode(&obj.ProtocolTokenBFee)
	if err != nil {
		return errors.NewField("ProtocolTokenBFee", err)
	}
	// Deserialize `FeeLastUpdatedAt`:
	err = decoder.Decode(&obj.FeeLastUpdatedAt)
	if err != nil {
		return errors.NewField("FeeLastUpdatedAt", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Deserialize `Stake`:
	err = decoder.Decode(&obj.Stake)
	if err != nil {
		return errors.NewField("Stake", err)
	}
	// Deserialize `TotalLockedLp`:
	err = decoder.Decode(&obj.TotalLockedLp)
	if err != nil {
		return errors.NewField("TotalLockedLp", err)
	}
	// Deserialize `Bootstrapping`:
	err = decoder.Decode(&obj.Bootstrapping)
	if err != nil {
		return errors.NewField("Bootstrapping", err)
	}
	// Deserialize `PartnerInfo`:
	err = decoder.Decode(&obj.PartnerInfo)
	if err != nil {
		return errors.NewField("PartnerInfo", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `CurveType`:
	{
		var err error
		obj.CurveType, err = DecodeCurveType(decoder)
		if err != nil {
			return err
		}
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *Pool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Pool: %w", err)
	}
	return nil
}

func UnmarshalPool(buf []byte) (*Pool, error) {
	obj := new(Pool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddLiquidity struct {
	LpMintAmount uint64 `json:"lpMintAmount"`
	TokenAAmount uint64 `json:"tokenAAmount"`
	TokenBAmount uint64 `json:"tokenBAmount"`
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpMintAmount`:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return errors.NewField("LpMintAmount", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj AddLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return errors.NewField("LpMintAmount", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj *AddLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidity: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidity(buf []byte) (*AddLiquidity, error) {
	obj := new(AddLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidity struct {
	LpUnmintAmount  uint64 `json:"lpUnmintAmount"`
	TokenAOutAmount uint64 `json:"tokenAOutAmount"`
	TokenBOutAmount uint64 `json:"tokenBOutAmount"`
}

func (obj RemoveLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpUnmintAmount`:
	err = encoder.Encode(obj.LpUnmintAmount)
	if err != nil {
		return errors.NewField("LpUnmintAmount", err)
	}
	// Serialize `TokenAOutAmount`:
	err = encoder.Encode(obj.TokenAOutAmount)
	if err != nil {
		return errors.NewField("TokenAOutAmount", err)
	}
	// Serialize `TokenBOutAmount`:
	err = encoder.Encode(obj.TokenBOutAmount)
	if err != nil {
		return errors.NewField("TokenBOutAmount", err)
	}
	return nil
}

func (obj RemoveLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpUnmintAmount`:
	err = decoder.Decode(&obj.LpUnmintAmount)
	if err != nil {
		return errors.NewField("LpUnmintAmount", err)
	}
	// Deserialize `TokenAOutAmount`:
	err = decoder.Decode(&obj.TokenAOutAmount)
	if err != nil {
		return errors.NewField("TokenAOutAmount", err)
	}
	// Deserialize `TokenBOutAmount`:
	err = decoder.Decode(&obj.TokenBOutAmount)
	if err != nil {
		return errors.NewField("TokenBOutAmount", err)
	}
	return nil
}

func (obj *RemoveLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidity: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidity(buf []byte) (*RemoveLiquidity, error) {
	obj := new(RemoveLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BootstrapLiquidity struct {
	LpMintAmount uint64             `json:"lpMintAmount"`
	TokenAAmount uint64             `json:"tokenAAmount"`
	TokenBAmount uint64             `json:"tokenBAmount"`
	Pool         solanago.PublicKey `json:"pool"`
}

func (obj BootstrapLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpMintAmount`:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return errors.NewField("LpMintAmount", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj BootstrapLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BootstrapLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BootstrapLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return errors.NewField("LpMintAmount", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj *BootstrapLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BootstrapLiquidity: %w", err)
	}
	return nil
}

func UnmarshalBootstrapLiquidity(buf []byte) (*BootstrapLiquidity, error) {
	obj := new(BootstrapLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Swap struct {
	InAmount    uint64 `json:"inAmount"`
	OutAmount   uint64 `json:"outAmount"`
	TradeFee    uint64 `json:"tradeFee"`
	ProtocolFee uint64 `json:"protocolFee"`
	HostFee     uint64 `json:"hostFee"`
}

func (obj Swap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `InAmount`:
	err = encoder.Encode(obj.InAmount)
	if err != nil {
		return errors.NewField("InAmount", err)
	}
	// Serialize `OutAmount`:
	err = encoder.Encode(obj.OutAmount)
	if err != nil {
		return errors.NewField("OutAmount", err)
	}
	// Serialize `TradeFee`:
	err = encoder.Encode(obj.TradeFee)
	if err != nil {
		return errors.NewField("TradeFee", err)
	}
	// Serialize `ProtocolFee`:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Serialize `HostFee`:
	err = encoder.Encode(obj.HostFee)
	if err != nil {
		return errors.NewField("HostFee", err)
	}
	return nil
}

func (obj Swap) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Swap: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Swap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `InAmount`:
	err = decoder.Decode(&obj.InAmount)
	if err != nil {
		return errors.NewField("InAmount", err)
	}
	// Deserialize `OutAmount`:
	err = decoder.Decode(&obj.OutAmount)
	if err != nil {
		return errors.NewField("OutAmount", err)
	}
	// Deserialize `TradeFee`:
	err = decoder.Decode(&obj.TradeFee)
	if err != nil {
		return errors.NewField("TradeFee", err)
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Deserialize `HostFee`:
	err = decoder.Decode(&obj.HostFee)
	if err != nil {
		return errors.NewField("HostFee", err)
	}
	return nil
}

func (obj *Swap) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Swap: %w", err)
	}
	return nil
}

func UnmarshalSwap(buf []byte) (*Swap, error) {
	obj := new(Swap)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SetPoolFees struct {
	TradeFeeNumerator           uint64             `json:"tradeFeeNumerator"`
	TradeFeeDenominator         uint64             `json:"tradeFeeDenominator"`
	ProtocolTradeFeeNumerator   uint64             `json:"protocolTradeFeeNumerator"`
	ProtocolTradeFeeDenominator uint64             `json:"protocolTradeFeeDenominator"`
	Pool                        solanago.PublicKey `json:"pool"`
}

func (obj SetPoolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Serialize `TradeFeeDenominator`:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return errors.NewField("TradeFeeDenominator", err)
	}
	// Serialize `ProtocolTradeFeeNumerator`:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Serialize `ProtocolTradeFeeDenominator`:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeDenominator", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj SetPoolFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SetPoolFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SetPoolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return errors.NewField("TradeFeeDenominator", err)
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeDenominator", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj *SetPoolFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SetPoolFees: %w", err)
	}
	return nil
}

func UnmarshalSetPoolFees(buf []byte) (*SetPoolFees, error) {
	obj := new(SetPoolFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolInfo struct {
	TokenAAmount     uint64  `json:"tokenAAmount"`
	TokenBAmount     uint64  `json:"tokenBAmount"`
	VirtualPrice     float64 `json:"virtualPrice"`
	CurrentTimestamp uint64  `json:"currentTimestamp"`
}

func (obj PoolInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Serialize `VirtualPrice`:
	err = encoder.Encode(obj.VirtualPrice)
	if err != nil {
		return errors.NewField("VirtualPrice", err)
	}
	// Serialize `CurrentTimestamp`:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return errors.NewField("CurrentTimestamp", err)
	}
	return nil
}

func (obj PoolInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	// Deserialize `VirtualPrice`:
	err = decoder.Decode(&obj.VirtualPrice)
	if err != nil {
		return errors.NewField("VirtualPrice", err)
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return errors.NewField("CurrentTimestamp", err)
	}
	return nil
}

func (obj *PoolInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolInfo: %w", err)
	}
	return nil
}

func UnmarshalPoolInfo(buf []byte) (*PoolInfo, error) {
	obj := new(PoolInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TransferAdmin struct {
	Admin    solanago.PublicKey `json:"admin"`
	NewAdmin solanago.PublicKey `json:"newAdmin"`
	Pool     solanago.PublicKey `json:"pool"`
}

func (obj TransferAdmin) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Admin`:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Serialize `NewAdmin`:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return errors.NewField("NewAdmin", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj TransferAdmin) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TransferAdmin: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TransferAdmin) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return errors.NewField("NewAdmin", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj *TransferAdmin) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TransferAdmin: %w", err)
	}
	return nil
}

func UnmarshalTransferAdmin(buf []byte) (*TransferAdmin, error) {
	obj := new(TransferAdmin)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OverrideCurveParam struct {
	NewAmp           uint64             `json:"newAmp"`
	UpdatedTimestamp uint64             `json:"updatedTimestamp"`
	Pool             solanago.PublicKey `json:"pool"`
}

func (obj OverrideCurveParam) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `NewAmp`:
	err = encoder.Encode(obj.NewAmp)
	if err != nil {
		return errors.NewField("NewAmp", err)
	}
	// Serialize `UpdatedTimestamp`:
	err = encoder.Encode(obj.UpdatedTimestamp)
	if err != nil {
		return errors.NewField("UpdatedTimestamp", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj OverrideCurveParam) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OverrideCurveParam: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OverrideCurveParam) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `NewAmp`:
	err = decoder.Decode(&obj.NewAmp)
	if err != nil {
		return errors.NewField("NewAmp", err)
	}
	// Deserialize `UpdatedTimestamp`:
	err = decoder.Decode(&obj.UpdatedTimestamp)
	if err != nil {
		return errors.NewField("UpdatedTimestamp", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj *OverrideCurveParam) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OverrideCurveParam: %w", err)
	}
	return nil
}

func UnmarshalOverrideCurveParam(buf []byte) (*OverrideCurveParam, error) {
	obj := new(OverrideCurveParam)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolCreated struct {
	LpMint     solanago.PublicKey `json:"lpMint"`
	TokenAMint solanago.PublicKey `json:"tokenAMint"`
	TokenBMint solanago.PublicKey `json:"tokenBMint"`
	PoolType   PoolType           `json:"poolType"`
	Pool       solanago.PublicKey `json:"pool"`
}

func (obj PoolCreated) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpMint`:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return errors.NewField("LpMint", err)
	}
	// Serialize `TokenAMint`:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Serialize `TokenBMint`:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Serialize `PoolType`:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj PoolCreated) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolCreated: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolCreated) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return errors.NewField("LpMint", err)
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return errors.NewField("TokenAMint", err)
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return errors.NewField("TokenBMint", err)
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return errors.NewField("PoolType", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	return nil
}

func (obj *PoolCreated) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolCreated: %w", err)
	}
	return nil
}

func UnmarshalPoolCreated(buf []byte) (*PoolCreated, error) {
	obj := new(PoolCreated)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolEnabled struct {
	Pool    solanago.PublicKey `json:"pool"`
	Enabled bool               `json:"enabled"`
}

func (obj PoolEnabled) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Enabled`:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return errors.NewField("Enabled", err)
	}
	return nil
}

func (obj PoolEnabled) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolEnabled: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolEnabled) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return errors.NewField("Enabled", err)
	}
	return nil
}

func (obj *PoolEnabled) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolEnabled: %w", err)
	}
	return nil
}

func UnmarshalPoolEnabled(buf []byte) (*PoolEnabled, error) {
	obj := new(PoolEnabled)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MigrateFeeAccount struct {
	Pool              solanago.PublicKey `json:"pool"`
	NewAdminTokenAFee solanago.PublicKey `json:"newAdminTokenAFee"`
	NewAdminTokenBFee solanago.PublicKey `json:"newAdminTokenBFee"`
	TokenAAmount      uint64             `json:"tokenAAmount"`
	TokenBAmount      uint64             `json:"tokenBAmount"`
}

func (obj MigrateFeeAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `NewAdminTokenAFee`:
	err = encoder.Encode(obj.NewAdminTokenAFee)
	if err != nil {
		return errors.NewField("NewAdminTokenAFee", err)
	}
	// Serialize `NewAdminTokenBFee`:
	err = encoder.Encode(obj.NewAdminTokenBFee)
	if err != nil {
		return errors.NewField("NewAdminTokenBFee", err)
	}
	// Serialize `TokenAAmount`:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Serialize `TokenBAmount`:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj MigrateFeeAccount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MigrateFeeAccount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MigrateFeeAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `NewAdminTokenAFee`:
	err = decoder.Decode(&obj.NewAdminTokenAFee)
	if err != nil {
		return errors.NewField("NewAdminTokenAFee", err)
	}
	// Deserialize `NewAdminTokenBFee`:
	err = decoder.Decode(&obj.NewAdminTokenBFee)
	if err != nil {
		return errors.NewField("NewAdminTokenBFee", err)
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return errors.NewField("TokenAAmount", err)
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return errors.NewField("TokenBAmount", err)
	}
	return nil
}

func (obj *MigrateFeeAccount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MigrateFeeAccount: %w", err)
	}
	return nil
}

func UnmarshalMigrateFeeAccount(buf []byte) (*MigrateFeeAccount, error) {
	obj := new(MigrateFeeAccount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateLockEscrow struct {
	Pool  solanago.PublicKey `json:"pool"`
	Owner solanago.PublicKey `json:"owner"`
}

func (obj CreateLockEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj CreateLockEscrow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateLockEscrow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateLockEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj *CreateLockEscrow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateLockEscrow: %w", err)
	}
	return nil
}

func UnmarshalCreateLockEscrow(buf []byte) (*CreateLockEscrow, error) {
	obj := new(CreateLockEscrow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Lock struct {
	Pool   solanago.PublicKey `json:"pool"`
	Owner  solanago.PublicKey `json:"owner"`
	Amount uint64             `json:"amount"`
}

func (obj Lock) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj Lock) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Lock: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Lock) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *Lock) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Lock: %w", err)
	}
	return nil
}

func UnmarshalLock(buf []byte) (*Lock, error) {
	obj := new(Lock)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClaimFee struct {
	Pool   solanago.PublicKey `json:"pool"`
	Owner  solanago.PublicKey `json:"owner"`
	Amount uint64             `json:"amount"`
	AFee   uint64             `json:"aFee"`
	BFee   uint64             `json:"bFee"`
}

func (obj ClaimFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `AFee`:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return errors.NewField("AFee", err)
	}
	// Serialize `BFee`:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return errors.NewField("BFee", err)
	}
	return nil
}

func (obj ClaimFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return errors.NewField("AFee", err)
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return errors.NewField("BFee", err)
	}
	return nil
}

func (obj *ClaimFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimFee: %w", err)
	}
	return nil
}

func UnmarshalClaimFee(buf []byte) (*ClaimFee, error) {
	obj := new(ClaimFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateConfig struct {
	TradeFeeNumerator         uint64             `json:"tradeFeeNumerator"`
	ProtocolTradeFeeNumerator uint64             `json:"protocolTradeFeeNumerator"`
	Config                    solanago.PublicKey `json:"config"`
}

func (obj CreateConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Serialize `ProtocolTradeFeeNumerator`:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	return nil
}

func (obj CreateConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return errors.NewField("TradeFeeNumerator", err)
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return errors.NewField("ProtocolTradeFeeNumerator", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	return nil
}

func (obj *CreateConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateConfig: %w", err)
	}
	return nil
}

func UnmarshalCreateConfig(buf []byte) (*CreateConfig, error) {
	obj := new(CreateConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CloseConfig struct {
	Config solanago.PublicKey `json:"config"`
}

func (obj CloseConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	return nil
}

func (obj CloseConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CloseConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CloseConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	return nil
}

func (obj *CloseConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CloseConfig: %w", err)
	}
	return nil
}

func UnmarshalCloseConfig(buf []byte) (*CloseConfig, error) {
	obj := new(CloseConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type WithdrawProtocolFees struct {
	Pool              solanago.PublicKey `json:"pool"`
	ProtocolAFee      uint64             `json:"protocolAFee"`
	ProtocolBFee      uint64             `json:"protocolBFee"`
	ProtocolAFeeOwner solanago.PublicKey `json:"protocolAFeeOwner"`
	ProtocolBFeeOwner solanago.PublicKey `json:"protocolBFeeOwner"`
}

func (obj WithdrawProtocolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `ProtocolAFee`:
	err = encoder.Encode(obj.ProtocolAFee)
	if err != nil {
		return errors.NewField("ProtocolAFee", err)
	}
	// Serialize `ProtocolBFee`:
	err = encoder.Encode(obj.ProtocolBFee)
	if err != nil {
		return errors.NewField("ProtocolBFee", err)
	}
	// Serialize `ProtocolAFeeOwner`:
	err = encoder.Encode(obj.ProtocolAFeeOwner)
	if err != nil {
		return errors.NewField("ProtocolAFeeOwner", err)
	}
	// Serialize `ProtocolBFeeOwner`:
	err = encoder.Encode(obj.ProtocolBFeeOwner)
	if err != nil {
		return errors.NewField("ProtocolBFeeOwner", err)
	}
	return nil
}

func (obj WithdrawProtocolFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WithdrawProtocolFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WithdrawProtocolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `ProtocolAFee`:
	err = decoder.Decode(&obj.ProtocolAFee)
	if err != nil {
		return errors.NewField("ProtocolAFee", err)
	}
	// Deserialize `ProtocolBFee`:
	err = decoder.Decode(&obj.ProtocolBFee)
	if err != nil {
		return errors.NewField("ProtocolBFee", err)
	}
	// Deserialize `ProtocolAFeeOwner`:
	err = decoder.Decode(&obj.ProtocolAFeeOwner)
	if err != nil {
		return errors.NewField("ProtocolAFeeOwner", err)
	}
	// Deserialize `ProtocolBFeeOwner`:
	err = decoder.Decode(&obj.ProtocolBFeeOwner)
	if err != nil {
		return errors.NewField("ProtocolBFeeOwner", err)
	}
	return nil
}

func (obj *WithdrawProtocolFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawProtocolFees: %w", err)
	}
	return nil
}

func UnmarshalWithdrawProtocolFees(buf []byte) (*WithdrawProtocolFees, error) {
	obj := new(WithdrawProtocolFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PartnerClaimFees struct {
	Pool    solanago.PublicKey `json:"pool"`
	FeeA    uint64             `json:"feeA"`
	FeeB    uint64             `json:"feeB"`
	Partner solanago.PublicKey `json:"partner"`
}

func (obj PartnerClaimFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `FeeA`:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return errors.NewField("FeeA", err)
	}
	// Serialize `FeeB`:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return errors.NewField("FeeB", err)
	}
	// Serialize `Partner`:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	return nil
}

func (obj PartnerClaimFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PartnerClaimFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PartnerClaimFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return errors.NewField("FeeA", err)
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return errors.NewField("FeeB", err)
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return errors.NewField("Partner", err)
	}
	return nil
}

func (obj *PartnerClaimFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PartnerClaimFees: %w", err)
	}
	return nil
}

func UnmarshalPartnerClaimFees(buf []byte) (*PartnerClaimFees, error) {
	obj := new(PartnerClaimFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MoveLockedLp struct {
	Pool           solanago.PublicKey `json:"pool"`
	FromLockEscrow solanago.PublicKey `json:"fromLockEscrow"`
	ToLockEscrow   solanago.PublicKey `json:"toLockEscrow"`
	Amount         uint64             `json:"amount"`
}

func (obj MoveLockedLp) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `FromLockEscrow`:
	err = encoder.Encode(obj.FromLockEscrow)
	if err != nil {
		return errors.NewField("FromLockEscrow", err)
	}
	// Serialize `ToLockEscrow`:
	err = encoder.Encode(obj.ToLockEscrow)
	if err != nil {
		return errors.NewField("ToLockEscrow", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj MoveLockedLp) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MoveLockedLp: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MoveLockedLp) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `FromLockEscrow`:
	err = decoder.Decode(&obj.FromLockEscrow)
	if err != nil {
		return errors.NewField("FromLockEscrow", err)
	}
	// Deserialize `ToLockEscrow`:
	err = decoder.Decode(&obj.ToLockEscrow)
	if err != nil {
		return errors.NewField("ToLockEscrow", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *MoveLockedLp) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MoveLockedLp: %w", err)
	}
	return nil
}

func UnmarshalMoveLockedLp(buf []byte) (*MoveLockedLp, error) {
	obj := new(MoveLockedLp)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
