// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package amm

import (
	"fmt"

	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AddLiquidity:
		value := new(AddLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AddLiquidity: %w", err)
		}
		return value, nil
	case Event_RemoveLiquidity:
		value := new(RemoveLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as RemoveLiquidity: %w", err)
		}
		return value, nil
	case Event_BootstrapLiquidity:
		value := new(BootstrapLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as BootstrapLiquidity: %w", err)
		}
		return value, nil
	case Event_Swap:
		value := new(Swap)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as Swap: %w", err)
		}
		return value, nil
	case Event_SetPoolFees:
		value := new(SetPoolFees)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SetPoolFees: %w", err)
		}
		return value, nil
	case Event_PoolInfo:
		value := new(PoolInfo)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PoolInfo: %w", err)
		}
		return value, nil
	case Event_TransferAdmin:
		value := new(TransferAdmin)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as TransferAdmin: %w", err)
		}
		return value, nil
	case Event_OverrideCurveParam:
		value := new(OverrideCurveParam)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as OverrideCurveParam: %w", err)
		}
		return value, nil
	case Event_PoolCreated:
		value := new(PoolCreated)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PoolCreated: %w", err)
		}
		return value, nil
	case Event_PoolEnabled:
		value := new(PoolEnabled)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PoolEnabled: %w", err)
		}
		return value, nil
	case Event_MigrateFeeAccount:
		value := new(MigrateFeeAccount)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as MigrateFeeAccount: %w", err)
		}
		return value, nil
	case Event_CreateLockEscrow:
		value := new(CreateLockEscrow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CreateLockEscrow: %w", err)
		}
		return value, nil
	case Event_Lock:
		value := new(Lock)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as Lock: %w", err)
		}
		return value, nil
	case Event_ClaimFee:
		value := new(ClaimFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClaimFee: %w", err)
		}
		return value, nil
	case Event_CreateConfig:
		value := new(CreateConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CreateConfig: %w", err)
		}
		return value, nil
	case Event_CloseConfig:
		value := new(CloseConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CloseConfig: %w", err)
		}
		return value, nil
	case Event_WithdrawProtocolFees:
		value := new(WithdrawProtocolFees)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as WithdrawProtocolFees: %w", err)
		}
		return value, nil
	case Event_PartnerClaimFees:
		value := new(PartnerClaimFees)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PartnerClaimFees: %w", err)
		}
		return value, nil
	case Event_MoveLockedLp:
		value := new(MoveLockedLp)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as MoveLockedLp: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AddLiquidity(eventData []byte) (*AddLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AddLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AddLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(AddLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AddLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_RemoveLiquidity(eventData []byte) (*RemoveLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_RemoveLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_RemoveLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(RemoveLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type RemoveLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_BootstrapLiquidity(eventData []byte) (*BootstrapLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_BootstrapLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_BootstrapLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(BootstrapLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type BootstrapLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_Swap(eventData []byte) (*Swap, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_Swap {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_Swap, binary.FormatDiscriminator(discriminator))
	}
	event := new(Swap)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type Swap: %w", err)
	}
	return event, nil
}

func ParseEvent_SetPoolFees(eventData []byte) (*SetPoolFees, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SetPoolFees {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SetPoolFees, binary.FormatDiscriminator(discriminator))
	}
	event := new(SetPoolFees)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SetPoolFees: %w", err)
	}
	return event, nil
}

func ParseEvent_PoolInfo(eventData []byte) (*PoolInfo, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PoolInfo {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PoolInfo, binary.FormatDiscriminator(discriminator))
	}
	event := new(PoolInfo)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PoolInfo: %w", err)
	}
	return event, nil
}

func ParseEvent_TransferAdmin(eventData []byte) (*TransferAdmin, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_TransferAdmin {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_TransferAdmin, binary.FormatDiscriminator(discriminator))
	}
	event := new(TransferAdmin)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type TransferAdmin: %w", err)
	}
	return event, nil
}

func ParseEvent_OverrideCurveParam(eventData []byte) (*OverrideCurveParam, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_OverrideCurveParam {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_OverrideCurveParam, binary.FormatDiscriminator(discriminator))
	}
	event := new(OverrideCurveParam)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type OverrideCurveParam: %w", err)
	}
	return event, nil
}

func ParseEvent_PoolCreated(eventData []byte) (*PoolCreated, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PoolCreated {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PoolCreated, binary.FormatDiscriminator(discriminator))
	}
	event := new(PoolCreated)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PoolCreated: %w", err)
	}
	return event, nil
}

func ParseEvent_PoolEnabled(eventData []byte) (*PoolEnabled, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PoolEnabled {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PoolEnabled, binary.FormatDiscriminator(discriminator))
	}
	event := new(PoolEnabled)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PoolEnabled: %w", err)
	}
	return event, nil
}

func ParseEvent_MigrateFeeAccount(eventData []byte) (*MigrateFeeAccount, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_MigrateFeeAccount {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_MigrateFeeAccount, binary.FormatDiscriminator(discriminator))
	}
	event := new(MigrateFeeAccount)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type MigrateFeeAccount: %w", err)
	}
	return event, nil
}

func ParseEvent_CreateLockEscrow(eventData []byte) (*CreateLockEscrow, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CreateLockEscrow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CreateLockEscrow, binary.FormatDiscriminator(discriminator))
	}
	event := new(CreateLockEscrow)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CreateLockEscrow: %w", err)
	}
	return event, nil
}

func ParseEvent_Lock(eventData []byte) (*Lock, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_Lock {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_Lock, binary.FormatDiscriminator(discriminator))
	}
	event := new(Lock)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type Lock: %w", err)
	}
	return event, nil
}

func ParseEvent_ClaimFee(eventData []byte) (*ClaimFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClaimFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClaimFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClaimFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClaimFee: %w", err)
	}
	return event, nil
}

func ParseEvent_CreateConfig(eventData []byte) (*CreateConfig, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CreateConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CreateConfig, binary.FormatDiscriminator(discriminator))
	}
	event := new(CreateConfig)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CreateConfig: %w", err)
	}
	return event, nil
}

func ParseEvent_CloseConfig(eventData []byte) (*CloseConfig, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CloseConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CloseConfig, binary.FormatDiscriminator(discriminator))
	}
	event := new(CloseConfig)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CloseConfig: %w", err)
	}
	return event, nil
}

func ParseEvent_WithdrawProtocolFees(eventData []byte) (*WithdrawProtocolFees, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_WithdrawProtocolFees {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_WithdrawProtocolFees, binary.FormatDiscriminator(discriminator))
	}
	event := new(WithdrawProtocolFees)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type WithdrawProtocolFees: %w", err)
	}
	return event, nil
}

func ParseEvent_PartnerClaimFees(eventData []byte) (*PartnerClaimFees, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PartnerClaimFees {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PartnerClaimFees, binary.FormatDiscriminator(discriminator))
	}
	event := new(PartnerClaimFees)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PartnerClaimFees: %w", err)
	}
	return event, nil
}

func ParseEvent_MoveLockedLp(eventData []byte) (*MoveLockedLp, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_MoveLockedLp {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_MoveLockedLp, binary.FormatDiscriminator(discriminator))
	}
	event := new(MoveLockedLp)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type MoveLockedLp: %w", err)
	}
	return event, nil
}
